
CAN_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c0  080090c0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090c8  080090c8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080090d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008b8  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000948  20000948  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f50  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000367d  00000000  00000000  00039010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  0003c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023869  00000000  00000000  0003eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d0b  00000000  00000000  00062319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce5e2  00000000  00000000  0007a024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148606  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052ec  00000000  00000000  00148658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009020 	.word	0x08009020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009020 	.word	0x08009020

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_CAN_RxFifo1MsgPendingCallback>:
	uint32_t TxMailbox;

	int datacheck = 0;

	void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
	{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK) //add
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 800058e:	4a0f      	ldr	r2, [pc, #60]	; (80005cc <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8000590:	2101      	movs	r1, #1
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f001 f91b 	bl	80017ce <HAL_CAN_GetRxMessage>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
		{
			Error_Handler();
 800059e:	f000 fb4f 	bl	8000c40 <Error_Handler>
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 80005aa:	f001 ff25 	bl	80023f8 <HAL_GPIO_WritePin>

		//if (RxHeader.DLC == 2)

		if (RxHeader.StdId== 0x446)
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f240 4246 	movw	r2, #1094	; 0x446
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d102      	bne.n	80005c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>
		{
			datacheck = 1;
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
		}

	}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000240 	.word	0x20000240
 80005cc:	2000021c 	.word	0x2000021c
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	2000024c 	.word	0x2000024c

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fd65 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f8a5 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f9ef 	bl	80009c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ea:	f000 f95f 	bl	80008ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80005ee:	f000 f98b 	bl	8000908 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005f2:	f007 fd5d 	bl	80080b0 <MX_USB_HOST_Init>
  MX_CAN1_Init();
 80005f6:	f000 f905 	bl	8000804 <MX_CAN1_Init>
  MX_UART5_Init();
 80005fa:	f000 f9bb 	bl	8000974 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  	HAL_CAN_Start(&hcan1);
 80005fe:	483f      	ldr	r0, [pc, #252]	; (80006fc <main+0x124>)
 8000600:	f000 ffc6 	bl	8001590 <HAL_CAN_Start>
  	// Activate the notification
  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000604:	2110      	movs	r1, #16
 8000606:	483d      	ldr	r0, [pc, #244]	; (80006fc <main+0x124>)
 8000608:	f001 f9f3 	bl	80019f2 <HAL_CAN_ActivateNotification>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <main+0x3e>
  	{
  		Error_Handler();
 8000612:	f000 fb15 	bl	8000c40 <Error_Handler>
  	}

  	TxHeader.DLC = 4;  // data length
 8000616:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <main+0x128>)
 8000618:	2204      	movs	r2, #4
 800061a:	611a      	str	r2, [r3, #16]
  	TxHeader.IDE = CAN_ID_STD;
 800061c:	4b38      	ldr	r3, [pc, #224]	; (8000700 <main+0x128>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  	TxHeader.RTR = CAN_RTR_DATA;
 8000622:	4b37      	ldr	r3, [pc, #220]	; (8000700 <main+0x128>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  	TxHeader.StdId = 0x103;  // ID
 8000628:	4b35      	ldr	r3, [pc, #212]	; (8000700 <main+0x128>)
 800062a:	f240 1203 	movw	r2, #259	; 0x103
 800062e:	601a      	str	r2, [r3, #0]

  	RxHeader.DLC = 4;
 8000630:	4b34      	ldr	r3, [pc, #208]	; (8000704 <main+0x12c>)
 8000632:	2204      	movs	r2, #4
 8000634:	611a      	str	r2, [r3, #16]

  	TxData[0] = 50; // ms delay
 8000636:	4b34      	ldr	r3, [pc, #208]	; (8000708 <main+0x130>)
 8000638:	2232      	movs	r2, #50	; 0x32
 800063a:	701a      	strb	r2, [r3, #0]
  	TxData[1] = 20; // loop rep
 800063c:	4b32      	ldr	r3, [pc, #200]	; (8000708 <main+0x130>)
 800063e:	2214      	movs	r2, #20
 8000640:	705a      	strb	r2, [r3, #1]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000642:	f007 fd5b 	bl	80080fc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    // blink the LED
    if(datacheck)
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <main+0x134>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f9      	beq.n	8000642 <main+0x6a>
    {

		HAL_Delay(500);
 800064e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000652:	f000 fd9d 	bl	8001190 <HAL_Delay>

		for (int i = 0; i < RxData[1]; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	e00c      	b.n	8000676 <main+0x9e>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // green led
 800065c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000660:	482b      	ldr	r0, [pc, #172]	; (8000710 <main+0x138>)
 8000662:	f001 fee2 	bl	800242a <HAL_GPIO_TogglePin>
			HAL_Delay(RxData[0]);
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <main+0x13c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fd90 	bl	8001190 <HAL_Delay>
		for (int i = 0; i < RxData[1]; i++)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3301      	adds	r3, #1
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <main+0x13c>)
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4293      	cmp	r3, r2
 8000680:	dbec      	blt.n	800065c <main+0x84>
		}
		datacheck = 0;
 8000682:	4b22      	ldr	r3, [pc, #136]	; (800070c <main+0x134>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]

	  	TxData[0] = 50; // ms delay
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <main+0x130>)
 800068a:	2232      	movs	r2, #50	; 0x32
 800068c:	701a      	strb	r2, [r3, #0]
	  	TxData[1] = 20; // loop rep
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <main+0x130>)
 8000690:	2214      	movs	r2, #20
 8000692:	705a      	strb	r2, [r3, #1]

	  	sprintf(temp, "Gia tri cua nhiet do = %d\r\n", RxData[2]);
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <main+0x13c>)
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	461a      	mov	r2, r3
 800069a:	491f      	ldr	r1, [pc, #124]	; (8000718 <main+0x140>)
 800069c:	481f      	ldr	r0, [pc, #124]	; (800071c <main+0x144>)
 800069e:	f008 f941 	bl	8008924 <siprintf>
	  	sprintf(humi, "Gia tri cua do am = %d\r\n", RxData[3]);
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <main+0x13c>)
 80006a4:	78db      	ldrb	r3, [r3, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	491d      	ldr	r1, [pc, #116]	; (8000720 <main+0x148>)
 80006aa:	481e      	ldr	r0, [pc, #120]	; (8000724 <main+0x14c>)
 80006ac:	f008 f93a 	bl	8008924 <siprintf>

	  	// truyen uart
		HAL_UART_Transmit(&huart5, temp , strlen(temp) , HAL_MAX_DELAY);
 80006b0:	481a      	ldr	r0, [pc, #104]	; (800071c <main+0x144>)
 80006b2:	f7ff fd8d 	bl	80001d0 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	4917      	ldr	r1, [pc, #92]	; (800071c <main+0x144>)
 80006c0:	4819      	ldr	r0, [pc, #100]	; (8000728 <main+0x150>)
 80006c2:	f004 f9ad 	bl	8004a20 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, humi , strlen(humi) , HAL_MAX_DELAY);
 80006c6:	4817      	ldr	r0, [pc, #92]	; (8000724 <main+0x14c>)
 80006c8:	f7ff fd82 	bl	80001d0 <strlen>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	4913      	ldr	r1, [pc, #76]	; (8000724 <main+0x14c>)
 80006d6:	4814      	ldr	r0, [pc, #80]	; (8000728 <main+0x150>)
 80006d8:	f004 f9a2 	bl	8004a20 <HAL_UART_Transmit>

		HAL_Delay(500);
 80006dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e0:	f000 fd56 	bl	8001190 <HAL_Delay>


	  	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)  // Add
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <main+0x154>)
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <main+0x130>)
 80006e8:	4905      	ldr	r1, [pc, #20]	; (8000700 <main+0x128>)
 80006ea:	4804      	ldr	r0, [pc, #16]	; (80006fc <main+0x124>)
 80006ec:	f000 ff94 	bl	8001618 <HAL_CAN_AddTxMessage>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0a5      	beq.n	8000642 <main+0x6a>
		{
			Error_Handler();
 80006f6:	f000 faa3 	bl	8000c40 <Error_Handler>
    MX_USB_HOST_Process();
 80006fa:	e7a2      	b.n	8000642 <main+0x6a>
 80006fc:	200000ac 	.word	0x200000ac
 8000700:	20000204 	.word	0x20000204
 8000704:	2000021c 	.word	0x2000021c
 8000708:	20000238 	.word	0x20000238
 800070c:	2000024c 	.word	0x2000024c
 8000710:	40020c00 	.word	0x40020c00
 8000714:	20000240 	.word	0x20000240
 8000718:	08009038 	.word	0x08009038
 800071c:	200001c4 	.word	0x200001c4
 8000720:	08009054 	.word	0x08009054
 8000724:	200001e4 	.word	0x200001e4
 8000728:	20000180 	.word	0x20000180
 800072c:	20000248 	.word	0x20000248

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f007 fff8 	bl	8008734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a27      	ldr	r2, [pc, #156]	; (80007fc <SystemClock_Config+0xcc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemClock_Config+0xd0>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ae:	2307      	movs	r3, #7
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fbc4 	bl	8003f44 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007c2:	f000 fa3d 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2105      	movs	r1, #5
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 fe25 	bl	8004434 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f0:	f000 fa26 	bl	8000c40 <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3750      	adds	r7, #80	; 0x50
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_CAN1_Init+0xa0>)
 800080c:	4a26      	ldr	r2, [pc, #152]	; (80008a8 <MX_CAN1_Init+0xa4>)
 800080e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_CAN1_Init+0xa0>)
 8000812:	2212      	movs	r2, #18
 8000814:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_CAN1_Init+0xa0>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_CAN1_Init+0xa0>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_CAN1_Init+0xa0>)
 8000824:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000828:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_CAN1_Init+0xa0>)
 800082c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000830:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_CAN1_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_CAN1_Init+0xa0>)
 800083a:	2200      	movs	r2, #0
 800083c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_CAN1_Init+0xa0>)
 8000840:	2200      	movs	r2, #0
 8000842:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_CAN1_Init+0xa0>)
 8000846:	2200      	movs	r2, #0
 8000848:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_CAN1_Init+0xa0>)
 800084c:	2200      	movs	r2, #0
 800084e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_CAN1_Init+0xa0>)
 8000852:	2200      	movs	r2, #0
 8000854:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_CAN1_Init+0xa0>)
 8000858:	f000 fcbe 	bl	80011d8 <HAL_CAN_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000862:	f000 f9ed 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 800086a:	230a      	movs	r3, #10
 800086c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800086e:	2301      	movs	r3, #1
 8000870:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x446 << 5;
 8000872:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000876:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x446 << 5;
 800087c:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000880:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // doesn't matter in single can controllers
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig); // add
 8000892:	463b      	mov	r3, r7
 8000894:	4619      	mov	r1, r3
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_CAN1_Init+0xa0>)
 8000898:	f000 fd9a 	bl	80013d0 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000ac 	.word	0x200000ac
 80008a8:	40006400 	.word	0x40006400

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b2:	4a13      	ldr	r2, [pc, #76]	; (8000900 <MX_I2C1_Init+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_I2C1_Init+0x58>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ea:	f003 f9e7 	bl	8003cbc <HAL_I2C_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f4:	f000 f9a4 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000d4 	.word	0x200000d4
 8000900:	40005400 	.word	0x40005400
 8000904:	000186a0 	.word	0x000186a0

08000908 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_SPI1_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <MX_SPI1_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI1_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI1_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_SPI1_Init+0x64>)
 800095a:	f003 ff8b 	bl	8004874 <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000964:	f000 f96c 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000128 	.word	0x20000128
 8000970:	40013000 	.word	0x40013000

08000974 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_UART5_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_UART5_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_UART5_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_UART5_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_UART5_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_UART5_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_UART5_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_UART5_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_UART5_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_UART5_Init+0x4c>)
 80009ac:	f003 ffeb 	bl	8004986 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f943 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000180 	.word	0x20000180
 80009c4:	40005000 	.word	0x40005000

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	4b91      	ldr	r3, [pc, #580]	; (8000c28 <MX_GPIO_Init+0x260>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a90      	ldr	r2, [pc, #576]	; (8000c28 <MX_GPIO_Init+0x260>)
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b8e      	ldr	r3, [pc, #568]	; (8000c28 <MX_GPIO_Init+0x260>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	4b8a      	ldr	r3, [pc, #552]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a89      	ldr	r2, [pc, #548]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b87      	ldr	r3, [pc, #540]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b83      	ldr	r3, [pc, #524]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a82      	ldr	r2, [pc, #520]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b80      	ldr	r3, [pc, #512]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b7c      	ldr	r3, [pc, #496]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a7b      	ldr	r2, [pc, #492]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b79      	ldr	r3, [pc, #484]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b75      	ldr	r3, [pc, #468]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a74      	ldr	r2, [pc, #464]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b72      	ldr	r3, [pc, #456]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b6e      	ldr	r3, [pc, #440]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a6d      	ldr	r2, [pc, #436]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b6b      	ldr	r3, [pc, #428]	; (8000c28 <MX_GPIO_Init+0x260>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2108      	movs	r1, #8
 8000a8a:	4868      	ldr	r0, [pc, #416]	; (8000c2c <MX_GPIO_Init+0x264>)
 8000a8c:	f001 fcb4 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2101      	movs	r1, #1
 8000a94:	4866      	ldr	r0, [pc, #408]	; (8000c30 <MX_GPIO_Init+0x268>)
 8000a96:	f001 fcaf 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000aa0:	4864      	ldr	r0, [pc, #400]	; (8000c34 <MX_GPIO_Init+0x26c>)
 8000aa2:	f001 fca9 	bl	80023f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	485b      	ldr	r0, [pc, #364]	; (8000c2c <MX_GPIO_Init+0x264>)
 8000abe:	f001 faff 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4855      	ldr	r0, [pc, #340]	; (8000c30 <MX_GPIO_Init+0x268>)
 8000ada:	f001 faf1 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	484e      	ldr	r0, [pc, #312]	; (8000c30 <MX_GPIO_Init+0x268>)
 8000af6:	f001 fae3 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000afa:	2308      	movs	r3, #8
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4846      	ldr	r0, [pc, #280]	; (8000c30 <MX_GPIO_Init+0x268>)
 8000b16:	f001 fad3 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4842      	ldr	r0, [pc, #264]	; (8000c38 <MX_GPIO_Init+0x270>)
 8000b30:	f001 fac6 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b34:	2310      	movs	r3, #16
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b44:	2306      	movs	r3, #6
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	483a      	ldr	r0, [pc, #232]	; (8000c38 <MX_GPIO_Init+0x270>)
 8000b50:	f001 fab6 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b54:	2304      	movs	r3, #4
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4835      	ldr	r0, [pc, #212]	; (8000c3c <MX_GPIO_Init+0x274>)
 8000b68:	f001 faaa 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	482c      	ldr	r0, [pc, #176]	; (8000c3c <MX_GPIO_Init+0x274>)
 8000b8a:	f001 fa99 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b8e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b92:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4823      	ldr	r0, [pc, #140]	; (8000c34 <MX_GPIO_Init+0x26c>)
 8000ba8:	f001 fa8a 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin;
 8000bac:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4819      	ldr	r0, [pc, #100]	; (8000c30 <MX_GPIO_Init+0x268>)
 8000bca:	f001 fa79 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4814      	ldr	r0, [pc, #80]	; (8000c34 <MX_GPIO_Init+0x26c>)
 8000be2:	f001 fa6d 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_GPIO_Init+0x264>)
 8000bfc:	f001 fa60 	bl	80020c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2006      	movs	r0, #6
 8000c06:	f001 fa24 	bl	8002052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c0a:	2006      	movs	r0, #6
 8000c0c:	f001 fa3d 	bl	800208a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2028      	movs	r0, #40	; 0x28
 8000c16:	f001 fa1c 	bl	8002052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c1a:	2028      	movs	r0, #40	; 0x28
 8000c1c:	f001 fa35 	bl	800208a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020400 	.word	0x40020400

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c8a:	2007      	movs	r0, #7
 8000c8c:	f001 f9d6 	bl	800203c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1d      	ldr	r2, [pc, #116]	; (8000d30 <HAL_CAN_MspInit+0x94>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d133      	bne.n	8000d26 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_CAN_MspInit+0x98>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_CAN_MspInit+0x98>)
 8000cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_CAN_MspInit+0x98>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_CAN_MspInit+0x98>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_CAN_MspInit+0x98>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_CAN_MspInit+0x98>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d06:	2309      	movs	r3, #9
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <HAL_CAN_MspInit+0x9c>)
 8000d12:	f001 f9d5 	bl	80020c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2015      	movs	r0, #21
 8000d1c:	f001 f999 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d20:	2015      	movs	r0, #21
 8000d22:	f001 f9b2 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40006400 	.word	0x40006400
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_I2C_MspInit+0x84>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12c      	bne.n	8000db8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d80:	2312      	movs	r3, #18
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <HAL_I2C_MspInit+0x8c>)
 8000d98:	f001 f992 	bl	80020c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000da6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020400 	.word	0x40020400

08000dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_SPI_MspInit+0x84>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12b      	bne.n	8000e46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e26:	23e0      	movs	r3, #224	; 0xe0
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e36:	2305      	movs	r3, #5
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_SPI_MspInit+0x8c>)
 8000e42:	f001 f93d 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40013000 	.word	0x40013000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <HAL_UART_MspInit+0xc0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d14a      	bne.n	8000f14 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <HAL_UART_MspInit+0xc4>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a26      	ldr	r2, [pc, #152]	; (8000f20 <HAL_UART_MspInit+0xc4>)
 8000e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <HAL_UART_MspInit+0xc4>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_UART_MspInit+0xc4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_UART_MspInit+0xc4>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_UART_MspInit+0xc4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0xc4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0xc4>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_UART_MspInit+0xc4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <HAL_UART_MspInit+0xc8>)
 8000ef0:	f001 f8e6 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f04:	2308      	movs	r3, #8
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	; (8000f28 <HAL_UART_MspInit+0xcc>)
 8000f10:	f001 f8d6 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40005000 	.word	0x40005000
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40020c00 	.word	0x40020c00

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f78:	f000 f8ea 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f001 fa6b 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
//
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <CAN1_RX1_IRQHandler+0x10>)
 8000f96:	f000 fd52 	bl	8001a3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
//
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000ac 	.word	0x200000ac

08000fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fac:	f001 fa58 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <OTG_FS_IRQHandler+0x10>)
 8000fba:	f001 fcdf 	bl	800297c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000634 	.word	0x20000634

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f007 fb62 	bl	80086c0 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20020000 	.word	0x20020000
 8001028:	00000400 	.word	0x00000400
 800102c:	20000250 	.word	0x20000250
 8001030:	20000948 	.word	0x20000948

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001074:	4c0b      	ldr	r4, [pc, #44]	; (80010a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001082:	f7ff ffd7 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f007 fb21 	bl	80086cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff faa5 	bl	80005d8 <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800109c:	080090d0 	.word	0x080090d0
  ldr r2, =_sbss
 80010a0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80010a4:	20000948 	.word	0x20000948

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 ffb1 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fdb4 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 ffc9 	bl	80020a6 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 ff91 	bl	8002052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	20000254 	.word	0x20000254

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000254 	.word	0x20000254

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008

080011d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e0ed      	b.n	80013c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fd50 	bl	8000c9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff ffb4 	bl	8001178 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001212:	e012      	b.n	800123a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001214:	f7ff ffb0 	bl	8001178 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d90b      	bls.n	800123a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2205      	movs	r2, #5
 8001232:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e0c5      	b.n	80013c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0e5      	beq.n	8001214 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0202 	bic.w	r2, r2, #2
 8001256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001258:	f7ff ff8e 	bl	8001178 <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800125e:	e012      	b.n	8001286 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001260:	f7ff ff8a 	bl	8001178 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d90b      	bls.n	8001286 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2205      	movs	r2, #5
 800127e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e09f      	b.n	80013c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e5      	bne.n	8001260 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7e1b      	ldrb	r3, [r3, #24]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e007      	b.n	80012be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7e5b      	ldrb	r3, [r3, #25]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e007      	b.n	80012e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e9b      	ldrb	r3, [r3, #26]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0220 	orr.w	r2, r2, #32
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e007      	b.n	8001312 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0220 	bic.w	r2, r2, #32
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7edb      	ldrb	r3, [r3, #27]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d108      	bne.n	800132c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0210 	bic.w	r2, r2, #16
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e007      	b.n	800133c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0210 	orr.w	r2, r2, #16
 800133a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7f1b      	ldrb	r3, [r3, #28]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d108      	bne.n	8001356 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e007      	b.n	8001366 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0208 	bic.w	r2, r2, #8
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7f5b      	ldrb	r3, [r3, #29]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0204 	orr.w	r2, r2, #4
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e007      	b.n	8001390 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0204 	bic.w	r2, r2, #4
 800138e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	ea42 0103 	orr.w	r1, r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d003      	beq.n	80013f6 <HAL_CAN_ConfigFilter+0x26>
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	f040 80be 	bne.w	8001572 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_CAN_ConfigFilter+0x1bc>)
 80013f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001410:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	431a      	orrs	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2201      	movs	r2, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	401a      	ands	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d123      	bne.n	80014a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800147a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3248      	adds	r2, #72	; 0x48
 8001480:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001494:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001496:	6979      	ldr	r1, [r7, #20]
 8001498:	3348      	adds	r3, #72	; 0x48
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d122      	bne.n	80014ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3248      	adds	r2, #72	; 0x48
 80014ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e4:	6979      	ldr	r1, [r7, #20]
 80014e6:	3348      	adds	r3, #72	; 0x48
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	440b      	add	r3, r1
 80014ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	401a      	ands	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001508:	e007      	b.n	800151a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	401a      	ands	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001534:	e007      	b.n	8001546 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	431a      	orrs	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d107      	bne.n	800155e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	431a      	orrs	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001564:	f023 0201 	bic.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e006      	b.n	8001580 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
  }
}
 8001580:	4618      	mov	r0, r3
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40006400 	.word	0x40006400

08001590 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d12e      	bne.n	8001602 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff fddc 	bl	8001178 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c2:	e012      	b.n	80015ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c4:	f7ff fdd8 	bl	8001178 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d90b      	bls.n	80015ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e012      	b.n	8001610 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e5      	bne.n	80015c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e006      	b.n	8001610 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d003      	beq.n	8001644 <HAL_CAN_AddTxMessage+0x2c>
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	2b02      	cmp	r3, #2
 8001640:	f040 80b8 	bne.w	80017b4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10a      	bne.n	8001664 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80a0 	beq.w	80017a4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	0e1b      	lsrs	r3, r3, #24
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d907      	bls.n	8001684 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e09e      	b.n	80017c2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001684:	2201      	movs	r2, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	409a      	lsls	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	6809      	ldr	r1, [r1, #0]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3318      	adds	r3, #24
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	440b      	add	r3, r1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e00f      	b.n	80016d2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016bc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c2:	68f9      	ldr	r1, [r7, #12]
 80016c4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016c6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3318      	adds	r3, #24
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	440b      	add	r3, r1
 80016d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6819      	ldr	r1, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3318      	adds	r3, #24
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	440b      	add	r3, r1
 80016e2:	3304      	adds	r3, #4
 80016e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	7d1b      	ldrb	r3, [r3, #20]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d111      	bne.n	8001712 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3318      	adds	r3, #24
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4413      	add	r3, r2
 80016fa:	3304      	adds	r3, #4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	6811      	ldr	r1, [r2, #0]
 8001702:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3318      	adds	r3, #24
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	440b      	add	r3, r1
 800170e:	3304      	adds	r3, #4
 8001710:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3307      	adds	r3, #7
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	061a      	lsls	r2, r3, #24
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3306      	adds	r3, #6
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3305      	adds	r3, #5
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4313      	orrs	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	3204      	adds	r2, #4
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	4610      	mov	r0, r2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	6811      	ldr	r1, [r2, #0]
 800173a:	ea43 0200 	orr.w	r2, r3, r0
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	440b      	add	r3, r1
 8001744:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001748:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3303      	adds	r3, #3
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	061a      	lsls	r2, r3, #24
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3302      	adds	r3, #2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	4313      	orrs	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	4610      	mov	r0, r2
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	6811      	ldr	r1, [r2, #0]
 8001770:	ea43 0200 	orr.w	r2, r3, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	440b      	add	r3, r1
 800177a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800177e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3318      	adds	r3, #24
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	6811      	ldr	r1, [r2, #0]
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3318      	adds	r3, #24
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	440b      	add	r3, r1
 800179e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e00e      	b.n	80017c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e006      	b.n	80017c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017ce:	b480      	push	{r7}
 80017d0:	b087      	sub	sp, #28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d003      	beq.n	80017f2 <HAL_CAN_GetRxMessage+0x24>
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	f040 80f3 	bne.w	80019d8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10e      	bne.n	8001816 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d116      	bne.n	8001834 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0e7      	b.n	80019e6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0d8      	b.n	80019e6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	331b      	adds	r3, #27
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0204 	and.w	r2, r3, #4
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	331b      	adds	r3, #27
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	4413      	add	r3, r2
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0d5b      	lsrs	r3, r3, #21
 8001862:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e00b      	b.n	8001884 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	331b      	adds	r3, #27
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	4413      	add	r3, r2
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	331b      	adds	r3, #27
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0202 	and.w	r2, r3, #2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	331b      	adds	r3, #27
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	3304      	adds	r3, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 020f 	and.w	r2, r3, #15
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	331b      	adds	r3, #27
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	3304      	adds	r3, #4
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	331b      	adds	r3, #27
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	3304      	adds	r3, #4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0a1a      	lsrs	r2, r3, #8
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	0c1a      	lsrs	r2, r3, #16
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	3302      	adds	r3, #2
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0e1a      	lsrs	r2, r3, #24
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	3303      	adds	r3, #3
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	3304      	adds	r3, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	4413      	add	r3, r2
 8001968:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0a1a      	lsrs	r2, r3, #8
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	3305      	adds	r3, #5
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0c1a      	lsrs	r2, r3, #16
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	3306      	adds	r3, #6
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	4413      	add	r3, r2
 800199c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	0e1a      	lsrs	r2, r3, #24
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3307      	adds	r3, #7
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0220 	orr.w	r2, r2, #32
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	e007      	b.n	80019d4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0220 	orr.w	r2, r2, #32
 80019d2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e006      	b.n	80019e6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
  }
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a02:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d002      	beq.n	8001a10 <HAL_CAN_ActivateNotification+0x1e>
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d109      	bne.n	8001a24 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6959      	ldr	r1, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e006      	b.n	8001a32 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b08a      	sub	sp, #40	; 0x28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d07c      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d023      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2201      	movs	r2, #1
 8001a94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f983 	bl	8001dac <HAL_CAN_TxMailbox0CompleteCallback>
 8001aa6:	e016      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	e00c      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	e002      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f989 	bl	8001de8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d024      	beq.n	8001b2a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f963 	bl	8001dc0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001afa:	e016      	b.n	8001b2a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d004      	beq.n	8001b10 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	e00c      	b.n	8001b2a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e002      	b.n	8001b2a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f969 	bl	8001dfc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d024      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f943 	bl	8001dd4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b4e:	e016      	b.n	8001b7e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	e00c      	b.n	8001b7e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e002      	b.n	8001b7e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f949 	bl	8001e10 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00c      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00b      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2208      	movs	r2, #8
 8001bbc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f93a 	bl	8001e38 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f921 	bl	8001e24 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2210      	movs	r2, #16
 8001c04:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2208      	movs	r2, #8
 8001c20:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f912 	bl	8001e4c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7fe fc9f 	bl	8000584 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2210      	movs	r2, #16
 8001c60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8fc 	bl	8001e60 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2208      	movs	r2, #8
 8001c82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8f5 	bl	8001e74 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d07b      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d072      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d043      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d03e      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d0c:	2b60      	cmp	r3, #96	; 0x60
 8001d0e:	d02b      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x32a>
 8001d10:	2b60      	cmp	r3, #96	; 0x60
 8001d12:	d82e      	bhi.n	8001d72 <HAL_CAN_IRQHandler+0x334>
 8001d14:	2b50      	cmp	r3, #80	; 0x50
 8001d16:	d022      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x320>
 8001d18:	2b50      	cmp	r3, #80	; 0x50
 8001d1a:	d82a      	bhi.n	8001d72 <HAL_CAN_IRQHandler+0x334>
 8001d1c:	2b40      	cmp	r3, #64	; 0x40
 8001d1e:	d019      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x316>
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d826      	bhi.n	8001d72 <HAL_CAN_IRQHandler+0x334>
 8001d24:	2b30      	cmp	r3, #48	; 0x30
 8001d26:	d010      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x30c>
 8001d28:	2b30      	cmp	r3, #48	; 0x30
 8001d2a:	d822      	bhi.n	8001d72 <HAL_CAN_IRQHandler+0x334>
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d002      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x2f8>
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d005      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d34:	e01d      	b.n	8001d72 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d3e:	e019      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	f043 0310 	orr.w	r3, r3, #16
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d48:	e014      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	f043 0320 	orr.w	r3, r3, #32
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d52:	e00f      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d5c:	e00a      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d66:	e005      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d70:	e000      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d72:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d82:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f872 	bl	8001e88 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <__NVIC_EnableIRQ+0x38>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db0a      	blt.n	8001f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	490c      	ldr	r1, [pc, #48]	; (8001f88 <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f64:	e00a      	b.n	8001f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4908      	ldr	r1, [pc, #32]	; (8001f8c <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	761a      	strb	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f1c3 0307 	rsb	r3, r3, #7
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	bf28      	it	cs
 8001fae:	2304      	movcs	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d902      	bls.n	8001fc0 <NVIC_EncodePriority+0x30>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b03      	subs	r3, #3
 8001fbe:	e000      	b.n	8001fc2 <NVIC_EncodePriority+0x32>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
         );
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002008:	d301      	bcc.n	800200e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <SysTick_Config+0x40>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002016:	210f      	movs	r1, #15
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f7ff ff8e 	bl	8001f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <SysTick_Config+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <SysTick_Config+0x40>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff29 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff3e 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff8e 	bl	8001f90 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5d 	bl	8001f3c <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff31 	bl	8001f00 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e16b      	b.n	80023b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f040 815a 	bne.w	80023ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d005      	beq.n	8002112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	2b02      	cmp	r3, #2
 8002110:	d130      	bne.n	8002174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 0201 	and.w	r2, r3, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b03      	cmp	r3, #3
 800217e:	d017      	beq.n	80021b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d123      	bne.n	8002204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	08da      	lsrs	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3208      	adds	r2, #8
 80021c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80b4 	beq.w	80023ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b60      	ldr	r3, [pc, #384]	; (80023cc <HAL_GPIO_Init+0x30c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a5f      	ldr	r2, [pc, #380]	; (80023cc <HAL_GPIO_Init+0x30c>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <HAL_GPIO_Init+0x30c>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002262:	4a5b      	ldr	r2, [pc, #364]	; (80023d0 <HAL_GPIO_Init+0x310>)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_GPIO_Init+0x314>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d02b      	beq.n	80022e6 <HAL_GPIO_Init+0x226>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a51      	ldr	r2, [pc, #324]	; (80023d8 <HAL_GPIO_Init+0x318>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d025      	beq.n	80022e2 <HAL_GPIO_Init+0x222>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a50      	ldr	r2, [pc, #320]	; (80023dc <HAL_GPIO_Init+0x31c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01f      	beq.n	80022de <HAL_GPIO_Init+0x21e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <HAL_GPIO_Init+0x320>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d019      	beq.n	80022da <HAL_GPIO_Init+0x21a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4e      	ldr	r2, [pc, #312]	; (80023e4 <HAL_GPIO_Init+0x324>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0x216>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4d      	ldr	r2, [pc, #308]	; (80023e8 <HAL_GPIO_Init+0x328>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_GPIO_Init+0x212>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4c      	ldr	r2, [pc, #304]	; (80023ec <HAL_GPIO_Init+0x32c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_GPIO_Init+0x20e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4b      	ldr	r2, [pc, #300]	; (80023f0 <HAL_GPIO_Init+0x330>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_GPIO_Init+0x20a>
 80022c6:	2307      	movs	r3, #7
 80022c8:	e00e      	b.n	80022e8 <HAL_GPIO_Init+0x228>
 80022ca:	2308      	movs	r3, #8
 80022cc:	e00c      	b.n	80022e8 <HAL_GPIO_Init+0x228>
 80022ce:	2306      	movs	r3, #6
 80022d0:	e00a      	b.n	80022e8 <HAL_GPIO_Init+0x228>
 80022d2:	2305      	movs	r3, #5
 80022d4:	e008      	b.n	80022e8 <HAL_GPIO_Init+0x228>
 80022d6:	2304      	movs	r3, #4
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x228>
 80022da:	2303      	movs	r3, #3
 80022dc:	e004      	b.n	80022e8 <HAL_GPIO_Init+0x228>
 80022de:	2302      	movs	r3, #2
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_Init+0x228>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_GPIO_Init+0x228>
 80022e6:	2300      	movs	r3, #0
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	f002 0203 	and.w	r2, r2, #3
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	4093      	lsls	r3, r2
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f8:	4935      	ldr	r1, [pc, #212]	; (80023d0 <HAL_GPIO_Init+0x310>)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_GPIO_Init+0x334>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232a:	4a32      	ldr	r2, [pc, #200]	; (80023f4 <HAL_GPIO_Init+0x334>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002330:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_GPIO_Init+0x334>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002354:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <HAL_GPIO_Init+0x334>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_GPIO_Init+0x334>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237e:	4a1d      	ldr	r2, [pc, #116]	; (80023f4 <HAL_GPIO_Init+0x334>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_GPIO_Init+0x334>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_GPIO_Init+0x334>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b0f      	cmp	r3, #15
 80023b8:	f67f ae90 	bls.w	80020dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40013800 	.word	0x40013800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40020400 	.word	0x40020400
 80023dc:	40020800 	.word	0x40020800
 80023e0:	40020c00 	.word	0x40020c00
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40021400 	.word	0x40021400
 80023ec:	40021800 	.word	0x40021800
 80023f0:	40021c00 	.word	0x40021c00
 80023f4:	40013c00 	.word	0x40013c00

080023f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
 8002404:	4613      	mov	r3, r2
 8002406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002408:	787b      	ldrb	r3, [r7, #1]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002414:	e003      	b.n	800241e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	041a      	lsls	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800243c:	887a      	ldrh	r2, [r7, #2]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	041a      	lsls	r2, r3, #16
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43d9      	mvns	r1, r3
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	400b      	ands	r3, r1
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f806 	bl	8002490 <HAL_GPIO_EXTI_Callback>
  }
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40013c00 	.word	0x40013c00

08002490 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a8:	b08f      	sub	sp, #60	; 0x3c
 80024aa:	af0a      	add	r7, sp, #40	; 0x28
 80024ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e054      	b.n	8002562 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f005 fe4a 	bl	800816c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2203      	movs	r2, #3
 80024dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fe78 	bl	80051ec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	687e      	ldr	r6, [r7, #4]
 8002504:	466d      	mov	r5, sp
 8002506:	f106 0410 	add.w	r4, r6, #16
 800250a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002516:	e885 0003 	stmia.w	r5, {r0, r1}
 800251a:	1d33      	adds	r3, r6, #4
 800251c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f002 fdf2 	bl	8005108 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	4618      	mov	r0, r3
 800252c:	f002 fe6f 	bl	800520e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	687e      	ldr	r6, [r7, #4]
 8002538:	466d      	mov	r5, sp
 800253a:	f106 0410 	add.w	r4, r6, #16
 800253e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254a:	e885 0003 	stmia.w	r5, {r0, r1}
 800254e:	1d33      	adds	r3, r6, #4
 8002550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	f002 fff8 	bl	8005548 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800256a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800256a:	b590      	push	{r4, r7, lr}
 800256c:	b089      	sub	sp, #36	; 0x24
 800256e:	af04      	add	r7, sp, #16
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	4608      	mov	r0, r1
 8002574:	4611      	mov	r1, r2
 8002576:	461a      	mov	r2, r3
 8002578:	4603      	mov	r3, r0
 800257a:	70fb      	strb	r3, [r7, #3]
 800257c:	460b      	mov	r3, r1
 800257e:	70bb      	strb	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_HCD_HC_Init+0x28>
 800258e:	2302      	movs	r3, #2
 8002590:	e076      	b.n	8002680 <HAL_HCD_HC_Init+0x116>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	333d      	adds	r3, #61	; 0x3d
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3338      	adds	r3, #56	; 0x38
 80025ba:	787a      	ldrb	r2, [r7, #1]
 80025bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3340      	adds	r3, #64	; 0x40
 80025cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025ce:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3339      	adds	r3, #57	; 0x39
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	333f      	adds	r3, #63	; 0x3f
 80025f0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80025f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	78ba      	ldrb	r2, [r7, #2]
 80025fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025fe:	b2d0      	uxtb	r0, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	333a      	adds	r3, #58	; 0x3a
 800260c:	4602      	mov	r2, r0
 800260e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002610:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002614:	2b00      	cmp	r3, #0
 8002616:	da09      	bge.n	800262c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	333b      	adds	r3, #59	; 0x3b
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e008      	b.n	800263e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	333b      	adds	r3, #59	; 0x3b
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	333c      	adds	r3, #60	; 0x3c
 800264c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002650:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	787c      	ldrb	r4, [r7, #1]
 8002658:	78ba      	ldrb	r2, [r7, #2]
 800265a:	78f9      	ldrb	r1, [r7, #3]
 800265c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800265e:	9302      	str	r3, [sp, #8]
 8002660:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	4623      	mov	r3, r4
 800266e:	f003 f8f1 	bl	8005854 <USB_HC_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_HCD_HC_Halt+0x1e>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e00f      	b.n	80026c6 <HAL_HCD_HC_Halt+0x3e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fb41 	bl	8005d3e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	70fb      	strb	r3, [r7, #3]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70bb      	strb	r3, [r7, #2]
 80026e6:	4613      	mov	r3, r2
 80026e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	333b      	adds	r3, #59	; 0x3b
 80026f8:	78ba      	ldrb	r2, [r7, #2]
 80026fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	333f      	adds	r3, #63	; 0x3f
 800270a:	787a      	ldrb	r2, [r7, #1]
 800270c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800270e:	7c3b      	ldrb	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d112      	bne.n	800273a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3342      	adds	r3, #66	; 0x42
 8002722:	2203      	movs	r2, #3
 8002724:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	333d      	adds	r3, #61	; 0x3d
 8002734:	7f3a      	ldrb	r2, [r7, #28]
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e008      	b.n	800274c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3342      	adds	r3, #66	; 0x42
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b03      	cmp	r3, #3
 8002750:	f200 80c6 	bhi.w	80028e0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800276d 	.word	0x0800276d
 8002760:	080028cd 	.word	0x080028cd
 8002764:	080027d1 	.word	0x080027d1
 8002768:	0800284f 	.word	0x0800284f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800276c:	7c3b      	ldrb	r3, [r7, #16]
 800276e:	2b01      	cmp	r3, #1
 8002770:	f040 80b8 	bne.w	80028e4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002774:	78bb      	ldrb	r3, [r7, #2]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 80b4 	bne.w	80028e4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800277c:	8b3b      	ldrh	r3, [r7, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3355      	adds	r3, #85	; 0x55
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3355      	adds	r3, #85	; 0x55
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	3342      	adds	r3, #66	; 0x42
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027ba:	e093      	b.n	80028e4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3342      	adds	r3, #66	; 0x42
 80027ca:	2202      	movs	r2, #2
 80027cc:	701a      	strb	r2, [r3, #0]
      break;
 80027ce:	e089      	b.n	80028e4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80027d0:	78bb      	ldrb	r3, [r7, #2]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11d      	bne.n	8002812 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3355      	adds	r3, #85	; 0x55
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3342      	adds	r3, #66	; 0x42
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80027fc:	e073      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3342      	adds	r3, #66	; 0x42
 800280c:	2202      	movs	r2, #2
 800280e:	701a      	strb	r2, [r3, #0]
      break;
 8002810:	e069      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3354      	adds	r3, #84	; 0x54
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3342      	adds	r3, #66	; 0x42
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
      break;
 8002838:	e055      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3342      	adds	r3, #66	; 0x42
 8002848:	2202      	movs	r2, #2
 800284a:	701a      	strb	r2, [r3, #0]
      break;
 800284c:	e04b      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800284e:	78bb      	ldrb	r3, [r7, #2]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11d      	bne.n	8002890 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3355      	adds	r3, #85	; 0x55
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3342      	adds	r3, #66	; 0x42
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800287a:	e034      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3342      	adds	r3, #66	; 0x42
 800288a:	2202      	movs	r2, #2
 800288c:	701a      	strb	r2, [r3, #0]
      break;
 800288e:	e02a      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3354      	adds	r3, #84	; 0x54
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3342      	adds	r3, #66	; 0x42
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
      break;
 80028b6:	e016      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3342      	adds	r3, #66	; 0x42
 80028c6:	2202      	movs	r2, #2
 80028c8:	701a      	strb	r2, [r3, #0]
      break;
 80028ca:	e00c      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3342      	adds	r3, #66	; 0x42
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
      break;
 80028de:	e002      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80028e0:	bf00      	nop
 80028e2:	e000      	b.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80028e4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3344      	adds	r3, #68	; 0x44
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	8b3a      	ldrh	r2, [r7, #24]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	202c      	movs	r0, #44	; 0x2c
 8002900:	fb00 f303 	mul.w	r3, r0, r3
 8002904:	440b      	add	r3, r1
 8002906:	334c      	adds	r3, #76	; 0x4c
 8002908:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	3360      	adds	r3, #96	; 0x60
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3350      	adds	r3, #80	; 0x50
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3339      	adds	r3, #57	; 0x39
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3361      	adds	r3, #97	; 0x61
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	222c      	movs	r2, #44	; 0x2c
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	3338      	adds	r3, #56	; 0x38
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	18d1      	adds	r1, r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	f003 f894 	bl	8005a98 <USB_HC_StartXfer>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop

0800297c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f002 fd95 	bl	80054c2 <USB_GetMode>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	f040 80f6 	bne.w	8002b8c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 fd79 	bl	800549c <USB_ReadInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80ec 	beq.w	8002b8a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 fd70 	bl	800549c <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c6:	d104      	bne.n	80029d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 fd60 	bl	800549c <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e6:	d104      	bne.n	80029f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 fd50 	bl	800549c <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a06:	d104      	bne.n	8002a12 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fd40 	bl	800549c <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d103      	bne.n	8002a2e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f002 fd32 	bl	800549c <USB_ReadInterrupts>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a42:	d11c      	bne.n	8002a7e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a4c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10f      	bne.n	8002a7e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a5e:	2110      	movs	r1, #16
 8002a60:	6938      	ldr	r0, [r7, #16]
 8002a62:	f002 fc21 	bl	80052a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a66:	6938      	ldr	r0, [r7, #16]
 8002a68:	f002 fc52 	bl	8005310 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fe28 	bl	80056c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f005 fbf5 	bl	8008268 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fd0a 	bl	800549c <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a92:	d102      	bne.n	8002a9a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f001 f89e 	bl	8003bd6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fcfc 	bl	800549c <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d106      	bne.n	8002abc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f005 fbbe 	bl	8008230 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2208      	movs	r2, #8
 8002aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fceb 	bl	800549c <USB_ReadInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d101      	bne.n	8002ad4 <HAL_HCD_IRQHandler+0x158>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <HAL_HCD_IRQHandler+0x15a>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d012      	beq.n	8002b00 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0210 	bic.w	r2, r2, #16
 8002ae8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 ffa1 	bl	8003a32 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0210 	orr.w	r2, r2, #16
 8002afe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f002 fcc9 	bl	800549c <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b14:	d13a      	bne.n	8002b8c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 f8fe 	bl	8005d1c <USB_HC_ReadInterrupt>
 8002b20:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e025      	b.n	8002b74 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d018      	beq.n	8002b6e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b52:	d106      	bne.n	8002b62 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8ab 	bl	8002cb6 <HCD_HC_IN_IRQHandler>
 8002b60:	e005      	b.n	8002b6e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fbf9 	bl	8003360 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3301      	adds	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d3d4      	bcc.n	8002b28 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b86:	615a      	str	r2, [r3, #20]
 8002b88:	e000      	b.n	8002b8c <HAL_HCD_IRQHandler+0x210>
      return;
 8002b8a:	bf00      	nop
    }
  }
}
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_HCD_Start+0x16>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e013      	b.n	8002bd0 <HAL_HCD_Start+0x3e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fdea 	bl	8005790 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fb02 	bl	80051ca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_HCD_Stop+0x16>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e00d      	b.n	8002c0a <HAL_HCD_Stop+0x32>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 f9d8 	bl	8005fb0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 fd8c 	bl	800573c <USB_ResetPort>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3360      	adds	r3, #96	; 0x60
 8002c48:	781b      	ldrb	r3, [r3, #0]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3350      	adds	r3, #80	; 0x50
 8002c70:	681b      	ldr	r3, [r3, #0]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fdd0 	bl	8005830 <USB_GetCurrentFrame>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 fdab 	bl	8005802 <USB_GetHostSpeed>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d11a      	bne.n	8002d1c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3361      	adds	r3, #97	; 0x61
 8002d06:	2206      	movs	r2, #6
 8002d08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 f812 	bl	8005d3e <USB_HC_Halt>
 8002d1a:	e0af      	b.n	8002e7c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d32:	d11b      	bne.n	8002d6c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	461a      	mov	r2, r3
 8002d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3361      	adds	r3, #97	; 0x61
 8002d56:	2207      	movs	r2, #7
 8002d58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 ffea 	bl	8005d3e <USB_HC_Halt>
 8002d6a:	e087      	b.n	8002e7c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d109      	bne.n	8002d96 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2320      	movs	r3, #32
 8002d92:	6093      	str	r3, [r2, #8]
 8002d94:	e072      	b.n	8002e7c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d11a      	bne.n	8002de2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	461a      	mov	r2, r3
 8002dba:	2308      	movs	r3, #8
 8002dbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3361      	adds	r3, #97	; 0x61
 8002dcc:	2205      	movs	r2, #5
 8002dce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f002 ffaf 	bl	8005d3e <USB_HC_Halt>
 8002de0:	e04c      	b.n	8002e7c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df8:	d11b      	bne.n	8002e32 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	461a      	mov	r2, r3
 8002e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3361      	adds	r3, #97	; 0x61
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f002 ff87 	bl	8005d3e <USB_HC_Halt>
 8002e30:	e024      	b.n	8002e7c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e44:	2b80      	cmp	r3, #128	; 0x80
 8002e46:	d119      	bne.n	8002e7c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	461a      	mov	r2, r3
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3361      	adds	r3, #97	; 0x61
 8002e68:	2206      	movs	r2, #6
 8002e6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 ff61 	bl	8005d3e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e92:	d112      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 ff4d 	bl	8005d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002eb8:	e24e      	b.n	8003358 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	f040 80df 	bne.w	8003090 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d019      	beq.n	8002f0e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3348      	adds	r3, #72	; 0x48
 8002ee8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	0159      	lsls	r1, r3, #5
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002efc:	1ad2      	subs	r2, r2, r3
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	202c      	movs	r0, #44	; 0x2c
 8002f04:	fb00 f303 	mul.w	r3, r0, r3
 8002f08:	440b      	add	r3, r1
 8002f0a:	3350      	adds	r3, #80	; 0x50
 8002f0c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	212c      	movs	r1, #44	; 0x2c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3361      	adds	r3, #97	; 0x61
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	335c      	adds	r3, #92	; 0x5c
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2301      	movs	r3, #1
 8002f42:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	333f      	adds	r3, #63	; 0x3f
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	333f      	adds	r3, #63	; 0x3f
 8002f66:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d111      	bne.n	8002f90 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 fee1 	bl	8005d3e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	6093      	str	r3, [r2, #8]
 8002f8e:	e03a      	b.n	8003006 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	333f      	adds	r3, #63	; 0x3f
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d009      	beq.n	8002fb8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	333f      	adds	r3, #63	; 0x3f
 8002fb2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d126      	bne.n	8003006 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	0151      	lsls	r1, r2, #5
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	440a      	add	r2, r1
 8002fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fd6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3360      	adds	r3, #96	; 0x60
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	b2d9      	uxtb	r1, r3
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	202c      	movs	r0, #44	; 0x2c
 8002ff4:	fb00 f303 	mul.w	r3, r0, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3360      	adds	r3, #96	; 0x60
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f005 f93f 	bl	8008284 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d12b      	bne.n	8003066 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	3348      	adds	r3, #72	; 0x48
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	202c      	movs	r0, #44	; 0x2c
 8003024:	fb00 f202 	mul.w	r2, r0, r2
 8003028:	440a      	add	r2, r1
 800302a:	3240      	adds	r2, #64	; 0x40
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 818e 	beq.w	8003358 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3354      	adds	r3, #84	; 0x54
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	f083 0301 	eor.w	r3, r3, #1
 8003050:	b2d8      	uxtb	r0, r3
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3354      	adds	r3, #84	; 0x54
 8003060:	4602      	mov	r2, r0
 8003062:	701a      	strb	r2, [r3, #0]
}
 8003064:	e178      	b.n	8003358 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3354      	adds	r3, #84	; 0x54
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	f083 0301 	eor.w	r3, r3, #1
 800307a:	b2d8      	uxtb	r0, r3
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3354      	adds	r3, #84	; 0x54
 800308a:	4602      	mov	r2, r0
 800308c:	701a      	strb	r2, [r3, #0]
}
 800308e:	e163      	b.n	8003358 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	f040 80f6 	bne.w	8003294 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3361      	adds	r3, #97	; 0x61
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d109      	bne.n	80030d0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3360      	adds	r3, #96	; 0x60
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e0c9      	b.n	8003264 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3361      	adds	r3, #97	; 0x61
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d109      	bne.n	80030f8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3360      	adds	r3, #96	; 0x60
 80030f2:	2205      	movs	r2, #5
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e0b5      	b.n	8003264 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3361      	adds	r3, #97	; 0x61
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b06      	cmp	r3, #6
 800310a:	d009      	beq.n	8003120 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3361      	adds	r3, #97	; 0x61
 800311a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800311c:	2b08      	cmp	r3, #8
 800311e:	d150      	bne.n	80031c2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	335c      	adds	r3, #92	; 0x5c
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	202c      	movs	r0, #44	; 0x2c
 8003138:	fb00 f303 	mul.w	r3, r0, r3
 800313c:	440b      	add	r3, r1
 800313e:	335c      	adds	r3, #92	; 0x5c
 8003140:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	335c      	adds	r3, #92	; 0x5c
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d912      	bls.n	800317c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	335c      	adds	r3, #92	; 0x5c
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3360      	adds	r3, #96	; 0x60
 8003176:	2204      	movs	r2, #4
 8003178:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800317a:	e073      	b.n	8003264 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3360      	adds	r3, #96	; 0x60
 800318a:	2202      	movs	r2, #2
 800318c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4413      	add	r3, r2
 8003196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031a4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031ac:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	461a      	mov	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031c0:	e050      	b.n	8003264 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3361      	adds	r3, #97	; 0x61
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d122      	bne.n	800321c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3360      	adds	r3, #96	; 0x60
 80031e4:	2202      	movs	r2, #2
 80031e6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031fe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003206:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003214:	461a      	mov	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e023      	b.n	8003264 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3361      	adds	r3, #97	; 0x61
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b07      	cmp	r3, #7
 800322e:	d119      	bne.n	8003264 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	335c      	adds	r3, #92	; 0x5c
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	202c      	movs	r0, #44	; 0x2c
 8003248:	fb00 f303 	mul.w	r3, r0, r3
 800324c:	440b      	add	r3, r1
 800324e:	335c      	adds	r3, #92	; 0x5c
 8003250:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	212c      	movs	r1, #44	; 0x2c
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	3360      	adds	r3, #96	; 0x60
 8003260:	2204      	movs	r2, #4
 8003262:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003270:	461a      	mov	r2, r3
 8003272:	2302      	movs	r3, #2
 8003274:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	b2d9      	uxtb	r1, r3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	202c      	movs	r0, #44	; 0x2c
 8003280:	fb00 f303 	mul.w	r3, r0, r3
 8003284:	4413      	add	r3, r2
 8003286:	3360      	adds	r3, #96	; 0x60
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f004 fff9 	bl	8008284 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003292:	e061      	b.n	8003358 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d156      	bne.n	8003358 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	333f      	adds	r3, #63	; 0x3f
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d111      	bne.n	80032e2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 fd2f 	bl	8005d3e <USB_HC_Halt>
 80032e0:	e031      	b.n	8003346 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	333f      	adds	r3, #63	; 0x3f
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	333f      	adds	r3, #63	; 0x3f
 8003304:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003306:	2b02      	cmp	r3, #2
 8003308:	d11d      	bne.n	8003346 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	335c      	adds	r3, #92	; 0x5c
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d110      	bne.n	8003346 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	212c      	movs	r1, #44	; 0x2c
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	3361      	adds	r3, #97	; 0x61
 8003332:	2203      	movs	r2, #3
 8003334:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fcfc 	bl	8005d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	2310      	movs	r3, #16
 8003356:	6093      	str	r3, [r2, #8]
}
 8003358:	bf00      	nop
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d11a      	bne.n	80033c6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	461a      	mov	r2, r3
 800339e:	2304      	movs	r3, #4
 80033a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3361      	adds	r3, #97	; 0x61
 80033b0:	2206      	movs	r2, #6
 80033b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f002 fcbd 	bl	8005d3e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80033c4:	e331      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d12e      	bne.n	800343a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e8:	461a      	mov	r2, r3
 80033ea:	2320      	movs	r3, #32
 80033ec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	333d      	adds	r3, #61	; 0x3d
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	f040 8313 	bne.w	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	333d      	adds	r3, #61	; 0x3d
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	3360      	adds	r3, #96	; 0x60
 8003424:	2202      	movs	r2, #2
 8003426:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f002 fc83 	bl	8005d3e <USB_HC_Halt>
}
 8003438:	e2f7      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003450:	d112      	bne.n	8003478 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4413      	add	r3, r2
 800345a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345e:	461a      	mov	r2, r3
 8003460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003464:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f002 fc64 	bl	8005d3e <USB_HC_Halt>
}
 8003476:	e2d8      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d140      	bne.n	8003510 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	335c      	adds	r3, #92	; 0x5c
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d111      	bne.n	80034da <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	212c      	movs	r1, #44	; 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	333d      	adds	r3, #61	; 0x3d
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	461a      	mov	r2, r3
 80034d6:	2340      	movs	r3, #64	; 0x40
 80034d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e6:	461a      	mov	r2, r3
 80034e8:	2301      	movs	r3, #1
 80034ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	3361      	adds	r3, #97	; 0x61
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f002 fc18 	bl	8005d3e <USB_HC_Halt>
}
 800350e:	e28c      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d12c      	bne.n	8003580 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3361      	adds	r3, #97	; 0x61
 8003534:	2204      	movs	r2, #4
 8003536:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	333d      	adds	r3, #61	; 0x3d
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	335c      	adds	r3, #92	; 0x5c
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f002 fbe9 	bl	8005d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	461a      	mov	r2, r3
 800357a:	2340      	movs	r3, #64	; 0x40
 800357c:	6093      	str	r3, [r2, #8]
}
 800357e:	e254      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d11a      	bne.n	80035cc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	461a      	mov	r2, r3
 80035a4:	2308      	movs	r3, #8
 80035a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	212c      	movs	r1, #44	; 0x2c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	3361      	adds	r3, #97	; 0x61
 80035b6:	2205      	movs	r2, #5
 80035b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fbba 	bl	8005d3e <USB_HC_Halt>
}
 80035ca:	e22e      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d140      	bne.n	8003664 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	335c      	adds	r3, #92	; 0x5c
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3361      	adds	r3, #97	; 0x61
 8003602:	2203      	movs	r2, #3
 8003604:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	212c      	movs	r1, #44	; 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	333d      	adds	r3, #61	; 0x3d
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d112      	bne.n	8003640 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	333c      	adds	r3, #60	; 0x3c
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	212c      	movs	r1, #44	; 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	333d      	adds	r3, #61	; 0x3d
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f002 fb77 	bl	8005d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	461a      	mov	r2, r3
 800365e:	2310      	movs	r3, #16
 8003660:	6093      	str	r3, [r2, #8]
}
 8003662:	e1e2      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	d164      	bne.n	8003744 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d111      	bne.n	80036a6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	3361      	adds	r3, #97	; 0x61
 8003690:	2206      	movs	r2, #6
 8003692:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f002 fb4d 	bl	8005d3e <USB_HC_Halt>
 80036a4:	e044      	b.n	8003730 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	335c      	adds	r3, #92	; 0x5c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	202c      	movs	r0, #44	; 0x2c
 80036be:	fb00 f303 	mul.w	r3, r0, r3
 80036c2:	440b      	add	r3, r1
 80036c4:	335c      	adds	r3, #92	; 0x5c
 80036c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	335c      	adds	r3, #92	; 0x5c
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d920      	bls.n	800371e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	212c      	movs	r1, #44	; 0x2c
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	335c      	adds	r3, #92	; 0x5c
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	212c      	movs	r1, #44	; 0x2c
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	3360      	adds	r3, #96	; 0x60
 80036fc:	2204      	movs	r2, #4
 80036fe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	b2d9      	uxtb	r1, r3
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	202c      	movs	r0, #44	; 0x2c
 800370a:	fb00 f303 	mul.w	r3, r0, r3
 800370e:	4413      	add	r3, r2
 8003710:	3360      	adds	r3, #96	; 0x60
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f004 fdb4 	bl	8008284 <HAL_HCD_HC_NotifyURBChange_Callback>
 800371c:	e008      	b.n	8003730 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	3360      	adds	r3, #96	; 0x60
 800372c:	2202      	movs	r2, #2
 800372e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	4413      	add	r3, r2
 8003738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373c:	461a      	mov	r2, r3
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	6093      	str	r3, [r2, #8]
}
 8003742:	e172      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d11b      	bne.n	8003794 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	3361      	adds	r3, #97	; 0x61
 800376a:	2208      	movs	r2, #8
 800376c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f002 fae0 	bl	8005d3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	4413      	add	r3, r2
 8003786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378a:	461a      	mov	r2, r3
 800378c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003790:	6093      	str	r3, [r2, #8]
}
 8003792:	e14a      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	f040 813f 	bne.w	8003a2a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	212c      	movs	r1, #44	; 0x2c
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	3361      	adds	r3, #97	; 0x61
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d17d      	bne.n	80038bc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	3360      	adds	r3, #96	; 0x60
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	333f      	adds	r3, #63	; 0x3f
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d00a      	beq.n	80037fc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	333f      	adds	r3, #63	; 0x3f
 80037f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	f040 8100 	bne.w	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d113      	bne.n	800382c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3355      	adds	r3, #85	; 0x55
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	f083 0301 	eor.w	r3, r3, #1
 8003818:	b2d8      	uxtb	r0, r3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3355      	adds	r3, #85	; 0x55
 8003828:	4602      	mov	r2, r0
 800382a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 80e3 	bne.w	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	212c      	movs	r1, #44	; 0x2c
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	4413      	add	r3, r2
 8003842:	334c      	adds	r3, #76	; 0x4c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80d8 	beq.w	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	334c      	adds	r3, #76	; 0x4c
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	202c      	movs	r0, #44	; 0x2c
 8003862:	fb00 f202 	mul.w	r2, r0, r2
 8003866:	440a      	add	r2, r1
 8003868:	3240      	adds	r2, #64	; 0x40
 800386a:	8812      	ldrh	r2, [r2, #0]
 800386c:	4413      	add	r3, r2
 800386e:	3b01      	subs	r3, #1
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	202c      	movs	r0, #44	; 0x2c
 8003876:	fb00 f202 	mul.w	r2, r0, r2
 800387a:	440a      	add	r2, r1
 800387c:	3240      	adds	r2, #64	; 0x40
 800387e:	8812      	ldrh	r2, [r2, #0]
 8003880:	fbb3 f3f2 	udiv	r3, r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80b5 	beq.w	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3355      	adds	r3, #85	; 0x55
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2d8      	uxtb	r0, r3
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	3355      	adds	r3, #85	; 0x55
 80038b6:	4602      	mov	r2, r0
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e09f      	b.n	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	3361      	adds	r3, #97	; 0x61
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d109      	bne.n	80038e4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	3360      	adds	r3, #96	; 0x60
 80038de:	2202      	movs	r2, #2
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e08b      	b.n	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	212c      	movs	r1, #44	; 0x2c
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	3361      	adds	r3, #97	; 0x61
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d109      	bne.n	800390c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	212c      	movs	r1, #44	; 0x2c
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	3360      	adds	r3, #96	; 0x60
 8003906:	2202      	movs	r2, #2
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e077      	b.n	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	3361      	adds	r3, #97	; 0x61
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b05      	cmp	r3, #5
 800391e:	d109      	bne.n	8003934 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	3360      	adds	r3, #96	; 0x60
 800392e:	2205      	movs	r2, #5
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e063      	b.n	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3361      	adds	r3, #97	; 0x61
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d009      	beq.n	800395c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	3361      	adds	r3, #97	; 0x61
 8003956:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003958:	2b08      	cmp	r3, #8
 800395a:	d14f      	bne.n	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	335c      	adds	r3, #92	; 0x5c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	202c      	movs	r0, #44	; 0x2c
 8003974:	fb00 f303 	mul.w	r3, r0, r3
 8003978:	440b      	add	r3, r1
 800397a:	335c      	adds	r3, #92	; 0x5c
 800397c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	335c      	adds	r3, #92	; 0x5c
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d912      	bls.n	80039b8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	335c      	adds	r3, #92	; 0x5c
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	3360      	adds	r3, #96	; 0x60
 80039b2:	2204      	movs	r2, #4
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e021      	b.n	80039fc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	3360      	adds	r3, #96	; 0x60
 80039c6:	2202      	movs	r2, #2
 80039c8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039e0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039e8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	b2d9      	uxtb	r1, r3
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	202c      	movs	r0, #44	; 0x2c
 8003a18:	fb00 f303 	mul.w	r3, r0, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3360      	adds	r3, #96	; 0x60
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f004 fc2d 	bl	8008284 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a2a:	bf00      	nop
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b08a      	sub	sp, #40	; 0x28
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	0c5b      	lsrs	r3, r3, #17
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a66:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d004      	beq.n	8003a78 <HCD_RXQLVL_IRQHandler+0x46>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	f000 80a9 	beq.w	8003bc8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a76:	e0aa      	b.n	8003bce <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80a6 	beq.w	8003bcc <HCD_RXQLVL_IRQHandler+0x19a>
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3344      	adds	r3, #68	; 0x44
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 809b 	beq.w	8003bcc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3350      	adds	r3, #80	; 0x50
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	441a      	add	r2, r3
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	202c      	movs	r0, #44	; 0x2c
 8003ab0:	fb00 f303 	mul.w	r3, r0, r3
 8003ab4:	440b      	add	r3, r1
 8003ab6:	334c      	adds	r3, #76	; 0x4c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d87a      	bhi.n	8003bb4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	212c      	movs	r1, #44	; 0x2c
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	3344      	adds	r3, #68	; 0x44
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f001 fc88 	bl	80053ec <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	212c      	movs	r1, #44	; 0x2c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3344      	adds	r3, #68	; 0x44
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	441a      	add	r2, r3
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	202c      	movs	r0, #44	; 0x2c
 8003af6:	fb00 f303 	mul.w	r3, r0, r3
 8003afa:	440b      	add	r3, r1
 8003afc:	3344      	adds	r3, #68	; 0x44
 8003afe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3350      	adds	r3, #80	; 0x50
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	441a      	add	r2, r3
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	202c      	movs	r0, #44	; 0x2c
 8003b1a:	fb00 f303 	mul.w	r3, r0, r3
 8003b1e:	440b      	add	r3, r1
 8003b20:	3350      	adds	r3, #80	; 0x50
 8003b22:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	0cdb      	lsrs	r3, r3, #19
 8003b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b38:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	212c      	movs	r1, #44	; 0x2c
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	3340      	adds	r3, #64	; 0x40
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d13c      	bne.n	8003bcc <HCD_RXQLVL_IRQHandler+0x19a>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d039      	beq.n	8003bcc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b6e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b76:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b84:	461a      	mov	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	212c      	movs	r1, #44	; 0x2c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	3354      	adds	r3, #84	; 0x54
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	f083 0301 	eor.w	r3, r3, #1
 8003b9e:	b2d8      	uxtb	r0, r3
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	3354      	adds	r3, #84	; 0x54
 8003bae:	4602      	mov	r2, r0
 8003bb0:	701a      	strb	r2, [r3, #0]
      break;
 8003bb2:	e00b      	b.n	8003bcc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3360      	adds	r3, #96	; 0x60
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	701a      	strb	r2, [r3, #0]
      break;
 8003bc6:	e001      	b.n	8003bcc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003bcc:	bf00      	nop
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3728      	adds	r7, #40	; 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c02:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d10b      	bne.n	8003c26 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d102      	bne.n	8003c1e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f004 fb17 	bl	800824c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d132      	bne.n	8003c96 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f043 0308 	orr.w	r3, r3, #8
 8003c36:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d126      	bne.n	8003c90 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d113      	bne.n	8003c72 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c54:	d106      	bne.n	8003c64 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 fd33 	bl	80056c8 <USB_InitFSLSPClkSel>
 8003c62:	e011      	b.n	8003c88 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 fd2c 	bl	80056c8 <USB_InitFSLSPClkSel>
 8003c70:	e00a      	b.n	8003c88 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d106      	bne.n	8003c88 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c80:	461a      	mov	r2, r3
 8003c82:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c86:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f004 fb09 	bl	80082a0 <HAL_HCD_PortEnabled_Callback>
 8003c8e:	e002      	b.n	8003c96 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f004 fb13 	bl	80082bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d103      	bne.n	8003ca8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f043 0320 	orr.w	r3, r3, #32
 8003ca6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e12b      	b.n	8003f26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fd f82a 	bl	8000d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	; 0x24
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d20:	f000 fd80 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8003d24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4a81      	ldr	r2, [pc, #516]	; (8003f30 <HAL_I2C_Init+0x274>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d807      	bhi.n	8003d40 <HAL_I2C_Init+0x84>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a80      	ldr	r2, [pc, #512]	; (8003f34 <HAL_I2C_Init+0x278>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	bf94      	ite	ls
 8003d38:	2301      	movls	r3, #1
 8003d3a:	2300      	movhi	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e006      	b.n	8003d4e <HAL_I2C_Init+0x92>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a7d      	ldr	r2, [pc, #500]	; (8003f38 <HAL_I2C_Init+0x27c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	bf94      	ite	ls
 8003d48:	2301      	movls	r3, #1
 8003d4a:	2300      	movhi	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0e7      	b.n	8003f26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a78      	ldr	r2, [pc, #480]	; (8003f3c <HAL_I2C_Init+0x280>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	0c9b      	lsrs	r3, r3, #18
 8003d60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4a6a      	ldr	r2, [pc, #424]	; (8003f30 <HAL_I2C_Init+0x274>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d802      	bhi.n	8003d90 <HAL_I2C_Init+0xd4>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	e009      	b.n	8003da4 <HAL_I2C_Init+0xe8>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	4a69      	ldr	r2, [pc, #420]	; (8003f40 <HAL_I2C_Init+0x284>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	3301      	adds	r3, #1
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003db6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	495c      	ldr	r1, [pc, #368]	; (8003f30 <HAL_I2C_Init+0x274>)
 8003dc0:	428b      	cmp	r3, r1
 8003dc2:	d819      	bhi.n	8003df8 <HAL_I2C_Init+0x13c>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1e59      	subs	r1, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd2:	1c59      	adds	r1, r3, #1
 8003dd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dd8:	400b      	ands	r3, r1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_I2C_Init+0x138>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1e59      	subs	r1, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dec:	3301      	adds	r3, #1
 8003dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df2:	e051      	b.n	8003e98 <HAL_I2C_Init+0x1dc>
 8003df4:	2304      	movs	r3, #4
 8003df6:	e04f      	b.n	8003e98 <HAL_I2C_Init+0x1dc>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d111      	bne.n	8003e24 <HAL_I2C_Init+0x168>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1e58      	subs	r0, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6859      	ldr	r1, [r3, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	440b      	add	r3, r1
 8003e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e12:	3301      	adds	r3, #1
 8003e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e012      	b.n	8003e4a <HAL_I2C_Init+0x18e>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	0099      	lsls	r1, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Init+0x196>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e022      	b.n	8003e98 <HAL_I2C_Init+0x1dc>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10e      	bne.n	8003e78 <HAL_I2C_Init+0x1bc>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1e58      	subs	r0, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6859      	ldr	r1, [r3, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	440b      	add	r3, r1
 8003e68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e76:	e00f      	b.n	8003e98 <HAL_I2C_Init+0x1dc>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1e58      	subs	r0, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	0099      	lsls	r1, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	6809      	ldr	r1, [r1, #0]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ec6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6911      	ldr	r1, [r2, #16]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68d2      	ldr	r2, [r2, #12]
 8003ed2:	4311      	orrs	r1, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	000186a0 	.word	0x000186a0
 8003f34:	001e847f 	.word	0x001e847f
 8003f38:	003d08ff 	.word	0x003d08ff
 8003f3c:	431bde83 	.word	0x431bde83
 8003f40:	10624dd3 	.word	0x10624dd3

08003f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e267      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d075      	beq.n	800404e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d00c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6e:	4b85      	ldr	r3, [pc, #532]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d112      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7a:	4b82      	ldr	r3, [pc, #520]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f86:	d10b      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	4b7e      	ldr	r3, [pc, #504]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d05b      	beq.n	800404c <HAL_RCC_OscConfig+0x108>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d157      	bne.n	800404c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e242      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x74>
 8003faa:	4b76      	ldr	r3, [pc, #472]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a75      	ldr	r2, [pc, #468]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e01d      	b.n	8003ff4 <HAL_RCC_OscConfig+0xb0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x98>
 8003fc2:	4b70      	ldr	r3, [pc, #448]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6f      	ldr	r2, [pc, #444]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	4b6d      	ldr	r3, [pc, #436]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6c      	ldr	r2, [pc, #432]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e00b      	b.n	8003ff4 <HAL_RCC_OscConfig+0xb0>
 8003fdc:	4b69      	ldr	r3, [pc, #420]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a68      	ldr	r2, [pc, #416]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a65      	ldr	r2, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8003fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d013      	beq.n	8004024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fd f8bc 	bl	8001178 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004004:	f7fd f8b8 	bl	8001178 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e207      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0xc0>
 8004022:	e014      	b.n	800404e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fd f8a8 	bl	8001178 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402c:	f7fd f8a4 	bl	8001178 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e1f3      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403e:	4b51      	ldr	r3, [pc, #324]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0xe8>
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d063      	beq.n	8004122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405a:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004066:	4b47      	ldr	r3, [pc, #284]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406e:	2b08      	cmp	r3, #8
 8004070:	d11c      	bne.n	80040ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004072:	4b44      	ldr	r3, [pc, #272]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d116      	bne.n	80040ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407e:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <HAL_RCC_OscConfig+0x152>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d001      	beq.n	8004096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e1c7      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4937      	ldr	r1, [pc, #220]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040aa:	e03a      	b.n	8004122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b4:	4b34      	ldr	r3, [pc, #208]	; (8004188 <HAL_RCC_OscConfig+0x244>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fd f85d 	bl	8001178 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c2:	f7fd f859 	bl	8001178 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e1a8      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d4:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e0:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4925      	ldr	r1, [pc, #148]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	600b      	str	r3, [r1, #0]
 80040f4:	e015      	b.n	8004122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f6:	4b24      	ldr	r3, [pc, #144]	; (8004188 <HAL_RCC_OscConfig+0x244>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd f83c 	bl	8001178 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004104:	f7fd f838 	bl	8001178 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e187      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004116:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d036      	beq.n	800419c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <HAL_RCC_OscConfig+0x248>)
 8004138:	2201      	movs	r2, #1
 800413a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fd f81c 	bl	8001178 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004144:	f7fd f818 	bl	8001178 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e167      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_OscConfig+0x240>)
 8004158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x200>
 8004162:	e01b      	b.n	800419c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <HAL_RCC_OscConfig+0x248>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416a:	f7fd f805 	bl	8001178 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004170:	e00e      	b.n	8004190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004172:	f7fd f801 	bl	8001178 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d907      	bls.n	8004190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e150      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
 8004184:	40023800 	.word	0x40023800
 8004188:	42470000 	.word	0x42470000
 800418c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1ea      	bne.n	8004172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8097 	beq.w	80042d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ae:	4b81      	ldr	r3, [pc, #516]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10f      	bne.n	80041da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	4b7d      	ldr	r3, [pc, #500]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a7c      	ldr	r2, [pc, #496]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ca:	4b7a      	ldr	r3, [pc, #488]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	4b77      	ldr	r3, [pc, #476]	; (80043b8 <HAL_RCC_OscConfig+0x474>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d118      	bne.n	8004218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e6:	4b74      	ldr	r3, [pc, #464]	; (80043b8 <HAL_RCC_OscConfig+0x474>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a73      	ldr	r2, [pc, #460]	; (80043b8 <HAL_RCC_OscConfig+0x474>)
 80041ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f2:	f7fc ffc1 	bl	8001178 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fa:	f7fc ffbd 	bl	8001178 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e10c      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	4b6a      	ldr	r3, [pc, #424]	; (80043b8 <HAL_RCC_OscConfig+0x474>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x2ea>
 8004220:	4b64      	ldr	r3, [pc, #400]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a63      	ldr	r2, [pc, #396]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	e01c      	b.n	8004268 <HAL_RCC_OscConfig+0x324>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b05      	cmp	r3, #5
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0x30c>
 8004236:	4b5f      	ldr	r3, [pc, #380]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a5e      	ldr	r2, [pc, #376]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	6713      	str	r3, [r2, #112]	; 0x70
 8004242:	4b5c      	ldr	r3, [pc, #368]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a5b      	ldr	r2, [pc, #364]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	e00b      	b.n	8004268 <HAL_RCC_OscConfig+0x324>
 8004250:	4b58      	ldr	r3, [pc, #352]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a57      	ldr	r2, [pc, #348]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	4b55      	ldr	r3, [pc, #340]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a54      	ldr	r2, [pc, #336]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004262:	f023 0304 	bic.w	r3, r3, #4
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fc ff82 	bl	8001178 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	e00a      	b.n	800428e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fc ff7e 	bl	8001178 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0cb      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428e:	4b49      	ldr	r3, [pc, #292]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0ee      	beq.n	8004278 <HAL_RCC_OscConfig+0x334>
 800429a:	e014      	b.n	80042c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429c:	f7fc ff6c 	bl	8001178 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fc ff68 	bl	8001178 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0b5      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ee      	bne.n	80042a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d105      	bne.n	80042d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a1 	beq.w	8004424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042e2:	4b34      	ldr	r3, [pc, #208]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d05c      	beq.n	80043a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d141      	bne.n	800437a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f6:	4b31      	ldr	r3, [pc, #196]	; (80043bc <HAL_RCC_OscConfig+0x478>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fc ff3c 	bl	8001178 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004304:	f7fc ff38 	bl	8001178 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e087      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	3b01      	subs	r3, #1
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	491b      	ldr	r1, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x478>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004352:	f7fc ff11 	bl	8001178 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435a:	f7fc ff0d 	bl	8001178 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e05c      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x416>
 8004378:	e054      	b.n	8004424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <HAL_RCC_OscConfig+0x478>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fc fefa 	bl	8001178 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004388:	f7fc fef6 	bl	8001178 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e045      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_OscConfig+0x470>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x444>
 80043a6:	e03d      	b.n	8004424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d107      	bne.n	80043c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e038      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40007000 	.word	0x40007000
 80043bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043c0:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCC_OscConfig+0x4ec>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d028      	beq.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d8:	429a      	cmp	r2, r3
 80043da:	d121      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d11a      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f0:	4013      	ands	r3, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d111      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	3b01      	subs	r3, #1
 800440a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d107      	bne.n	8004420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800

08004434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0cc      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b68      	ldr	r3, [pc, #416]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d90c      	bls.n	8004470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b63      	ldr	r3, [pc, #396]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0b8      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004488:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a0:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	494d      	ldr	r1, [pc, #308]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d044      	beq.n	8004554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d119      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e07f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e06f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004502:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e067      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 0203 	bic.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4934      	ldr	r1, [pc, #208]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004524:	f7fc fe28 	bl	8001178 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	e00a      	b.n	8004542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452c:	f7fc fe24 	bl	8001178 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e04f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 020c 	and.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	429a      	cmp	r2, r3
 8004552:	d1eb      	bne.n	800452c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d20c      	bcs.n	800457c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e032      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4916      	ldr	r1, [pc, #88]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	490e      	ldr	r1, [pc, #56]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ba:	f000 f821 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	490a      	ldr	r1, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	5ccb      	ldrb	r3, [r1, r3]
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_ClockConfig+0x1c8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc fd88 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023c00 	.word	0x40023c00
 80045f0:	40023800 	.word	0x40023800
 80045f4:	08009074 	.word	0x08009074
 80045f8:	20000000 	.word	0x20000000
 80045fc:	20000004 	.word	0x20000004

08004600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b094      	sub	sp, #80	; 0x50
 8004606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	647b      	str	r3, [r7, #68]	; 0x44
 800460c:	2300      	movs	r3, #0
 800460e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004610:	2300      	movs	r3, #0
 8004612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004618:	4b79      	ldr	r3, [pc, #484]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b08      	cmp	r3, #8
 8004622:	d00d      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x40>
 8004624:	2b08      	cmp	r3, #8
 8004626:	f200 80e1 	bhi.w	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x34>
 800462e:	2b04      	cmp	r3, #4
 8004630:	d003      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x3a>
 8004632:	e0db      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004634:	4b73      	ldr	r3, [pc, #460]	; (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 8004636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004638:	e0db      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800463a:	4b73      	ldr	r3, [pc, #460]	; (8004808 <HAL_RCC_GetSysClockFreq+0x208>)
 800463c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800463e:	e0d8      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004640:	4b6f      	ldr	r3, [pc, #444]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464a:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d063      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004656:	4b6a      	ldr	r3, [pc, #424]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	2200      	movs	r2, #0
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
 800466a:	2300      	movs	r3, #0
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
 800466e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	f04f 0000 	mov.w	r0, #0
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	0159      	lsls	r1, r3, #5
 8004680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004684:	0150      	lsls	r0, r2, #5
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4621      	mov	r1, r4
 800468c:	1a51      	subs	r1, r2, r1
 800468e:	6139      	str	r1, [r7, #16]
 8004690:	4629      	mov	r1, r5
 8004692:	eb63 0301 	sbc.w	r3, r3, r1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a4:	4659      	mov	r1, fp
 80046a6:	018b      	lsls	r3, r1, #6
 80046a8:	4651      	mov	r1, sl
 80046aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ae:	4651      	mov	r1, sl
 80046b0:	018a      	lsls	r2, r1, #6
 80046b2:	4651      	mov	r1, sl
 80046b4:	ebb2 0801 	subs.w	r8, r2, r1
 80046b8:	4659      	mov	r1, fp
 80046ba:	eb63 0901 	sbc.w	r9, r3, r1
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046d2:	4690      	mov	r8, r2
 80046d4:	4699      	mov	r9, r3
 80046d6:	4623      	mov	r3, r4
 80046d8:	eb18 0303 	adds.w	r3, r8, r3
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	462b      	mov	r3, r5
 80046e0:	eb49 0303 	adc.w	r3, r9, r3
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046f2:	4629      	mov	r1, r5
 80046f4:	024b      	lsls	r3, r1, #9
 80046f6:	4621      	mov	r1, r4
 80046f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046fc:	4621      	mov	r1, r4
 80046fe:	024a      	lsls	r2, r1, #9
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004706:	2200      	movs	r2, #0
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
 800470a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800470c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004710:	f7fb fdb6 	bl	8000280 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4613      	mov	r3, r2
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471c:	e058      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471e:	4b38      	ldr	r3, [pc, #224]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	2200      	movs	r2, #0
 8004726:	4618      	mov	r0, r3
 8004728:	4611      	mov	r1, r2
 800472a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	2300      	movs	r3, #0
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
 8004734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	f04f 0000 	mov.w	r0, #0
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	0159      	lsls	r1, r3, #5
 8004746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474a:	0150      	lsls	r0, r2, #5
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4641      	mov	r1, r8
 8004752:	ebb2 0a01 	subs.w	sl, r2, r1
 8004756:	4649      	mov	r1, r9
 8004758:	eb63 0b01 	sbc.w	fp, r3, r1
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800476c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004770:	ebb2 040a 	subs.w	r4, r2, sl
 8004774:	eb63 050b 	sbc.w	r5, r3, fp
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	00eb      	lsls	r3, r5, #3
 8004782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004786:	00e2      	lsls	r2, r4, #3
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	4643      	mov	r3, r8
 800478e:	18e3      	adds	r3, r4, r3
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	464b      	mov	r3, r9
 8004794:	eb45 0303 	adc.w	r3, r5, r3
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a6:	4629      	mov	r1, r5
 80047a8:	028b      	lsls	r3, r1, #10
 80047aa:	4621      	mov	r1, r4
 80047ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b0:	4621      	mov	r1, r4
 80047b2:	028a      	lsls	r2, r1, #10
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ba:	2200      	movs	r2, #0
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	61fa      	str	r2, [r7, #28]
 80047c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c4:	f7fb fd5c 	bl	8000280 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4613      	mov	r3, r2
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	3301      	adds	r3, #1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ea:	e002      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3750      	adds	r7, #80	; 0x50
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	00f42400 	.word	0x00f42400
 8004808:	007a1200 	.word	0x007a1200

0800480c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004810:	4b03      	ldr	r3, [pc, #12]	; (8004820 <HAL_RCC_GetHCLKFreq+0x14>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000000 	.word	0x20000000

08004824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004828:	f7ff fff0 	bl	800480c <HAL_RCC_GetHCLKFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	4903      	ldr	r1, [pc, #12]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40023800 	.word	0x40023800
 8004848:	08009084 	.word	0x08009084

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004850:	f7ff ffdc 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0b5b      	lsrs	r3, r3, #13
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	08009084 	.word	0x08009084

08004874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e07b      	b.n	800497e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004896:	d009      	beq.n	80048ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	61da      	str	r2, [r3, #28]
 800489e:	e005      	b.n	80048ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc fa80 	bl	8000dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	ea42 0103 	orr.w	r1, r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	f003 0104 	and.w	r1, r3, #4
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0210 	and.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800496c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e03f      	b.n	8004a18 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fc fa55 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2224      	movs	r2, #36	; 0x24
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f928 	bl	8004c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08a      	sub	sp, #40	; 0x28
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d17c      	bne.n	8004b3a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_UART_Transmit+0x2c>
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e075      	b.n	8004b3c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Transmit+0x3e>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e06e      	b.n	8004b3c <HAL_UART_Transmit+0x11c>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2221      	movs	r2, #33	; 0x21
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a74:	f7fc fb80 	bl	8001178 <HAL_GetTick>
 8004a78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8e:	d108      	bne.n	8004aa2 <HAL_UART_Transmit+0x82>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d104      	bne.n	8004aa2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	e003      	b.n	8004aaa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ab2:	e02a      	b.n	8004b0a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2200      	movs	r2, #0
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f840 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e036      	b.n	8004b3c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	e007      	b.n	8004afc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3301      	adds	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1cf      	bne.n	8004ab4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f810 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e006      	b.n	8004b3c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b090      	sub	sp, #64	; 0x40
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b54:	e050      	b.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d04c      	beq.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b64:	f7fc fb08 	bl	8001178 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d241      	bcs.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b94:	637a      	str	r2, [r7, #52]	; 0x34
 8004b96:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3314      	adds	r3, #20
 8004bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bc8:	623a      	str	r2, [r7, #32]
 8004bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	69f9      	ldr	r1, [r7, #28]
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e5      	bne.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e00f      	b.n	8004c18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d09f      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3740      	adds	r7, #64	; 0x40
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c24:	b0c0      	sub	sp, #256	; 0x100
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	ea40 0301 	orr.w	r3, r0, r1
 8004c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c78:	f021 010c 	bic.w	r1, r1, #12
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c86:	430b      	orrs	r3, r1
 8004c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	6999      	ldr	r1, [r3, #24]
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	ea40 0301 	orr.w	r3, r0, r1
 8004ca6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b8f      	ldr	r3, [pc, #572]	; (8004eec <UART_SetConfig+0x2cc>)
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d005      	beq.n	8004cc0 <UART_SetConfig+0xa0>
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b8d      	ldr	r3, [pc, #564]	; (8004ef0 <UART_SetConfig+0x2d0>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d104      	bne.n	8004cca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cc0:	f7ff fdc4 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8004cc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cc8:	e003      	b.n	8004cd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cca:	f7ff fdab 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8004cce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cdc:	f040 810c 	bne.w	8004ef8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	1891      	adds	r1, r2, r2
 8004cf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cfa:	415b      	adcs	r3, r3
 8004cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d02:	4621      	mov	r1, r4
 8004d04:	eb12 0801 	adds.w	r8, r2, r1
 8004d08:	4629      	mov	r1, r5
 8004d0a:	eb43 0901 	adc.w	r9, r3, r1
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d22:	4690      	mov	r8, r2
 8004d24:	4699      	mov	r9, r3
 8004d26:	4623      	mov	r3, r4
 8004d28:	eb18 0303 	adds.w	r3, r8, r3
 8004d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d30:	462b      	mov	r3, r5
 8004d32:	eb49 0303 	adc.w	r3, r9, r3
 8004d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d4e:	460b      	mov	r3, r1
 8004d50:	18db      	adds	r3, r3, r3
 8004d52:	653b      	str	r3, [r7, #80]	; 0x50
 8004d54:	4613      	mov	r3, r2
 8004d56:	eb42 0303 	adc.w	r3, r2, r3
 8004d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d64:	f7fb fa8c 	bl	8000280 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	011c      	lsls	r4, r3, #4
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	1891      	adds	r1, r2, r2
 8004d8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d90:	415b      	adcs	r3, r3
 8004d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d98:	4641      	mov	r1, r8
 8004d9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d9e:	4649      	mov	r1, r9
 8004da0:	eb43 0b01 	adc.w	fp, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004db0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db8:	4692      	mov	sl, r2
 8004dba:	469b      	mov	fp, r3
 8004dbc:	4643      	mov	r3, r8
 8004dbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ddc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004de0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004de4:	460b      	mov	r3, r1
 8004de6:	18db      	adds	r3, r3, r3
 8004de8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dea:	4613      	mov	r3, r2
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
 8004df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004df6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dfa:	f7fb fa41 	bl	8000280 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004e06:	fba3 2301 	umull	r2, r3, r3, r1
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2264      	movs	r2, #100	; 0x64
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	1acb      	subs	r3, r1, r3
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e1a:	4b36      	ldr	r3, [pc, #216]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e28:	441c      	add	r4, r3
 8004e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	1891      	adds	r1, r2, r2
 8004e42:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e44:	415b      	adcs	r3, r3
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	1851      	adds	r1, r2, r1
 8004e50:	6339      	str	r1, [r7, #48]	; 0x30
 8004e52:	4649      	mov	r1, r9
 8004e54:	414b      	adcs	r3, r1
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e64:	4659      	mov	r1, fp
 8004e66:	00cb      	lsls	r3, r1, #3
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6e:	4651      	mov	r1, sl
 8004e70:	00ca      	lsls	r2, r1, #3
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e80:	464b      	mov	r3, r9
 8004e82:	460a      	mov	r2, r1
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	18db      	adds	r3, r3, r3
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004eb6:	f7fb f9e3 	bl	8000280 <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	; 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3332      	adds	r3, #50	; 0x32
 8004ed2:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	f003 0207 	and.w	r2, r3, #7
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4422      	add	r2, r4
 8004ee6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ee8:	e105      	b.n	80050f6 <UART_SetConfig+0x4d6>
 8004eea:	bf00      	nop
 8004eec:	40011000 	.word	0x40011000
 8004ef0:	40011400 	.word	0x40011400
 8004ef4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	1891      	adds	r1, r2, r2
 8004f10:	6239      	str	r1, [r7, #32]
 8004f12:	415b      	adcs	r3, r3
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
 8004f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	1854      	adds	r4, r2, r1
 8004f1e:	4649      	mov	r1, r9
 8004f20:	eb43 0501 	adc.w	r5, r3, r1
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	00eb      	lsls	r3, r5, #3
 8004f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f32:	00e2      	lsls	r2, r4, #3
 8004f34:	4614      	mov	r4, r2
 8004f36:	461d      	mov	r5, r3
 8004f38:	4643      	mov	r3, r8
 8004f3a:	18e3      	adds	r3, r4, r3
 8004f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f40:	464b      	mov	r3, r9
 8004f42:	eb45 0303 	adc.w	r3, r5, r3
 8004f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f66:	4629      	mov	r1, r5
 8004f68:	008b      	lsls	r3, r1, #2
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f70:	4621      	mov	r1, r4
 8004f72:	008a      	lsls	r2, r1, #2
 8004f74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f78:	f7fb f982 	bl	8000280 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4b60      	ldr	r3, [pc, #384]	; (8005104 <UART_SetConfig+0x4e4>)
 8004f82:	fba3 2302 	umull	r2, r3, r3, r2
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	011c      	lsls	r4, r3, #4
 8004f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	1891      	adds	r1, r2, r2
 8004fa2:	61b9      	str	r1, [r7, #24]
 8004fa4:	415b      	adcs	r3, r3
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fac:	4641      	mov	r1, r8
 8004fae:	1851      	adds	r1, r2, r1
 8004fb0:	6139      	str	r1, [r7, #16]
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	414b      	adcs	r3, r1
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	00cb      	lsls	r3, r1, #3
 8004fc8:	4651      	mov	r1, sl
 8004fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fce:	4651      	mov	r1, sl
 8004fd0:	00ca      	lsls	r2, r1, #3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4642      	mov	r2, r8
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	eb42 0303 	adc.w	r3, r2, r3
 8004fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ff6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005004:	4649      	mov	r1, r9
 8005006:	008b      	lsls	r3, r1, #2
 8005008:	4641      	mov	r1, r8
 800500a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500e:	4641      	mov	r1, r8
 8005010:	008a      	lsls	r2, r1, #2
 8005012:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005016:	f7fb f933 	bl	8000280 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4b39      	ldr	r3, [pc, #228]	; (8005104 <UART_SetConfig+0x4e4>)
 8005020:	fba3 1302 	umull	r1, r3, r3, r2
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	2164      	movs	r1, #100	; 0x64
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	3332      	adds	r3, #50	; 0x32
 8005032:	4a34      	ldr	r2, [pc, #208]	; (8005104 <UART_SetConfig+0x4e4>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800503e:	441c      	add	r4, r3
 8005040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005044:	2200      	movs	r2, #0
 8005046:	673b      	str	r3, [r7, #112]	; 0x70
 8005048:	677a      	str	r2, [r7, #116]	; 0x74
 800504a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800504e:	4642      	mov	r2, r8
 8005050:	464b      	mov	r3, r9
 8005052:	1891      	adds	r1, r2, r2
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	415b      	adcs	r3, r3
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800505e:	4641      	mov	r1, r8
 8005060:	1851      	adds	r1, r2, r1
 8005062:	6039      	str	r1, [r7, #0]
 8005064:	4649      	mov	r1, r9
 8005066:	414b      	adcs	r3, r1
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005076:	4659      	mov	r1, fp
 8005078:	00cb      	lsls	r3, r1, #3
 800507a:	4651      	mov	r1, sl
 800507c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005080:	4651      	mov	r1, sl
 8005082:	00ca      	lsls	r2, r1, #3
 8005084:	4610      	mov	r0, r2
 8005086:	4619      	mov	r1, r3
 8005088:	4603      	mov	r3, r0
 800508a:	4642      	mov	r2, r8
 800508c:	189b      	adds	r3, r3, r2
 800508e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005090:	464b      	mov	r3, r9
 8005092:	460a      	mov	r2, r1
 8005094:	eb42 0303 	adc.w	r3, r2, r3
 8005098:	66fb      	str	r3, [r7, #108]	; 0x6c
 800509a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	663b      	str	r3, [r7, #96]	; 0x60
 80050a4:	667a      	str	r2, [r7, #100]	; 0x64
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050b2:	4649      	mov	r1, r9
 80050b4:	008b      	lsls	r3, r1, #2
 80050b6:	4641      	mov	r1, r8
 80050b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050bc:	4641      	mov	r1, r8
 80050be:	008a      	lsls	r2, r1, #2
 80050c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050c4:	f7fb f8dc 	bl	8000280 <__aeabi_uldivmod>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <UART_SetConfig+0x4e4>)
 80050ce:	fba3 1302 	umull	r1, r3, r3, r2
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	2164      	movs	r1, #100	; 0x64
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	3332      	adds	r3, #50	; 0x32
 80050e0:	4a08      	ldr	r2, [pc, #32]	; (8005104 <UART_SetConfig+0x4e4>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	f003 020f 	and.w	r2, r3, #15
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4422      	add	r2, r4
 80050f4:	609a      	str	r2, [r3, #8]
}
 80050f6:	bf00      	nop
 80050f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050fc:	46bd      	mov	sp, r7
 80050fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005102:	bf00      	nop
 8005104:	51eb851f 	.word	0x51eb851f

08005108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005108:	b084      	sub	sp, #16
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	f107 001c 	add.w	r0, r7, #28
 8005116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	2b01      	cmp	r3, #1
 800511e:	d122      	bne.n	8005166 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514a:	2b01      	cmp	r3, #1
 800514c:	d105      	bne.n	800515a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9c0 	bl	80054e0 <USB_CoreReset>
 8005160:	4603      	mov	r3, r0
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	e01a      	b.n	800519c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f9b4 	bl	80054e0 <USB_CoreReset>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800517c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
 800518e:	e005      	b.n	800519c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d10b      	bne.n	80051ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f043 0206 	orr.w	r2, r3, #6
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051c6:	b004      	add	sp, #16
 80051c8:	4770      	bx	lr

080051ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f043 0201 	orr.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 0201 	bic.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d115      	bne.n	800525c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800523c:	2001      	movs	r0, #1
 800523e:	f7fb ffa7 	bl	8001190 <HAL_Delay>
      ms++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f93a 	bl	80054c2 <USB_GetMode>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d01e      	beq.n	8005292 <USB_SetCurrentMode+0x84>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b31      	cmp	r3, #49	; 0x31
 8005258:	d9f0      	bls.n	800523c <USB_SetCurrentMode+0x2e>
 800525a:	e01a      	b.n	8005292 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d115      	bne.n	800528e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800526e:	2001      	movs	r0, #1
 8005270:	f7fb ff8e 	bl	8001190 <HAL_Delay>
      ms++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f921 	bl	80054c2 <USB_GetMode>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <USB_SetCurrentMode+0x84>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b31      	cmp	r3, #49	; 0x31
 800528a:	d9f0      	bls.n	800526e <USB_SetCurrentMode+0x60>
 800528c:	e001      	b.n	8005292 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e005      	b.n	800529e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b32      	cmp	r3, #50	; 0x32
 8005296:	d101      	bne.n	800529c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a13      	ldr	r2, [pc, #76]	; (800530c <USB_FlushTxFifo+0x64>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e01b      	b.n	8005300 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	daf2      	bge.n	80052b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	019b      	lsls	r3, r3, #6
 80052d8:	f043 0220 	orr.w	r2, r3, #32
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a08      	ldr	r2, [pc, #32]	; (800530c <USB_FlushTxFifo+0x64>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e006      	b.n	8005300 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d0f0      	beq.n	80052e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	00030d40 	.word	0x00030d40

08005310 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3301      	adds	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <USB_FlushRxFifo+0x5c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e018      	b.n	8005360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	daf2      	bge.n	800531c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2210      	movs	r2, #16
 800533e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a08      	ldr	r2, [pc, #32]	; (800536c <USB_FlushRxFifo+0x5c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e006      	b.n	8005360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2b10      	cmp	r3, #16
 800535c:	d0f0      	beq.n	8005340 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	00030d40 	.word	0x00030d40

08005370 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005370:	b480      	push	{r7}
 8005372:	b089      	sub	sp, #36	; 0x24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4611      	mov	r1, r2
 800537c:	461a      	mov	r2, r3
 800537e:	460b      	mov	r3, r1
 8005380:	71fb      	strb	r3, [r7, #7]
 8005382:	4613      	mov	r3, r2
 8005384:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800538e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	d123      	bne.n	80053de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005396:	88bb      	ldrh	r3, [r7, #4]
 8005398:	3303      	adds	r3, #3
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e018      	b.n	80053d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	031a      	lsls	r2, r3, #12
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b0:	461a      	mov	r2, r3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	3301      	adds	r3, #1
 80053bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	3301      	adds	r3, #1
 80053c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	3301      	adds	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	3301      	adds	r3, #1
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d3e2      	bcc.n	80053a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3724      	adds	r7, #36	; 0x24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b08b      	sub	sp, #44	; 0x2c
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	089b      	lsrs	r3, r3, #2
 8005406:	b29b      	uxth	r3, r3
 8005408:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005412:	2300      	movs	r3, #0
 8005414:	623b      	str	r3, [r7, #32]
 8005416:	e014      	b.n	8005442 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	601a      	str	r2, [r3, #0]
    pDest++;
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	3301      	adds	r3, #1
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	3301      	adds	r3, #1
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	3301      	adds	r3, #1
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	3301      	adds	r3, #1
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	3301      	adds	r3, #1
 8005440:	623b      	str	r3, [r7, #32]
 8005442:	6a3a      	ldr	r2, [r7, #32]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	429a      	cmp	r2, r3
 8005448:	d3e6      	bcc.n	8005418 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800544a:	8bfb      	ldrh	r3, [r7, #30]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01e      	beq.n	800548e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545a:	461a      	mov	r2, r3
 800545c:	f107 0310 	add.w	r3, r7, #16
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
 8005470:	b2da      	uxtb	r2, r3
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	701a      	strb	r2, [r3, #0]
      i++;
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	3301      	adds	r3, #1
 800547a:	623b      	str	r3, [r7, #32]
      pDest++;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	3301      	adds	r3, #1
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005482:	8bfb      	ldrh	r3, [r7, #30]
 8005484:	3b01      	subs	r3, #1
 8005486:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005488:	8bfb      	ldrh	r3, [r7, #30]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1ea      	bne.n	8005464 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005490:	4618      	mov	r0, r3
 8005492:	372c      	adds	r7, #44	; 0x2c
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4013      	ands	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054b4:	68fb      	ldr	r3, [r7, #12]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0301 	and.w	r3, r3, #1
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a13      	ldr	r2, [pc, #76]	; (8005544 <USB_CoreReset+0x64>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d901      	bls.n	80054fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e01b      	b.n	8005536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	daf2      	bge.n	80054ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f043 0201 	orr.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <USB_CoreReset+0x64>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d901      	bls.n	8005528 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e006      	b.n	8005536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d0f0      	beq.n	8005516 <USB_CoreReset+0x36>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	00030d40 	.word	0x00030d40

08005548 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005548:	b084      	sub	sp, #16
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005568:	461a      	mov	r2, r3
 800556a:	2300      	movs	r3, #0
 800556c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559a:	2b00      	cmp	r3, #0
 800559c:	d018      	beq.n	80055d0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10a      	bne.n	80055ba <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055b2:	f043 0304 	orr.w	r3, r3, #4
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	e014      	b.n	80055e4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055c8:	f023 0304 	bic.w	r3, r3, #4
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e009      	b.n	80055e4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055de:	f023 0304 	bic.w	r3, r3, #4
 80055e2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055e4:	2110      	movs	r1, #16
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fe5e 	bl	80052a8 <USB_FlushTxFifo>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff fe8a 	bl	8005310 <USB_FlushRxFifo>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	e015      	b.n	8005638 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	461a      	mov	r2, r3
 800561a:	f04f 33ff 	mov.w	r3, #4294967295
 800561e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562c:	461a      	mov	r2, r3
 800562e:	2300      	movs	r3, #0
 8005630:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3301      	adds	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	429a      	cmp	r2, r3
 800563e:	d3e5      	bcc.n	800560c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00b      	beq.n	8005672 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005660:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a13      	ldr	r2, [pc, #76]	; (80056b4 <USB_HostInit+0x16c>)
 8005666:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <USB_HostInit+0x170>)
 800566c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005670:	e009      	b.n	8005686 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2280      	movs	r2, #128	; 0x80
 8005676:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a10      	ldr	r2, [pc, #64]	; (80056bc <USB_HostInit+0x174>)
 800567c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a0f      	ldr	r2, [pc, #60]	; (80056c0 <USB_HostInit+0x178>)
 8005682:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f043 0210 	orr.w	r2, r3, #16
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <USB_HostInit+0x17c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b0:	b004      	add	sp, #16
 80056b2:	4770      	bx	lr
 80056b4:	01000200 	.word	0x01000200
 80056b8:	00e00300 	.word	0x00e00300
 80056bc:	00600080 	.word	0x00600080
 80056c0:	004000e0 	.word	0x004000e0
 80056c4:	a3200008 	.word	0xa3200008

080056c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d107      	bne.n	800571a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005710:	461a      	mov	r2, r3
 8005712:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005716:	6053      	str	r3, [r2, #4]
 8005718:	e009      	b.n	800572e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d106      	bne.n	800572e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005726:	461a      	mov	r2, r3
 8005728:	f241 7370 	movw	r3, #6000	; 0x1770
 800572c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800575c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800576c:	2064      	movs	r0, #100	; 0x64
 800576e:	f7fb fd0f 	bl	8001190 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800577a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800577e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005780:	200a      	movs	r0, #10
 8005782:	f7fb fd05 	bl	8001190 <HAL_Delay>

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <USB_DriveVbus+0x44>
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d106      	bne.n	80057d4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057d2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	d109      	bne.n	80057f4 <USB_DriveVbus+0x64>
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057f2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	0c5b      	lsrs	r3, r3, #17
 8005820:	f003 0303 	and.w	r3, r3, #3
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	b29b      	uxth	r3, r3
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	4608      	mov	r0, r1
 800585e:	4611      	mov	r1, r2
 8005860:	461a      	mov	r2, r3
 8005862:	4603      	mov	r3, r0
 8005864:	70fb      	strb	r3, [r7, #3]
 8005866:	460b      	mov	r3, r1
 8005868:	70bb      	strb	r3, [r7, #2]
 800586a:	4613      	mov	r3, r2
 800586c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4413      	add	r3, r2
 800587e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005882:	461a      	mov	r2, r3
 8005884:	f04f 33ff 	mov.w	r3, #4294967295
 8005888:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800588a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800588e:	2b03      	cmp	r3, #3
 8005890:	d87e      	bhi.n	8005990 <USB_HC_Init+0x13c>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <USB_HC_Init+0x44>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058a9 	.word	0x080058a9
 800589c:	08005953 	.word	0x08005953
 80058a0:	080058a9 	.word	0x080058a9
 80058a4:	08005915 	.word	0x08005915
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	461a      	mov	r2, r3
 80058b6:	f240 439d 	movw	r3, #1181	; 0x49d
 80058ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80058bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	da10      	bge.n	80058e6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80058e4:	e057      	b.n	8005996 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d051      	beq.n	8005996 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	78fa      	ldrb	r2, [r7, #3]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	440a      	add	r2, r1
 8005908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800590c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005910:	60d3      	str	r3, [r2, #12]
      break;
 8005912:	e040      	b.n	8005996 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4413      	add	r3, r2
 800591c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005920:	461a      	mov	r2, r3
 8005922:	f240 639d 	movw	r3, #1693	; 0x69d
 8005926:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005928:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800592c:	2b00      	cmp	r3, #0
 800592e:	da34      	bge.n	800599a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4413      	add	r3, r2
 8005938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	440a      	add	r2, r1
 8005946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800594a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005950:	e023      	b.n	800599a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	461a      	mov	r2, r3
 8005960:	f240 2325 	movw	r3, #549	; 0x225
 8005964:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005966:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800596a:	2b00      	cmp	r3, #0
 800596c:	da17      	bge.n	800599e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4413      	add	r3, r2
 8005976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	440a      	add	r2, r1
 8005984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005988:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800598c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800598e:	e006      	b.n	800599e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	77fb      	strb	r3, [r7, #31]
      break;
 8005994:	e004      	b.n	80059a0 <USB_HC_Init+0x14c>
      break;
 8005996:	bf00      	nop
 8005998:	e002      	b.n	80059a0 <USB_HC_Init+0x14c>
      break;
 800599a:	bf00      	nop
 800599c:	e000      	b.n	80059a0 <USB_HC_Init+0x14c>
      break;
 800599e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ba:	f043 0302 	orr.w	r3, r3, #2
 80059be:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	2101      	movs	r1, #1
 80059d0:	fa01 f303 	lsl.w	r3, r1, r3
 80059d4:	6939      	ldr	r1, [r7, #16]
 80059d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059da:	4313      	orrs	r3, r2
 80059dc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80059ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	da03      	bge.n	80059fa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80059f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	e001      	b.n	80059fe <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff feff 	bl	8005802 <USB_GetHostSpeed>
 8005a04:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005a06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d106      	bne.n	8005a1c <USB_HC_Init+0x1c8>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d003      	beq.n	8005a1c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e001      	b.n	8005a20 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a20:	787b      	ldrb	r3, [r7, #1]
 8005a22:	059b      	lsls	r3, r3, #22
 8005a24:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a28:	78bb      	ldrb	r3, [r7, #2]
 8005a2a:	02db      	lsls	r3, r3, #11
 8005a2c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a30:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a36:	049b      	lsls	r3, r3, #18
 8005a38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a3c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a44:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	0159      	lsls	r1, r3, #5
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	440b      	add	r3, r1
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a56:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a5c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005a5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d003      	beq.n	8005a6e <USB_HC_Init+0x21a>
 8005a66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d10f      	bne.n	8005a8e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a8c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3720      	adds	r7, #32
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08c      	sub	sp, #48	; 0x30
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	785b      	ldrb	r3, [r3, #1]
 8005aae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ab4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d02d      	beq.n	8005b1e <USB_HC_StartXfer+0x86>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	791b      	ldrb	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d129      	bne.n	8005b1e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d117      	bne.n	8005b00 <USB_HC_StartXfer+0x68>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	79db      	ldrb	r3, [r3, #7]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <USB_HC_StartXfer+0x48>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	79db      	ldrb	r3, [r3, #7]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d10f      	bne.n	8005b00 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <USB_HC_StartXfer+0x86>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	795b      	ldrb	r3, [r3, #5]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d107      	bne.n	8005b1e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	4619      	mov	r1, r3
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fa0f 	bl	8005f38 <USB_DoPing>
      return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e0f8      	b.n	8005d10 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d018      	beq.n	8005b58 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	8912      	ldrh	r2, [r2, #8]
 8005b2e:	4413      	add	r3, r2
 8005b30:	3b01      	subs	r3, #1
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	8912      	ldrh	r2, [r2, #8]
 8005b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b3a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005b3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b3e:	8b7b      	ldrh	r3, [r7, #26]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d90b      	bls.n	8005b5c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005b44:	8b7b      	ldrh	r3, [r7, #26]
 8005b46:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	8912      	ldrh	r2, [r2, #8]
 8005b4e:	fb03 f202 	mul.w	r2, r3, r2
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	611a      	str	r2, [r3, #16]
 8005b56:	e001      	b.n	8005b5c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	78db      	ldrb	r3, [r3, #3]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	8912      	ldrh	r2, [r2, #8]
 8005b6a:	fb03 f202 	mul.w	r2, r3, r2
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	611a      	str	r2, [r3, #16]
 8005b72:	e003      	b.n	8005b7c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b86:	04d9      	lsls	r1, r3, #19
 8005b88:	4b63      	ldr	r3, [pc, #396]	; (8005d18 <USB_HC_StartXfer+0x280>)
 8005b8a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b8c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	7a9b      	ldrb	r3, [r3, #10]
 8005b92:	075b      	lsls	r3, r3, #29
 8005b94:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b98:	69f9      	ldr	r1, [r7, #28]
 8005b9a:	0148      	lsls	r0, r1, #5
 8005b9c:	6a39      	ldr	r1, [r7, #32]
 8005b9e:	4401      	add	r1, r0
 8005ba0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ba4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ba6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	68d9      	ldr	r1, [r3, #12]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bf0c      	ite	eq
 8005bd2:	2301      	moveq	r3, #1
 8005bd4:	2300      	movne	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bf8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	7e7b      	ldrb	r3, [r7, #25]
 8005c0a:	075b      	lsls	r3, r3, #29
 8005c0c:	69f9      	ldr	r1, [r7, #28]
 8005c0e:	0148      	lsls	r0, r1, #5
 8005c10:	6a39      	ldr	r1, [r7, #32]
 8005c12:	4401      	add	r1, r0
 8005c14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c32:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	78db      	ldrb	r3, [r3, #3]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	e003      	b.n	8005c4e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c4c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c54:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	461a      	mov	r2, r3
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e04e      	b.n	8005d10 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	78db      	ldrb	r3, [r3, #3]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d149      	bne.n	8005d0e <USB_HC_StartXfer+0x276>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d045      	beq.n	8005d0e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	79db      	ldrb	r3, [r3, #7]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d830      	bhi.n	8005cec <USB_HC_StartXfer+0x254>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <USB_HC_StartXfer+0x1f8>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005ca1 	.word	0x08005ca1
 8005c94:	08005cc5 	.word	0x08005cc5
 8005c98:	08005ca1 	.word	0x08005ca1
 8005c9c:	08005cc5 	.word	0x08005cc5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	3303      	adds	r3, #3
 8005ca6:	089b      	lsrs	r3, r3, #2
 8005ca8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005caa:	8afa      	ldrh	r2, [r7, #22]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d91c      	bls.n	8005cf0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005cc2:	e015      	b.n	8005cf0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	3303      	adds	r3, #3
 8005cca:	089b      	lsrs	r3, r3, #2
 8005ccc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005cce:	8afa      	ldrh	r2, [r7, #22]
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d90a      	bls.n	8005cf4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005cea:	e003      	b.n	8005cf4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005cec:	bf00      	nop
 8005cee:	e002      	b.n	8005cf6 <USB_HC_StartXfer+0x25e>
        break;
 8005cf0:	bf00      	nop
 8005cf2:	e000      	b.n	8005cf6 <USB_HC_StartXfer+0x25e>
        break;
 8005cf4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	68d9      	ldr	r1, [r3, #12]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	785a      	ldrb	r2, [r3, #1]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2000      	movs	r0, #0
 8005d06:	9000      	str	r0, [sp, #0]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff fb31 	bl	8005370 <USB_WritePacket>
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3728      	adds	r7, #40	; 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	1ff80000 	.word	0x1ff80000

08005d1c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	b29b      	uxth	r3, r3
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b089      	sub	sp, #36	; 0x24
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	0c9b      	lsrs	r3, r3, #18
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	0fdb      	lsrs	r3, r3, #31
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d104      	bne.n	8005d98 <USB_HC_Halt+0x5a>
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e0c8      	b.n	8005f2a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <USB_HC_Halt+0x66>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d163      	bne.n	8005e6c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dc2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f040 80ab 	bne.w	8005f28 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d133      	bne.n	8005e46 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dfc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e1c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e2a:	d81d      	bhi.n	8005e68 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e42:	d0ec      	beq.n	8005e1e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e44:	e070      	b.n	8005f28 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e64:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e66:	e05f      	b.n	8005f28 <USB_HC_Halt+0x1ea>
            break;
 8005e68:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e6a:	e05d      	b.n	8005f28 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e8a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d133      	bne.n	8005f04 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eda:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ee8:	d81d      	bhi.n	8005f26 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f00:	d0ec      	beq.n	8005edc <USB_HC_Halt+0x19e>
 8005f02:	e011      	b.n	8005f28 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e000      	b.n	8005f28 <USB_HC_Halt+0x1ea>
          break;
 8005f26:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3724      	adds	r7, #36	; 0x24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
	...

08005f38 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	04da      	lsls	r2, r3, #19
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <USB_DoPing+0x74>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f68:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f80:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f88:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f96:	461a      	mov	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	1ff80000 	.word	0x1ff80000

08005fb0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff f911 	bl	80051ec <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fca:	2110      	movs	r1, #16
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff f96b 	bl	80052a8 <USB_FlushTxFifo>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff f997 	bl	8005310 <USB_FlushRxFifo>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005fec:	2300      	movs	r3, #0
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	e01f      	b.n	8006032 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006008:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006010:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006018:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006026:	461a      	mov	r2, r3
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	3301      	adds	r3, #1
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	2b0f      	cmp	r3, #15
 8006036:	d9dc      	bls.n	8005ff2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006038:	2300      	movs	r3, #0
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	e034      	b.n	80060a8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006054:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800605c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006064:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006072:	461a      	mov	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3301      	adds	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006084:	d80c      	bhi.n	80060a0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	4413      	add	r3, r2
 800608e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800609c:	d0ec      	beq.n	8006078 <USB_StopHost+0xc8>
 800609e:	e000      	b.n	80060a2 <USB_StopHost+0xf2>
        break;
 80060a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	3301      	adds	r3, #1
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	d9c7      	bls.n	800603e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b4:	461a      	mov	r2, r3
 80060b6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f04f 32ff 	mov.w	r2, #4294967295
 80060c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff f880 	bl	80051ca <USB_EnableGlobalInt>

  return ret;
 80060ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b089      	sub	sp, #36	; 0x24
 80060d8:	af04      	add	r7, sp, #16
 80060da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80060dc:	2301      	movs	r3, #1
 80060de:	2202      	movs	r2, #2
 80060e0:	2102      	movs	r1, #2
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fc66 	bl	80069b4 <USBH_FindInterface>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2bff      	cmp	r3, #255	; 0xff
 80060f0:	d002      	beq.n	80060f8 <USBH_CDC_InterfaceInit+0x24>
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d901      	bls.n	80060fc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060f8:	2302      	movs	r3, #2
 80060fa:	e13d      	b.n	8006378 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fc3b 	bl	800697c <USBH_SelectInterface>
 8006106:	4603      	mov	r3, r0
 8006108:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800610a:	7bbb      	ldrb	r3, [r7, #14]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006110:	2302      	movs	r3, #2
 8006112:	e131      	b.n	8006378 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800611a:	2050      	movs	r0, #80	; 0x50
 800611c:	f002 fafa 	bl	8008714 <malloc>
 8006120:	4603      	mov	r3, r0
 8006122:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006134:	2302      	movs	r3, #2
 8006136:	e11f      	b.n	8006378 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006138:	2250      	movs	r2, #80	; 0x50
 800613a:	2100      	movs	r1, #0
 800613c:	68b8      	ldr	r0, [r7, #8]
 800613e:	f002 faf9 	bl	8008734 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	211a      	movs	r1, #26
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	b25b      	sxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	da15      	bge.n	8006186 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	211a      	movs	r1, #26
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800616a:	781a      	ldrb	r2, [r3, #0]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	211a      	movs	r1, #26
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	4413      	add	r3, r2
 800617c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006180:	881a      	ldrh	r2, [r3, #0]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 ff2c 	bl	8007fea <USBH_AllocPipe>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	7819      	ldrb	r1, [r3, #0]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	7858      	ldrb	r0, [r3, #1]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	8952      	ldrh	r2, [r2, #10]
 80061b2:	9202      	str	r2, [sp, #8]
 80061b4:	2203      	movs	r2, #3
 80061b6:	9201      	str	r2, [sp, #4]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4623      	mov	r3, r4
 80061bc:	4602      	mov	r2, r0
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fee4 	bl	8007f8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2200      	movs	r2, #0
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f002 f9f3 	bl	80085b8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80061d2:	2300      	movs	r3, #0
 80061d4:	2200      	movs	r2, #0
 80061d6:	210a      	movs	r1, #10
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fbeb 	bl	80069b4 <USBH_FindInterface>
 80061de:	4603      	mov	r3, r0
 80061e0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	2bff      	cmp	r3, #255	; 0xff
 80061e6:	d002      	beq.n	80061ee <USBH_CDC_InterfaceInit+0x11a>
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d901      	bls.n	80061f2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061ee:	2302      	movs	r3, #2
 80061f0:	e0c2      	b.n	8006378 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	211a      	movs	r1, #26
 80061f8:	fb01 f303 	mul.w	r3, r1, r3
 80061fc:	4413      	add	r3, r2
 80061fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b25b      	sxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	da16      	bge.n	8006238 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	211a      	movs	r1, #26
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	4413      	add	r3, r2
 8006216:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800621a:	781a      	ldrb	r2, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	211a      	movs	r1, #26
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	4413      	add	r3, r2
 800622c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006230:	881a      	ldrh	r2, [r3, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	835a      	strh	r2, [r3, #26]
 8006236:	e015      	b.n	8006264 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	211a      	movs	r1, #26
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	211a      	movs	r1, #26
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	4413      	add	r3, r2
 800625a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800625e:	881a      	ldrh	r2, [r3, #0]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	211a      	movs	r1, #26
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	4413      	add	r3, r2
 8006270:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b25b      	sxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	da16      	bge.n	80062aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	211a      	movs	r1, #26
 8006282:	fb01 f303 	mul.w	r3, r1, r3
 8006286:	4413      	add	r3, r2
 8006288:	f203 3356 	addw	r3, r3, #854	; 0x356
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	211a      	movs	r1, #26
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80062a2:	881a      	ldrh	r2, [r3, #0]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	835a      	strh	r2, [r3, #26]
 80062a8:	e015      	b.n	80062d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	211a      	movs	r1, #26
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	4413      	add	r3, r2
 80062b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	211a      	movs	r1, #26
 80062c6:	fb01 f303 	mul.w	r3, r1, r3
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80062d0:	881a      	ldrh	r2, [r3, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	7b9b      	ldrb	r3, [r3, #14]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 fe84 	bl	8007fea <USBH_AllocPipe>
 80062e2:	4603      	mov	r3, r0
 80062e4:	461a      	mov	r2, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	7bdb      	ldrb	r3, [r3, #15]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fe7a 	bl	8007fea <USBH_AllocPipe>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	7b59      	ldrb	r1, [r3, #13]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	7b98      	ldrb	r0, [r3, #14]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	8b12      	ldrh	r2, [r2, #24]
 8006316:	9202      	str	r2, [sp, #8]
 8006318:	2202      	movs	r2, #2
 800631a:	9201      	str	r2, [sp, #4]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	4623      	mov	r3, r4
 8006320:	4602      	mov	r2, r0
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fe32 	bl	8007f8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	7b19      	ldrb	r1, [r3, #12]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	7bd8      	ldrb	r0, [r3, #15]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	8b52      	ldrh	r2, [r2, #26]
 8006340:	9202      	str	r2, [sp, #8]
 8006342:	2202      	movs	r2, #2
 8006344:	9201      	str	r2, [sp, #4]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4623      	mov	r3, r4
 800634a:	4602      	mov	r2, r0
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 fe1d 	bl	8007f8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	7b5b      	ldrb	r3, [r3, #13]
 800635e:	2200      	movs	r2, #0
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f002 f928 	bl	80085b8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	7b1b      	ldrb	r3, [r3, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f002 f921 	bl	80085b8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	bd90      	pop	{r4, r7, pc}

08006380 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fe12 	bl	8007fca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f001 fe3d 	bl	800802c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	7b1b      	ldrb	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00e      	beq.n	80063de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	7b1b      	ldrb	r3, [r3, #12]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fdff 	bl	8007fca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	7b1b      	ldrb	r3, [r3, #12]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fe2a 	bl	800802c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	7b5b      	ldrb	r3, [r3, #13]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00e      	beq.n	8006404 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	7b5b      	ldrb	r3, [r3, #13]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fdec 	bl	8007fca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	7b5b      	ldrb	r3, [r3, #13]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 fe17 	bl	800802c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00b      	beq.n	8006428 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	4618      	mov	r0, r3
 800641a:	f002 f983 	bl	8008724 <free>
    phost->pActiveClass->pData = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006424:	2200      	movs	r2, #0
 8006426:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3340      	adds	r3, #64	; 0x40
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f8b1 	bl	80065b2 <GetLineCoding>
 8006450:	4603      	mov	r3, r0
 8006452:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d105      	bne.n	8006466 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006460:	2102      	movs	r1, #2
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006466:	7afb      	ldrb	r3, [r7, #11]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006478:	2301      	movs	r3, #1
 800647a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006490:	2b04      	cmp	r3, #4
 8006492:	d877      	bhi.n	8006584 <USBH_CDC_Process+0x114>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <USBH_CDC_Process+0x2c>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064b1 	.word	0x080064b1
 80064a0:	080064b7 	.word	0x080064b7
 80064a4:	080064e7 	.word	0x080064e7
 80064a8:	0800655b 	.word	0x0800655b
 80064ac:	08006569 	.word	0x08006569
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
      break;
 80064b4:	e06d      	b.n	8006592 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f897 	bl	80065f0 <SetLineCoding>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d104      	bne.n	80064d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064d4:	e058      	b.n	8006588 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d055      	beq.n	8006588 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2204      	movs	r2, #4
 80064e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064e4:	e050      	b.n	8006588 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	3340      	adds	r3, #64	; 0x40
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f860 	bl	80065b2 <GetLineCoding>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d126      	bne.n	800654a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650e:	791b      	ldrb	r3, [r3, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d13b      	bne.n	800658c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006520:	429a      	cmp	r2, r3
 8006522:	d133      	bne.n	800658c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006530:	429a      	cmp	r2, r3
 8006532:	d12b      	bne.n	800658c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800653e:	429a      	cmp	r2, r3
 8006540:	d124      	bne.n	800658c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f958 	bl	80067f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006548:	e020      	b.n	800658c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d01d      	beq.n	800658c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2204      	movs	r2, #4
 8006554:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006558:	e018      	b.n	800658c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f867 	bl	800662e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f8da 	bl	800671a <CDC_ProcessReception>
      break;
 8006566:	e014      	b.n	8006592 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006568:	2100      	movs	r1, #0
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 ffef 	bl	800754e <USBH_ClrFeature>
 8006570:	4603      	mov	r3, r0
 8006572:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006582:	e005      	b.n	8006590 <USBH_CDC_Process+0x120>

    default:
      break;
 8006584:	bf00      	nop
 8006586:	e004      	b.n	8006592 <USBH_CDC_Process+0x122>
      break;
 8006588:	bf00      	nop
 800658a:	e002      	b.n	8006592 <USBH_CDC_Process+0x122>
      break;
 800658c:	bf00      	nop
 800658e:	e000      	b.n	8006592 <USBH_CDC_Process+0x122>
      break;
 8006590:	bf00      	nop

  }

  return status;
 8006592:	7bfb      	ldrb	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	22a1      	movs	r2, #161	; 0xa1
 80065c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2221      	movs	r2, #33	; 0x21
 80065c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2207      	movs	r2, #7
 80065d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2207      	movs	r2, #7
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 fa81 	bl	8007ae8 <USBH_CtlReq>
 80065e6:	4603      	mov	r3, r0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2221      	movs	r2, #33	; 0x21
 80065fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2207      	movs	r2, #7
 8006616:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2207      	movs	r2, #7
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fa62 	bl	8007ae8 <USBH_CtlReq>
 8006624:	4603      	mov	r3, r0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af02      	add	r7, sp, #8
 8006634:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006640:	2300      	movs	r3, #0
 8006642:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800664a:	2b01      	cmp	r3, #1
 800664c:	d002      	beq.n	8006654 <CDC_ProcessTransmission+0x26>
 800664e:	2b02      	cmp	r3, #2
 8006650:	d023      	beq.n	800669a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006652:	e05e      	b.n	8006712 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	8b12      	ldrh	r2, [r2, #24]
 800665c:	4293      	cmp	r3, r2
 800665e:	d90b      	bls.n	8006678 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	69d9      	ldr	r1, [r3, #28]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8b1a      	ldrh	r2, [r3, #24]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	7b5b      	ldrb	r3, [r3, #13]
 800666c:	2001      	movs	r0, #1
 800666e:	9000      	str	r0, [sp, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 fc48 	bl	8007f06 <USBH_BulkSendData>
 8006676:	e00b      	b.n	8006690 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	7b5b      	ldrb	r3, [r3, #13]
 8006686:	2001      	movs	r0, #1
 8006688:	9000      	str	r0, [sp, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fc3b 	bl	8007f06 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006698:	e03b      	b.n	8006712 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	7b5b      	ldrb	r3, [r3, #13]
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 ff5f 	bl	8008564 <USBH_LL_GetURBState>
 80066a6:	4603      	mov	r3, r0
 80066a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80066aa:	7afb      	ldrb	r3, [r7, #11]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d128      	bne.n	8006702 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	8b12      	ldrh	r2, [r2, #24]
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d90e      	bls.n	80066da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	8b12      	ldrh	r2, [r2, #24]
 80066c4:	1a9a      	subs	r2, r3, r2
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	8b12      	ldrh	r2, [r2, #24]
 80066d2:	441a      	add	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	61da      	str	r2, [r3, #28]
 80066d8:	e002      	b.n	80066e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80066f0:	e00e      	b.n	8006710 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f868 	bl	80067d0 <USBH_CDC_TransmitCallback>
      break;
 8006700:	e006      	b.n	8006710 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006702:	7afb      	ldrb	r3, [r7, #11]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d103      	bne.n	8006710 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006710:	bf00      	nop
  }
}
 8006712:	bf00      	nop
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b086      	sub	sp, #24
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800672c:	2300      	movs	r3, #0
 800672e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006736:	2b03      	cmp	r3, #3
 8006738:	d002      	beq.n	8006740 <CDC_ProcessReception+0x26>
 800673a:	2b04      	cmp	r3, #4
 800673c:	d00e      	beq.n	800675c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800673e:	e043      	b.n	80067c8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	6a19      	ldr	r1, [r3, #32]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	8b5a      	ldrh	r2, [r3, #26]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	7b1b      	ldrb	r3, [r3, #12]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 fbff 	bl	8007f50 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2204      	movs	r2, #4
 8006756:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800675a:	e035      	b.n	80067c8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	7b1b      	ldrb	r3, [r3, #12]
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fefe 	bl	8008564 <USBH_LL_GetURBState>
 8006768:	4603      	mov	r3, r0
 800676a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800676c:	7cfb      	ldrb	r3, [r7, #19]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d129      	bne.n	80067c6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	7b1b      	ldrb	r3, [r3, #12]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fe61 	bl	8008440 <USBH_LL_GetLastXferSize>
 800677e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	429a      	cmp	r2, r3
 8006788:	d016      	beq.n	80067b8 <CDC_ProcessReception+0x9e>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	8b5b      	ldrh	r3, [r3, #26]
 800678e:	461a      	mov	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4293      	cmp	r3, r2
 8006794:	d910      	bls.n	80067b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	6a1a      	ldr	r2, [r3, #32]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	441a      	add	r2, r3
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2203      	movs	r2, #3
 80067b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80067b6:	e006      	b.n	80067c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f80f 	bl	80067e4 <USBH_CDC_ReceiveCallback>
      break;
 80067c6:	bf00      	nop
  }
}
 80067c8:	bf00      	nop
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006820:	2302      	movs	r3, #2
 8006822:	e029      	b.n	8006878 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	79fa      	ldrb	r2, [r7, #7]
 8006828:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f81f 	bl	8006880 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f001 fd31 	bl	80082d8 <USBH_LL_Init>

  return USBH_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e009      	b.n	80068a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	33e0      	adds	r3, #224	; 0xe0
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	2200      	movs	r2, #0
 800689e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3301      	adds	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b0f      	cmp	r3, #15
 80068aa:	d9f2      	bls.n	8006892 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e009      	b.n	80068c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068bc:	2200      	movs	r2, #0
 80068be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3301      	adds	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068cc:	d3f1      	bcc.n	80068b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2240      	movs	r2, #64	; 0x40
 80068f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d016      	beq.n	800696a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10e      	bne.n	8006964 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800694c:	1c59      	adds	r1, r3, #1
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	33de      	adds	r3, #222	; 0xde
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
 8006962:	e004      	b.n	800696e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006964:	2302      	movs	r3, #2
 8006966:	73fb      	strb	r3, [r7, #15]
 8006968:	e001      	b.n	800696e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800696a:	2302      	movs	r3, #2
 800696c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006992:	78fa      	ldrb	r2, [r7, #3]
 8006994:	429a      	cmp	r2, r3
 8006996:	d204      	bcs.n	80069a2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	78fa      	ldrb	r2, [r7, #3]
 800699c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80069a0:	e001      	b.n	80069a6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80069a2:	2302      	movs	r3, #2
 80069a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	4608      	mov	r0, r1
 80069be:	4611      	mov	r1, r2
 80069c0:	461a      	mov	r2, r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	70fb      	strb	r3, [r7, #3]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70bb      	strb	r3, [r7, #2]
 80069ca:	4613      	mov	r3, r2
 80069cc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80069dc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069de:	e025      	b.n	8006a2c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	221a      	movs	r2, #26
 80069e4:	fb02 f303 	mul.w	r3, r2, r3
 80069e8:	3308      	adds	r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	3302      	adds	r3, #2
 80069f0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	795b      	ldrb	r3, [r3, #5]
 80069f6:	78fa      	ldrb	r2, [r7, #3]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d002      	beq.n	8006a02 <USBH_FindInterface+0x4e>
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	2bff      	cmp	r3, #255	; 0xff
 8006a00:	d111      	bne.n	8006a26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a06:	78ba      	ldrb	r2, [r7, #2]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d002      	beq.n	8006a12 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a0c:	78bb      	ldrb	r3, [r7, #2]
 8006a0e:	2bff      	cmp	r3, #255	; 0xff
 8006a10:	d109      	bne.n	8006a26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a16:	787a      	ldrb	r2, [r7, #1]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d002      	beq.n	8006a22 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a1c:	787b      	ldrb	r3, [r7, #1]
 8006a1e:	2bff      	cmp	r3, #255	; 0xff
 8006a20:	d101      	bne.n	8006a26 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	e006      	b.n	8006a34 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d9d6      	bls.n	80069e0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a32:	23ff      	movs	r3, #255	; 0xff
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fc81 	bl	8008350 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006a4e:	2101      	movs	r1, #1
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fd9a 	bl	800858a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af04      	add	r7, sp, #16
 8006a66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d102      	bne.n	8006a82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2203      	movs	r2, #3
 8006a80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b0b      	cmp	r3, #11
 8006a8a:	f200 81be 	bhi.w	8006e0a <USBH_Process+0x3aa>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <USBH_Process+0x34>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006ac5 	.word	0x08006ac5
 8006a98:	08006af7 	.word	0x08006af7
 8006a9c:	08006b5f 	.word	0x08006b5f
 8006aa0:	08006da5 	.word	0x08006da5
 8006aa4:	08006e0b 	.word	0x08006e0b
 8006aa8:	08006c03 	.word	0x08006c03
 8006aac:	08006d4b 	.word	0x08006d4b
 8006ab0:	08006c39 	.word	0x08006c39
 8006ab4:	08006c59 	.word	0x08006c59
 8006ab8:	08006c79 	.word	0x08006c79
 8006abc:	08006cbd 	.word	0x08006cbd
 8006ac0:	08006d8d 	.word	0x08006d8d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 819e 	beq.w	8006e0e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ad8:	20c8      	movs	r0, #200	; 0xc8
 8006ada:	f001 fd9d 	bl	8008618 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 fc93 	bl	800840a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006af4:	e18b      	b.n	8006e0e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d107      	bne.n	8006b10 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b0e:	e18d      	b.n	8006e2c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b1a:	d914      	bls.n	8006b46 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b22:	3301      	adds	r3, #1
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d903      	bls.n	8006b3e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	220d      	movs	r2, #13
 8006b3a:	701a      	strb	r2, [r3, #0]
      break;
 8006b3c:	e176      	b.n	8006e2c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
      break;
 8006b44:	e172      	b.n	8006e2c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b4c:	f103 020a 	add.w	r2, r3, #10
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006b56:	200a      	movs	r0, #10
 8006b58:	f001 fd5e 	bl	8008618 <USBH_Delay>
      break;
 8006b5c:	e166      	b.n	8006e2c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b6e:	2104      	movs	r1, #4
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b74:	2064      	movs	r0, #100	; 0x64
 8006b76:	f001 fd4f 	bl	8008618 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 fc1e 	bl	80083bc <USBH_LL_GetSpeed>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2205      	movs	r2, #5
 8006b8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b90:	2100      	movs	r1, #0
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 fa29 	bl	8007fea <USBH_AllocPipe>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006ba0:	2180      	movs	r1, #128	; 0x80
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f001 fa21 	bl	8007fea <USBH_AllocPipe>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7919      	ldrb	r1, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bc4:	b292      	uxth	r2, r2
 8006bc6:	9202      	str	r2, [sp, #8]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	9201      	str	r2, [sp, #4]
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2280      	movs	r2, #128	; 0x80
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 f9da 	bl	8007f8c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	7959      	ldrb	r1, [r3, #5]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bec:	b292      	uxth	r2, r2
 8006bee:	9202      	str	r2, [sp, #8]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	9201      	str	r2, [sp, #4]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 f9c6 	bl	8007f8c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c00:	e114      	b.n	8006e2c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f918 	bl	8006e38 <USBH_HandleEnum>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 80fe 	bne.w	8006e12 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d103      	bne.n	8006c30 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c2e:	e0f0      	b.n	8006e12 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2207      	movs	r2, #7
 8006c34:	701a      	strb	r2, [r3, #0]
      break;
 8006c36:	e0ec      	b.n	8006e12 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80e9 	beq.w	8006e16 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2208      	movs	r2, #8
 8006c54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006c56:	e0de      	b.n	8006e16 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fc2c 	bl	80074c0 <USBH_SetCfg>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f040 80d5 	bne.w	8006e1a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2209      	movs	r2, #9
 8006c74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c76:	e0d0      	b.n	8006e1a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006c86:	2101      	movs	r1, #1
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fc3c 	bl	8007506 <USBH_SetFeature>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ca0:	e0bd      	b.n	8006e1e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	f040 80b9 	bne.w	8006e1e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	220a      	movs	r2, #10
 8006cb0:	701a      	strb	r2, [r3, #0]
      break;
 8006cb2:	e0b4      	b.n	8006e1e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	220a      	movs	r2, #10
 8006cb8:	701a      	strb	r2, [r3, #0]
      break;
 8006cba:	e0b0      	b.n	8006e1e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80ad 	beq.w	8006e22 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
 8006cd4:	e016      	b.n	8006d04 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006cd6:	7bfa      	ldrb	r2, [r7, #15]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	32de      	adds	r2, #222	; 0xde
 8006cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce0:	791a      	ldrb	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d108      	bne.n	8006cfe <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006cec:	7bfa      	ldrb	r2, [r7, #15]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	32de      	adds	r2, #222	; 0xde
 8006cf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006cfc:	e005      	b.n	8006d0a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	3301      	adds	r3, #1
 8006d02:	73fb      	strb	r3, [r7, #15]
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0e5      	beq.n	8006cd6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d016      	beq.n	8006d42 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4798      	blx	r3
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2206      	movs	r2, #6
 8006d2a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d32:	2103      	movs	r1, #3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d38:	e073      	b.n	8006e22 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	220d      	movs	r2, #13
 8006d3e:	701a      	strb	r2, [r3, #0]
      break;
 8006d40:	e06f      	b.n	8006e22 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	220d      	movs	r2, #13
 8006d46:	701a      	strb	r2, [r3, #0]
      break;
 8006d48:	e06b      	b.n	8006e22 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d017      	beq.n	8006d84 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	4798      	blx	r3
 8006d60:	4603      	mov	r3, r0
 8006d62:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	220b      	movs	r2, #11
 8006d70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d72:	e058      	b.n	8006e26 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d154      	bne.n	8006e26 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	220d      	movs	r2, #13
 8006d80:	701a      	strb	r2, [r3, #0]
      break;
 8006d82:	e050      	b.n	8006e26 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	220d      	movs	r2, #13
 8006d88:	701a      	strb	r2, [r3, #0]
      break;
 8006d8a:	e04c      	b.n	8006e26 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d049      	beq.n	8006e2a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
      }
      break;
 8006da2:	e042      	b.n	8006e2a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff fd67 	bl	8006880 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d009      	beq.n	8006dd0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de0:	2105      	movs	r1, #5
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d107      	bne.n	8006e02 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7ff fe20 	bl	8006a40 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e00:	e014      	b.n	8006e2c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 faa4 	bl	8008350 <USBH_LL_Start>
      break;
 8006e08:	e010      	b.n	8006e2c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006e0a:	bf00      	nop
 8006e0c:	e00e      	b.n	8006e2c <USBH_Process+0x3cc>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e00c      	b.n	8006e2c <USBH_Process+0x3cc>
      break;
 8006e12:	bf00      	nop
 8006e14:	e00a      	b.n	8006e2c <USBH_Process+0x3cc>
    break;
 8006e16:	bf00      	nop
 8006e18:	e008      	b.n	8006e2c <USBH_Process+0x3cc>
      break;
 8006e1a:	bf00      	nop
 8006e1c:	e006      	b.n	8006e2c <USBH_Process+0x3cc>
      break;
 8006e1e:	bf00      	nop
 8006e20:	e004      	b.n	8006e2c <USBH_Process+0x3cc>
      break;
 8006e22:	bf00      	nop
 8006e24:	e002      	b.n	8006e2c <USBH_Process+0x3cc>
      break;
 8006e26:	bf00      	nop
 8006e28:	e000      	b.n	8006e2c <USBH_Process+0x3cc>
      break;
 8006e2a:	bf00      	nop
  }
  return USBH_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop

08006e38 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af04      	add	r7, sp, #16
 8006e3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b07      	cmp	r3, #7
 8006e4e:	f200 81c1 	bhi.w	80071d4 <USBH_HandleEnum+0x39c>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <USBH_HandleEnum+0x20>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e79 	.word	0x08006e79
 8006e5c:	08006f37 	.word	0x08006f37
 8006e60:	08006fa1 	.word	0x08006fa1
 8006e64:	0800702f 	.word	0x0800702f
 8006e68:	08007099 	.word	0x08007099
 8006e6c:	08007109 	.word	0x08007109
 8006e70:	0800714f 	.word	0x0800714f
 8006e74:	08007195 	.word	0x08007195
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006e78:	2108      	movs	r1, #8
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa50 	bl	8007320 <USBH_Get_DevDesc>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d130      	bne.n	8006eec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	7919      	ldrb	r1, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006eae:	b292      	uxth	r2, r2
 8006eb0:	9202      	str	r2, [sp, #8]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	9201      	str	r2, [sp, #4]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2280      	movs	r2, #128	; 0x80
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 f865 	bl	8007f8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	7959      	ldrb	r1, [r3, #5]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ed6:	b292      	uxth	r2, r2
 8006ed8:	9202      	str	r2, [sp, #8]
 8006eda:	2200      	movs	r2, #0
 8006edc:	9201      	str	r2, [sp, #4]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 f851 	bl	8007f8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006eea:	e175      	b.n	80071d8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	f040 8172 	bne.w	80071d8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d903      	bls.n	8006f16 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	220d      	movs	r2, #13
 8006f12:	701a      	strb	r2, [r3, #0]
      break;
 8006f14:	e160      	b.n	80071d8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	795b      	ldrb	r3, [r3, #5]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 f885 	bl	800802c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	791b      	ldrb	r3, [r3, #4]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f87f 	bl	800802c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
      break;
 8006f34:	e150      	b.n	80071d8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006f36:	2112      	movs	r1, #18
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f9f1 	bl	8007320 <USBH_Get_DevDesc>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d103      	bne.n	8006f50 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f4e:	e145      	b.n	80071dc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	f040 8142 	bne.w	80071dc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f5e:	3301      	adds	r3, #1
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d903      	bls.n	8006f7a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	220d      	movs	r2, #13
 8006f76:	701a      	strb	r2, [r3, #0]
      break;
 8006f78:	e130      	b.n	80071dc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	795b      	ldrb	r3, [r3, #5]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 f853 	bl	800802c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	791b      	ldrb	r3, [r3, #4]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 f84d 	bl	800802c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
      break;
 8006f9e:	e11d      	b.n	80071dc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa68 	bl	8007478 <USBH_SetAddress>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d132      	bne.n	8007018 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006fb2:	2002      	movs	r0, #2
 8006fb4:	f001 fb30 	bl	8008618 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7919      	ldrb	r1, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006fda:	b292      	uxth	r2, r2
 8006fdc:	9202      	str	r2, [sp, #8]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	9201      	str	r2, [sp, #4]
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2280      	movs	r2, #128	; 0x80
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 ffcf 	bl	8007f8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	7959      	ldrb	r1, [r3, #5]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007002:	b292      	uxth	r2, r2
 8007004:	9202      	str	r2, [sp, #8]
 8007006:	2200      	movs	r2, #0
 8007008:	9201      	str	r2, [sp, #4]
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	4603      	mov	r3, r0
 800700e:	2200      	movs	r2, #0
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 ffbb 	bl	8007f8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007016:	e0e3      	b.n	80071e0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	2b03      	cmp	r3, #3
 800701c:	f040 80e0 	bne.w	80071e0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	220d      	movs	r2, #13
 8007024:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	705a      	strb	r2, [r3, #1]
      break;
 800702c:	e0d8      	b.n	80071e0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800702e:	2109      	movs	r1, #9
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f99d 	bl	8007370 <USBH_Get_CfgDesc>
 8007036:	4603      	mov	r3, r0
 8007038:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d103      	bne.n	8007048 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2204      	movs	r2, #4
 8007044:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007046:	e0cd      	b.n	80071e4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b03      	cmp	r3, #3
 800704c:	f040 80ca 	bne.w	80071e4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007056:	3301      	adds	r3, #1
 8007058:	b2da      	uxtb	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007066:	2b03      	cmp	r3, #3
 8007068:	d903      	bls.n	8007072 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	220d      	movs	r2, #13
 800706e:	701a      	strb	r2, [r3, #0]
      break;
 8007070:	e0b8      	b.n	80071e4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	795b      	ldrb	r3, [r3, #5]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 ffd7 	bl	800802c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	791b      	ldrb	r3, [r3, #4]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 ffd1 	bl	800802c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	701a      	strb	r2, [r3, #0]
      break;
 8007096:	e0a5      	b.n	80071e4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f965 	bl	8007370 <USBH_Get_CfgDesc>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d103      	bne.n	80070b8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2205      	movs	r2, #5
 80070b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070b6:	e097      	b.n	80071e8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	f040 8094 	bne.w	80071e8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070c6:	3301      	adds	r3, #1
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d903      	bls.n	80070e2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	220d      	movs	r2, #13
 80070de:	701a      	strb	r2, [r3, #0]
      break;
 80070e0:	e082      	b.n	80071e8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	795b      	ldrb	r3, [r3, #5]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 ff9f 	bl	800802c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	791b      	ldrb	r3, [r3, #4]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 ff99 	bl	800802c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
      break;
 8007106:	e06f      	b.n	80071e8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800710e:	2b00      	cmp	r3, #0
 8007110:	d019      	beq.n	8007146 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800711e:	23ff      	movs	r3, #255	; 0xff
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f949 	bl	80073b8 <USBH_Get_StringDesc>
 8007126:	4603      	mov	r3, r0
 8007128:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d103      	bne.n	8007138 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2206      	movs	r2, #6
 8007134:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007136:	e059      	b.n	80071ec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b03      	cmp	r3, #3
 800713c:	d156      	bne.n	80071ec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2206      	movs	r2, #6
 8007142:	705a      	strb	r2, [r3, #1]
      break;
 8007144:	e052      	b.n	80071ec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2206      	movs	r2, #6
 800714a:	705a      	strb	r2, [r3, #1]
      break;
 800714c:	e04e      	b.n	80071ec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007154:	2b00      	cmp	r3, #0
 8007156:	d019      	beq.n	800718c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007164:	23ff      	movs	r3, #255	; 0xff
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f926 	bl	80073b8 <USBH_Get_StringDesc>
 800716c:	4603      	mov	r3, r0
 800716e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2207      	movs	r2, #7
 800717a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800717c:	e038      	b.n	80071f0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d135      	bne.n	80071f0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2207      	movs	r2, #7
 8007188:	705a      	strb	r2, [r3, #1]
      break;
 800718a:	e031      	b.n	80071f0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2207      	movs	r2, #7
 8007190:	705a      	strb	r2, [r3, #1]
      break;
 8007192:	e02d      	b.n	80071f0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800719a:	2b00      	cmp	r3, #0
 800719c:	d017      	beq.n	80071ce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80071aa:	23ff      	movs	r3, #255	; 0xff
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f903 	bl	80073b8 <USBH_Get_StringDesc>
 80071b2:	4603      	mov	r3, r0
 80071b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80071c0:	e018      	b.n	80071f4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d115      	bne.n	80071f4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
      break;
 80071cc:	e012      	b.n	80071f4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
      break;
 80071d2:	e00f      	b.n	80071f4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80071d4:	bf00      	nop
 80071d6:	e00e      	b.n	80071f6 <USBH_HandleEnum+0x3be>
      break;
 80071d8:	bf00      	nop
 80071da:	e00c      	b.n	80071f6 <USBH_HandleEnum+0x3be>
      break;
 80071dc:	bf00      	nop
 80071de:	e00a      	b.n	80071f6 <USBH_HandleEnum+0x3be>
      break;
 80071e0:	bf00      	nop
 80071e2:	e008      	b.n	80071f6 <USBH_HandleEnum+0x3be>
      break;
 80071e4:	bf00      	nop
 80071e6:	e006      	b.n	80071f6 <USBH_HandleEnum+0x3be>
      break;
 80071e8:	bf00      	nop
 80071ea:	e004      	b.n	80071f6 <USBH_HandleEnum+0x3be>
      break;
 80071ec:	bf00      	nop
 80071ee:	e002      	b.n	80071f6 <USBH_HandleEnum+0x3be>
      break;
 80071f0:	bf00      	nop
 80071f2:	e000      	b.n	80071f6 <USBH_HandleEnum+0x3be>
      break;
 80071f4:	bf00      	nop
  }
  return Status;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f804 	bl	8007242 <USBH_HandleSof>
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b0b      	cmp	r3, #11
 8007252:	d10a      	bne.n	800726a <USBH_HandleSof+0x28>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
  }
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007282:	bf00      	nop
}
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800729e:	bf00      	nop
}
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 f844 	bl	8008386 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	791b      	ldrb	r3, [r3, #4]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fe91 	bl	800802c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	795b      	ldrb	r3, [r3, #5]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fe8b 	bl	800802c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af02      	add	r7, sp, #8
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	b29b      	uxth	r3, r3
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	4613      	mov	r3, r2
 800733a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800733e:	2100      	movs	r1, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f864 	bl	800740e <USBH_GetDescriptor>
 8007346:	4603      	mov	r3, r0
 8007348:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	b292      	uxth	r2, r2
 8007360:	4619      	mov	r1, r3
 8007362:	f000 f918 	bl	8007596 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af02      	add	r7, sp, #8
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	331c      	adds	r3, #28
 8007380:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007382:	887b      	ldrh	r3, [r7, #2]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800738c:	2100      	movs	r1, #0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f83d 	bl	800740e <USBH_GetDescriptor>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d107      	bne.n	80073ae <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800739e:	887b      	ldrh	r3, [r7, #2]
 80073a0:	461a      	mov	r2, r3
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f987 	bl	80076b8 <USBH_ParseCfgDesc>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	461a      	mov	r2, r3
 80073c4:	460b      	mov	r3, r1
 80073c6:	72fb      	strb	r3, [r7, #11]
 80073c8:	4613      	mov	r3, r2
 80073ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073d4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80073dc:	893b      	ldrh	r3, [r7, #8]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	460b      	mov	r3, r1
 80073e2:	2100      	movs	r1, #0
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f812 	bl	800740e <USBH_GetDescriptor>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d107      	bne.n	8007404 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073fa:	893a      	ldrh	r2, [r7, #8]
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fb24 	bl	8007a4c <USBH_ParseStringDesc>
  }

  return status;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	72fb      	strb	r3, [r7, #11]
 800741c:	4613      	mov	r3, r2
 800741e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	789b      	ldrb	r3, [r3, #2]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d11c      	bne.n	8007462 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007428:	7afb      	ldrb	r3, [r7, #11]
 800742a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800742e:	b2da      	uxtb	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2206      	movs	r2, #6
 8007438:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	893a      	ldrh	r2, [r7, #8]
 800743e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007440:	893b      	ldrh	r3, [r7, #8]
 8007442:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800744a:	d104      	bne.n	8007456 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f240 4209 	movw	r2, #1033	; 0x409
 8007452:	829a      	strh	r2, [r3, #20]
 8007454:	e002      	b.n	800745c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8b3a      	ldrh	r2, [r7, #24]
 8007460:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007462:	8b3b      	ldrh	r3, [r7, #24]
 8007464:	461a      	mov	r2, r3
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 fb3d 	bl	8007ae8 <USBH_CtlReq>
 800746e:	4603      	mov	r3, r0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	789b      	ldrb	r3, [r3, #2]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d10f      	bne.n	80074ac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2205      	movs	r2, #5
 8007496:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80074ac:	2200      	movs	r2, #0
 80074ae:	2100      	movs	r1, #0
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fb19 	bl	8007ae8 <USBH_CtlReq>
 80074b6:	4603      	mov	r3, r0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	789b      	ldrb	r3, [r3, #2]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10e      	bne.n	80074f2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2209      	movs	r2, #9
 80074de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	887a      	ldrh	r2, [r7, #2]
 80074e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80074f2:	2200      	movs	r2, #0
 80074f4:	2100      	movs	r1, #0
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 faf6 	bl	8007ae8 <USBH_CtlReq>
 80074fc:	4603      	mov	r3, r0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	789b      	ldrb	r3, [r3, #2]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d10f      	bne.n	800753a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2203      	movs	r2, #3
 8007524:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	b29a      	uxth	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800753a:	2200      	movs	r2, #0
 800753c:	2100      	movs	r1, #0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fad2 	bl	8007ae8 <USBH_CtlReq>
 8007544:	4603      	mov	r3, r0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	789b      	ldrb	r3, [r3, #2]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d10f      	bne.n	8007582 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2202      	movs	r2, #2
 8007566:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	b29a      	uxth	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007582:	2200      	movs	r2, #0
 8007584:	2100      	movs	r1, #0
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 faae 	bl	8007ae8 <USBH_CtlReq>
 800758c:	4603      	mov	r3, r0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	4613      	mov	r3, r2
 80075a2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	781a      	ldrb	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	785a      	ldrb	r2, [r3, #1]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	3302      	adds	r3, #2
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3303      	adds	r3, #3
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	4313      	orrs	r3, r2
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	791a      	ldrb	r2, [r3, #4]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	795a      	ldrb	r2, [r3, #5]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	799a      	ldrb	r2, [r3, #6]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	79da      	ldrb	r2, [r3, #7]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	79db      	ldrb	r3, [r3, #7]
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	dc11      	bgt.n	800761c <USBH_ParseDevDesc+0x86>
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	db16      	blt.n	800762a <USBH_ParseDevDesc+0x94>
 80075fc:	3b08      	subs	r3, #8
 80075fe:	2201      	movs	r2, #1
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800760c:	2b00      	cmp	r3, #0
 800760e:	bf14      	ite	ne
 8007610:	2301      	movne	r3, #1
 8007612:	2300      	moveq	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d102      	bne.n	8007620 <USBH_ParseDevDesc+0x8a>
 800761a:	e006      	b.n	800762a <USBH_ParseDevDesc+0x94>
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d104      	bne.n	800762a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	79da      	ldrb	r2, [r3, #7]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	71da      	strb	r2, [r3, #7]
      break;
 8007628:	e003      	b.n	8007632 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2240      	movs	r2, #64	; 0x40
 800762e:	71da      	strb	r2, [r3, #7]
      break;
 8007630:	bf00      	nop
  }

  if (length > 8U)
 8007632:	88fb      	ldrh	r3, [r7, #6]
 8007634:	2b08      	cmp	r3, #8
 8007636:	d939      	bls.n	80076ac <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	3308      	adds	r3, #8
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b29a      	uxth	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3309      	adds	r3, #9
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b29b      	uxth	r3, r3
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	b29b      	uxth	r3, r3
 800764c:	4313      	orrs	r3, r2
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	330a      	adds	r3, #10
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b29a      	uxth	r2, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	330b      	adds	r3, #11
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	b29b      	uxth	r3, r3
 8007668:	4313      	orrs	r3, r2
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	330c      	adds	r3, #12
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	b29a      	uxth	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	330d      	adds	r3, #13
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	b29b      	uxth	r3, r3
 8007684:	4313      	orrs	r3, r2
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	7b9a      	ldrb	r2, [r3, #14]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	7bda      	ldrb	r2, [r3, #15]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	7c1a      	ldrb	r2, [r3, #16]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	7c5a      	ldrb	r2, [r3, #17]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	745a      	strb	r2, [r3, #17]
  }
}
 80076ac:	bf00      	nop
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08c      	sub	sp, #48	; 0x30
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	4613      	mov	r3, r2
 80076c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80076cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	785a      	ldrb	r2, [r3, #1]
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	3302      	adds	r3, #2
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	3303      	adds	r3, #3
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	b29b      	uxth	r3, r3
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	b29b      	uxth	r3, r3
 800770c:	4313      	orrs	r3, r2
 800770e:	b29b      	uxth	r3, r3
 8007710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007714:	bf28      	it	cs
 8007716:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800771a:	b29a      	uxth	r2, r3
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	791a      	ldrb	r2, [r3, #4]
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	795a      	ldrb	r2, [r3, #5]
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	799a      	ldrb	r2, [r3, #6]
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	79da      	ldrb	r2, [r3, #7]
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	7a1a      	ldrb	r2, [r3, #8]
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b09      	cmp	r3, #9
 800774e:	d002      	beq.n	8007756 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	2209      	movs	r2, #9
 8007754:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	2b09      	cmp	r3, #9
 800775a:	f240 809d 	bls.w	8007898 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800775e:	2309      	movs	r3, #9
 8007760:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007766:	e081      	b.n	800786c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007768:	f107 0316 	add.w	r3, r7, #22
 800776c:	4619      	mov	r1, r3
 800776e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007770:	f000 f99f 	bl	8007ab2 <USBH_GetNextDesc>
 8007774:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b04      	cmp	r3, #4
 800777c:	d176      	bne.n	800786c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b09      	cmp	r3, #9
 8007784:	d002      	beq.n	800778c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	2209      	movs	r2, #9
 800778a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800778c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007790:	221a      	movs	r2, #26
 8007792:	fb02 f303 	mul.w	r3, r2, r3
 8007796:	3308      	adds	r3, #8
 8007798:	6a3a      	ldr	r2, [r7, #32]
 800779a:	4413      	add	r3, r2
 800779c:	3302      	adds	r3, #2
 800779e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80077a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077a2:	69f8      	ldr	r0, [r7, #28]
 80077a4:	f000 f87e 	bl	80078a4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077b2:	e043      	b.n	800783c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80077b4:	f107 0316 	add.w	r3, r7, #22
 80077b8:	4619      	mov	r1, r3
 80077ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077bc:	f000 f979 	bl	8007ab2 <USBH_GetNextDesc>
 80077c0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d138      	bne.n	800783c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	795b      	ldrb	r3, [r3, #5]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d10f      	bne.n	80077f2 <USBH_ParseCfgDesc+0x13a>
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	799b      	ldrb	r3, [r3, #6]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d10b      	bne.n	80077f2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	79db      	ldrb	r3, [r3, #7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10f      	bne.n	8007802 <USBH_ParseCfgDesc+0x14a>
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b09      	cmp	r3, #9
 80077e8:	d00b      	beq.n	8007802 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	2209      	movs	r2, #9
 80077ee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80077f0:	e007      	b.n	8007802 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b07      	cmp	r3, #7
 80077f8:	d004      	beq.n	8007804 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	2207      	movs	r2, #7
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e000      	b.n	8007804 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007802:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007808:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800780c:	3201      	adds	r2, #1
 800780e:	00d2      	lsls	r2, r2, #3
 8007810:	211a      	movs	r1, #26
 8007812:	fb01 f303 	mul.w	r3, r1, r3
 8007816:	4413      	add	r3, r2
 8007818:	3308      	adds	r3, #8
 800781a:	6a3a      	ldr	r2, [r7, #32]
 800781c:	4413      	add	r3, r2
 800781e:	3304      	adds	r3, #4
 8007820:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007824:	69b9      	ldr	r1, [r7, #24]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f86b 	bl	8007902 <USBH_ParseEPDesc>
 800782c:	4603      	mov	r3, r0
 800782e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007832:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007836:	3301      	adds	r3, #1
 8007838:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	791b      	ldrb	r3, [r3, #4]
 8007840:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007844:	429a      	cmp	r2, r3
 8007846:	d204      	bcs.n	8007852 <USBH_ParseCfgDesc+0x19a>
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	885a      	ldrh	r2, [r3, #2]
 800784c:	8afb      	ldrh	r3, [r7, #22]
 800784e:	429a      	cmp	r2, r3
 8007850:	d8b0      	bhi.n	80077b4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	791b      	ldrb	r3, [r3, #4]
 8007856:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800785a:	429a      	cmp	r2, r3
 800785c:	d201      	bcs.n	8007862 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800785e:	2303      	movs	r3, #3
 8007860:	e01c      	b.n	800789c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007866:	3301      	adds	r3, #1
 8007868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800786c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007870:	2b01      	cmp	r3, #1
 8007872:	d805      	bhi.n	8007880 <USBH_ParseCfgDesc+0x1c8>
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	885a      	ldrh	r2, [r3, #2]
 8007878:	8afb      	ldrh	r3, [r7, #22]
 800787a:	429a      	cmp	r2, r3
 800787c:	f63f af74 	bhi.w	8007768 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	791b      	ldrb	r3, [r3, #4]
 8007884:	2b02      	cmp	r3, #2
 8007886:	bf28      	it	cs
 8007888:	2302      	movcs	r3, #2
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007890:	429a      	cmp	r2, r3
 8007892:	d201      	bcs.n	8007898 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007894:	2303      	movs	r3, #3
 8007896:	e001      	b.n	800789c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800789c:	4618      	mov	r0, r3
 800789e:	3730      	adds	r7, #48	; 0x30
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781a      	ldrb	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	785a      	ldrb	r2, [r3, #1]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	789a      	ldrb	r2, [r3, #2]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	78da      	ldrb	r2, [r3, #3]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	791a      	ldrb	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	795a      	ldrb	r2, [r3, #5]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	799a      	ldrb	r2, [r3, #6]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	79da      	ldrb	r2, [r3, #7]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	7a1a      	ldrb	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	721a      	strb	r2, [r3, #8]
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007902:	b480      	push	{r7}
 8007904:	b087      	sub	sp, #28
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	781a      	ldrb	r2, [r3, #0]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	785a      	ldrb	r2, [r3, #1]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	789a      	ldrb	r2, [r3, #2]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	78da      	ldrb	r2, [r3, #3]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3304      	adds	r3, #4
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3305      	adds	r3, #5
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b29b      	uxth	r3, r3
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	b29b      	uxth	r3, r3
 8007946:	4313      	orrs	r3, r2
 8007948:	b29a      	uxth	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	799a      	ldrb	r2, [r3, #6]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	889b      	ldrh	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d102      	bne.n	8007964 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800795e:	2303      	movs	r3, #3
 8007960:	75fb      	strb	r3, [r7, #23]
 8007962:	e033      	b.n	80079cc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	889b      	ldrh	r3, [r3, #4]
 8007968:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800796c:	f023 0307 	bic.w	r3, r3, #7
 8007970:	b29a      	uxth	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	889b      	ldrh	r3, [r3, #4]
 800797a:	b21a      	sxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3304      	adds	r3, #4
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	b299      	uxth	r1, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3305      	adds	r3, #5
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	b29b      	uxth	r3, r3
 8007990:	430b      	orrs	r3, r1
 8007992:	b29b      	uxth	r3, r3
 8007994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007998:	2b00      	cmp	r3, #0
 800799a:	d110      	bne.n	80079be <USBH_ParseEPDesc+0xbc>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	b299      	uxth	r1, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3305      	adds	r3, #5
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	430b      	orrs	r3, r1
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	b21b      	sxth	r3, r3
 80079b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079ba:	b21b      	sxth	r3, r3
 80079bc:	e001      	b.n	80079c2 <USBH_ParseEPDesc+0xc0>
 80079be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079c2:	4313      	orrs	r3, r2
 80079c4:	b21b      	sxth	r3, r3
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d116      	bne.n	8007a04 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	78db      	ldrb	r3, [r3, #3]
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d005      	beq.n	80079ee <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	78db      	ldrb	r3, [r3, #3]
 80079e6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d127      	bne.n	8007a3e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	799b      	ldrb	r3, [r3, #6]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <USBH_ParseEPDesc+0xfc>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	799b      	ldrb	r3, [r3, #6]
 80079fa:	2b10      	cmp	r3, #16
 80079fc:	d91f      	bls.n	8007a3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80079fe:	2303      	movs	r3, #3
 8007a00:	75fb      	strb	r3, [r7, #23]
 8007a02:	e01c      	b.n	8007a3e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	78db      	ldrb	r3, [r3, #3]
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d10a      	bne.n	8007a26 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	799b      	ldrb	r3, [r3, #6]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <USBH_ParseEPDesc+0x11e>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	799b      	ldrb	r3, [r3, #6]
 8007a1c:	2b10      	cmp	r3, #16
 8007a1e:	d90e      	bls.n	8007a3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007a20:	2303      	movs	r3, #3
 8007a22:	75fb      	strb	r3, [r7, #23]
 8007a24:	e00b      	b.n	8007a3e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	78db      	ldrb	r3, [r3, #3]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d105      	bne.n	8007a3e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	799b      	ldrb	r3, [r3, #6]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d120      	bne.n	8007aa6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	1e9a      	subs	r2, r3, #2
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	bf28      	it	cs
 8007a70:	4613      	movcs	r3, r2
 8007a72:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3302      	adds	r3, #2
 8007a78:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	82fb      	strh	r3, [r7, #22]
 8007a7e:	e00b      	b.n	8007a98 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a80:	8afb      	ldrh	r3, [r7, #22]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4413      	add	r3, r2
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a92:	8afb      	ldrh	r3, [r7, #22]
 8007a94:	3302      	adds	r3, #2
 8007a96:	82fb      	strh	r3, [r7, #22]
 8007a98:	8afa      	ldrh	r2, [r7, #22]
 8007a9a:	8abb      	ldrh	r3, [r7, #20]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d3ef      	bcc.n	8007a80 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	881a      	ldrh	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ada:	68fb      	ldr	r3, [r7, #12]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	4613      	mov	r3, r2
 8007af4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007af6:	2301      	movs	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	789b      	ldrb	r3, [r3, #2]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d002      	beq.n	8007b08 <USBH_CtlReq+0x20>
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d00f      	beq.n	8007b26 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007b06:	e027      	b.n	8007b58 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	88fa      	ldrh	r2, [r7, #6]
 8007b12:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b20:	2301      	movs	r3, #1
 8007b22:	75fb      	strb	r3, [r7, #23]
      break;
 8007b24:	e018      	b.n	8007b58 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f81c 	bl	8007b64 <USBH_HandleControl>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <USBH_CtlReq+0x54>
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d106      	bne.n	8007b4a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	761a      	strb	r2, [r3, #24]
      break;
 8007b48:	e005      	b.n	8007b56 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d102      	bne.n	8007b56 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	709a      	strb	r2, [r3, #2]
      break;
 8007b56:	bf00      	nop
  }
  return status;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7e1b      	ldrb	r3, [r3, #24]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	2b0a      	cmp	r3, #10
 8007b7c:	f200 8156 	bhi.w	8007e2c <USBH_HandleControl+0x2c8>
 8007b80:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <USBH_HandleControl+0x24>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	08007bcf 	.word	0x08007bcf
 8007b90:	08007c39 	.word	0x08007c39
 8007b94:	08007c5f 	.word	0x08007c5f
 8007b98:	08007c97 	.word	0x08007c97
 8007b9c:	08007cc1 	.word	0x08007cc1
 8007ba0:	08007d13 	.word	0x08007d13
 8007ba4:	08007d35 	.word	0x08007d35
 8007ba8:	08007d71 	.word	0x08007d71
 8007bac:	08007d97 	.word	0x08007d97
 8007bb0:	08007dd5 	.word	0x08007dd5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f103 0110 	add.w	r1, r3, #16
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f943 	bl	8007e4c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	761a      	strb	r2, [r3, #24]
      break;
 8007bcc:	e139      	b.n	8007e42 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	795b      	ldrb	r3, [r3, #5]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fcc5 	bl	8008564 <USBH_LL_GetURBState>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d11e      	bne.n	8007c22 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7c1b      	ldrb	r3, [r3, #16]
 8007be8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	8adb      	ldrh	r3, [r3, #22]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007bf6:	7b7b      	ldrb	r3, [r7, #13]
 8007bf8:	2b80      	cmp	r3, #128	; 0x80
 8007bfa:	d103      	bne.n	8007c04 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2203      	movs	r2, #3
 8007c00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c02:	e115      	b.n	8007e30 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2205      	movs	r2, #5
 8007c08:	761a      	strb	r2, [r3, #24]
      break;
 8007c0a:	e111      	b.n	8007e30 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007c0c:	7b7b      	ldrb	r3, [r7, #13]
 8007c0e:	2b80      	cmp	r3, #128	; 0x80
 8007c10:	d103      	bne.n	8007c1a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2209      	movs	r2, #9
 8007c16:	761a      	strb	r2, [r3, #24]
      break;
 8007c18:	e10a      	b.n	8007e30 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2207      	movs	r2, #7
 8007c1e:	761a      	strb	r2, [r3, #24]
      break;
 8007c20:	e106      	b.n	8007e30 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d003      	beq.n	8007c30 <USBH_HandleControl+0xcc>
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	f040 8100 	bne.w	8007e30 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	220b      	movs	r2, #11
 8007c34:	761a      	strb	r2, [r3, #24]
      break;
 8007c36:	e0fb      	b.n	8007e30 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6899      	ldr	r1, [r3, #8]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	899a      	ldrh	r2, [r3, #12]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	791b      	ldrb	r3, [r3, #4]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f93a 	bl	8007eca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	761a      	strb	r2, [r3, #24]
      break;
 8007c5c:	e0f1      	b.n	8007e42 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	791b      	ldrb	r3, [r3, #4]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fc7d 	bl	8008564 <USBH_LL_GetURBState>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d102      	bne.n	8007c7a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2209      	movs	r2, #9
 8007c78:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d102      	bne.n	8007c86 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c80:	2303      	movs	r3, #3
 8007c82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c84:	e0d6      	b.n	8007e34 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	f040 80d3 	bne.w	8007e34 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	220b      	movs	r2, #11
 8007c92:	761a      	strb	r2, [r3, #24]
      break;
 8007c94:	e0ce      	b.n	8007e34 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6899      	ldr	r1, [r3, #8]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	899a      	ldrh	r2, [r3, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	795b      	ldrb	r3, [r3, #5]
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	9000      	str	r0, [sp, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f8ea 	bl	8007e80 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2206      	movs	r2, #6
 8007cbc:	761a      	strb	r2, [r3, #24]
      break;
 8007cbe:	e0c0      	b.n	8007e42 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	795b      	ldrb	r3, [r3, #5]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fc4c 	bl	8008564 <USBH_LL_GetURBState>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d103      	bne.n	8007cde <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2207      	movs	r2, #7
 8007cda:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cdc:	e0ac      	b.n	8007e38 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b05      	cmp	r3, #5
 8007ce2:	d105      	bne.n	8007cf0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	220c      	movs	r2, #12
 8007ce8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007cea:	2303      	movs	r3, #3
 8007cec:	73fb      	strb	r3, [r7, #15]
      break;
 8007cee:	e0a3      	b.n	8007e38 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d103      	bne.n	8007cfe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2205      	movs	r2, #5
 8007cfa:	761a      	strb	r2, [r3, #24]
      break;
 8007cfc:	e09c      	b.n	8007e38 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	f040 8099 	bne.w	8007e38 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	220b      	movs	r2, #11
 8007d0a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d10:	e092      	b.n	8007e38 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	791b      	ldrb	r3, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	2100      	movs	r1, #0
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8d5 	bl	8007eca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2208      	movs	r2, #8
 8007d30:	761a      	strb	r2, [r3, #24]

      break;
 8007d32:	e086      	b.n	8007e42 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	791b      	ldrb	r3, [r3, #4]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fc12 	bl	8008564 <USBH_LL_GetURBState>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d105      	bne.n	8007d56 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	220d      	movs	r2, #13
 8007d4e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d54:	e072      	b.n	8007e3c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d103      	bne.n	8007d64 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	220b      	movs	r2, #11
 8007d60:	761a      	strb	r2, [r3, #24]
      break;
 8007d62:	e06b      	b.n	8007e3c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007d64:	7bbb      	ldrb	r3, [r7, #14]
 8007d66:	2b05      	cmp	r3, #5
 8007d68:	d168      	bne.n	8007e3c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6e:	e065      	b.n	8007e3c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	795b      	ldrb	r3, [r3, #5]
 8007d74:	2201      	movs	r2, #1
 8007d76:	9200      	str	r2, [sp, #0]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f87f 	bl	8007e80 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	220a      	movs	r2, #10
 8007d92:	761a      	strb	r2, [r3, #24]
      break;
 8007d94:	e055      	b.n	8007e42 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	795b      	ldrb	r3, [r3, #5]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fbe1 	bl	8008564 <USBH_LL_GetURBState>
 8007da2:	4603      	mov	r3, r0
 8007da4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d105      	bne.n	8007db8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	220d      	movs	r2, #13
 8007db4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007db6:	e043      	b.n	8007e40 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d103      	bne.n	8007dc6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2209      	movs	r2, #9
 8007dc2:	761a      	strb	r2, [r3, #24]
      break;
 8007dc4:	e03c      	b.n	8007e40 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	d139      	bne.n	8007e40 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	220b      	movs	r2, #11
 8007dd0:	761a      	strb	r2, [r3, #24]
      break;
 8007dd2:	e035      	b.n	8007e40 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7e5b      	ldrb	r3, [r3, #25]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	765a      	strb	r2, [r3, #25]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	7e5b      	ldrb	r3, [r3, #25]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d806      	bhi.n	8007df6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007df4:	e025      	b.n	8007e42 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dfc:	2106      	movs	r1, #6
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	795b      	ldrb	r3, [r3, #5]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f90c 	bl	800802c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	791b      	ldrb	r3, [r3, #4]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f906 	bl	800802c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e26:	2302      	movs	r3, #2
 8007e28:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2a:	e00a      	b.n	8007e42 <USBH_HandleControl+0x2de>

    default:
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e008      	b.n	8007e42 <USBH_HandleControl+0x2de>
      break;
 8007e30:	bf00      	nop
 8007e32:	e006      	b.n	8007e42 <USBH_HandleControl+0x2de>
      break;
 8007e34:	bf00      	nop
 8007e36:	e004      	b.n	8007e42 <USBH_HandleControl+0x2de>
      break;
 8007e38:	bf00      	nop
 8007e3a:	e002      	b.n	8007e42 <USBH_HandleControl+0x2de>
      break;
 8007e3c:	bf00      	nop
 8007e3e:	e000      	b.n	8007e42 <USBH_HandleControl+0x2de>
      break;
 8007e40:	bf00      	nop
  }

  return status;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af04      	add	r7, sp, #16
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	4613      	mov	r3, r2
 8007e58:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e5a:	79f9      	ldrb	r1, [r7, #7]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9303      	str	r3, [sp, #12]
 8007e60:	2308      	movs	r3, #8
 8007e62:	9302      	str	r3, [sp, #8]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2200      	movs	r2, #0
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 fb46 	bl	8008502 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af04      	add	r7, sp, #16
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	460b      	mov	r3, r1
 8007e90:	80fb      	strh	r3, [r7, #6]
 8007e92:	4613      	mov	r3, r2
 8007e94:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ea4:	7979      	ldrb	r1, [r7, #5]
 8007ea6:	7e3b      	ldrb	r3, [r7, #24]
 8007ea8:	9303      	str	r3, [sp, #12]
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	9302      	str	r3, [sp, #8]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2200      	movs	r2, #0
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fb21 	bl	8008502 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b088      	sub	sp, #32
 8007ece:	af04      	add	r7, sp, #16
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	460b      	mov	r3, r1
 8007eda:	80fb      	strh	r3, [r7, #6]
 8007edc:	4613      	mov	r3, r2
 8007ede:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ee0:	7979      	ldrb	r1, [r7, #5]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	9302      	str	r3, [sp, #8]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	2301      	movs	r3, #1
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 fb03 	bl	8008502 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007efc:	2300      	movs	r3, #0

}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b088      	sub	sp, #32
 8007f0a:	af04      	add	r7, sp, #16
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	4611      	mov	r1, r2
 8007f12:	461a      	mov	r2, r3
 8007f14:	460b      	mov	r3, r1
 8007f16:	80fb      	strh	r3, [r7, #6]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f2a:	7979      	ldrb	r1, [r7, #5]
 8007f2c:	7e3b      	ldrb	r3, [r7, #24]
 8007f2e:	9303      	str	r3, [sp, #12]
 8007f30:	88fb      	ldrh	r3, [r7, #6]
 8007f32:	9302      	str	r3, [sp, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	2301      	movs	r3, #1
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 fade 	bl	8008502 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af04      	add	r7, sp, #16
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	460b      	mov	r3, r1
 8007f60:	80fb      	strh	r3, [r7, #6]
 8007f62:	4613      	mov	r3, r2
 8007f64:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f66:	7979      	ldrb	r1, [r7, #5]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	9302      	str	r3, [sp, #8]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	2301      	movs	r3, #1
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	2302      	movs	r3, #2
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 fac0 	bl	8008502 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af04      	add	r7, sp, #16
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	70fb      	strb	r3, [r7, #3]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70bb      	strb	r3, [r7, #2]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007fa6:	7878      	ldrb	r0, [r7, #1]
 8007fa8:	78ba      	ldrb	r2, [r7, #2]
 8007faa:	78f9      	ldrb	r1, [r7, #3]
 8007fac:	8b3b      	ldrh	r3, [r7, #24]
 8007fae:	9302      	str	r3, [sp, #8]
 8007fb0:	7d3b      	ldrb	r3, [r7, #20]
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	7c3b      	ldrb	r3, [r7, #16]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	4603      	mov	r3, r0
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa53 	bl	8008466 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa72 	bl	80084c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f836 	bl	8008068 <USBH_GetFreePipe>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008000:	89fb      	ldrh	r3, [r7, #14]
 8008002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008006:	4293      	cmp	r3, r2
 8008008:	d00a      	beq.n	8008020 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	89fb      	ldrh	r3, [r7, #14]
 800800e:	f003 030f 	and.w	r3, r3, #15
 8008012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	33e0      	adds	r3, #224	; 0xe0
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008020:	89fb      	ldrh	r3, [r7, #14]
 8008022:	b2db      	uxtb	r3, r3
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	2b0f      	cmp	r3, #15
 800803c:	d80d      	bhi.n	800805a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	33e0      	adds	r3, #224	; 0xe0
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	33e0      	adds	r3, #224	; 0xe0
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]
 8008078:	e00f      	b.n	800809a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	33e0      	adds	r3, #224	; 0xe0
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d102      	bne.n	8008094 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	b29b      	uxth	r3, r3
 8008092:	e007      	b.n	80080a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	3301      	adds	r3, #1
 8008098:	73fb      	strb	r3, [r7, #15]
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b0f      	cmp	r3, #15
 800809e:	d9ec      	bls.n	800807a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80080a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80080b4:	2201      	movs	r2, #1
 80080b6:	490e      	ldr	r1, [pc, #56]	; (80080f0 <MX_USB_HOST_Init+0x40>)
 80080b8:	480e      	ldr	r0, [pc, #56]	; (80080f4 <MX_USB_HOST_Init+0x44>)
 80080ba:	f7fe fba7 	bl	800680c <USBH_Init>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80080c4:	f7f8 fdbc 	bl	8000c40 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80080c8:	490b      	ldr	r1, [pc, #44]	; (80080f8 <MX_USB_HOST_Init+0x48>)
 80080ca:	480a      	ldr	r0, [pc, #40]	; (80080f4 <MX_USB_HOST_Init+0x44>)
 80080cc:	f7fe fc2c 	bl	8006928 <USBH_RegisterClass>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80080d6:	f7f8 fdb3 	bl	8000c40 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80080da:	4806      	ldr	r0, [pc, #24]	; (80080f4 <MX_USB_HOST_Init+0x44>)
 80080dc:	f7fe fcb0 	bl	8006a40 <USBH_Start>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80080e6:	f7f8 fdab 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80080ea:	bf00      	nop
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	08008111 	.word	0x08008111
 80080f4:	20000258 	.word	0x20000258
 80080f8:	2000000c 	.word	0x2000000c

080080fc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008100:	4802      	ldr	r0, [pc, #8]	; (800810c <MX_USB_HOST_Process+0x10>)
 8008102:	f7fe fcad 	bl	8006a60 <USBH_Process>
}
 8008106:	bf00      	nop
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20000258 	.word	0x20000258

08008110 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	3b01      	subs	r3, #1
 8008120:	2b04      	cmp	r3, #4
 8008122:	d819      	bhi.n	8008158 <USBH_UserProcess+0x48>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <USBH_UserProcess+0x1c>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	08008159 	.word	0x08008159
 8008130:	08008149 	.word	0x08008149
 8008134:	08008159 	.word	0x08008159
 8008138:	08008151 	.word	0x08008151
 800813c:	08008141 	.word	0x08008141
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008140:	4b09      	ldr	r3, [pc, #36]	; (8008168 <USBH_UserProcess+0x58>)
 8008142:	2203      	movs	r2, #3
 8008144:	701a      	strb	r2, [r3, #0]
  break;
 8008146:	e008      	b.n	800815a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008148:	4b07      	ldr	r3, [pc, #28]	; (8008168 <USBH_UserProcess+0x58>)
 800814a:	2202      	movs	r2, #2
 800814c:	701a      	strb	r2, [r3, #0]
  break;
 800814e:	e004      	b.n	800815a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <USBH_UserProcess+0x58>)
 8008152:	2201      	movs	r2, #1
 8008154:	701a      	strb	r2, [r3, #0]
  break;
 8008156:	e000      	b.n	800815a <USBH_UserProcess+0x4a>

  default:
  break;
 8008158:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	20000630 	.word	0x20000630

0800816c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	; 0x28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008174:	f107 0314 	add.w	r3, r7, #20
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	605a      	str	r2, [r3, #4]
 800817e:	609a      	str	r2, [r3, #8]
 8008180:	60da      	str	r2, [r3, #12]
 8008182:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800818c:	d147      	bne.n	800821e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800818e:	2300      	movs	r3, #0
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	4b25      	ldr	r3, [pc, #148]	; (8008228 <HAL_HCD_MspInit+0xbc>)
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	4a24      	ldr	r2, [pc, #144]	; (8008228 <HAL_HCD_MspInit+0xbc>)
 8008198:	f043 0301 	orr.w	r3, r3, #1
 800819c:	6313      	str	r3, [r2, #48]	; 0x30
 800819e:	4b22      	ldr	r3, [pc, #136]	; (8008228 <HAL_HCD_MspInit+0xbc>)
 80081a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80081aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80081b8:	f107 0314 	add.w	r3, r7, #20
 80081bc:	4619      	mov	r1, r3
 80081be:	481b      	ldr	r0, [pc, #108]	; (800822c <HAL_HCD_MspInit+0xc0>)
 80081c0:	f7f9 ff7e 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80081c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80081c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081ca:	2302      	movs	r3, #2
 80081cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081d2:	2300      	movs	r3, #0
 80081d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081d6:	230a      	movs	r3, #10
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081da:	f107 0314 	add.w	r3, r7, #20
 80081de:	4619      	mov	r1, r3
 80081e0:	4812      	ldr	r0, [pc, #72]	; (800822c <HAL_HCD_MspInit+0xc0>)
 80081e2:	f7f9 ff6d 	bl	80020c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081e6:	4b10      	ldr	r3, [pc, #64]	; (8008228 <HAL_HCD_MspInit+0xbc>)
 80081e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ea:	4a0f      	ldr	r2, [pc, #60]	; (8008228 <HAL_HCD_MspInit+0xbc>)
 80081ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f0:	6353      	str	r3, [r2, #52]	; 0x34
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <HAL_HCD_MspInit+0xbc>)
 80081f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fa:	4a0b      	ldr	r2, [pc, #44]	; (8008228 <HAL_HCD_MspInit+0xbc>)
 80081fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008200:	6453      	str	r3, [r2, #68]	; 0x44
 8008202:	4b09      	ldr	r3, [pc, #36]	; (8008228 <HAL_HCD_MspInit+0xbc>)
 8008204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800820e:	2200      	movs	r2, #0
 8008210:	2100      	movs	r1, #0
 8008212:	2043      	movs	r0, #67	; 0x43
 8008214:	f7f9 ff1d 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008218:	2043      	movs	r0, #67	; 0x43
 800821a:	f7f9 ff36 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800821e:	bf00      	nop
 8008220:	3728      	adds	r7, #40	; 0x28
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	40023800 	.word	0x40023800
 800822c:	40020000 	.word	0x40020000

08008230 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe ffed 	bl	800721e <USBH_LL_IncTimer>
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff f825 	bl	80072aa <USBH_LL_Connect>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008276:	4618      	mov	r0, r3
 8008278:	f7ff f82e 	bl	80072d8 <USBH_LL_Disconnect>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
 8008290:	4613      	mov	r3, r2
 8008292:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe ffdf 	bl	8007272 <USBH_LL_PortEnabled>
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe ffdf 	bl	800728e <USBH_LL_PortDisabled>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d12a      	bne.n	8008340 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80082ea:	4a18      	ldr	r2, [pc, #96]	; (800834c <USBH_LL_Init+0x74>)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a15      	ldr	r2, [pc, #84]	; (800834c <USBH_LL_Init+0x74>)
 80082f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082fa:	4b14      	ldr	r3, [pc, #80]	; (800834c <USBH_LL_Init+0x74>)
 80082fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008300:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <USBH_LL_Init+0x74>)
 8008304:	2208      	movs	r2, #8
 8008306:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008308:	4b10      	ldr	r3, [pc, #64]	; (800834c <USBH_LL_Init+0x74>)
 800830a:	2201      	movs	r2, #1
 800830c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <USBH_LL_Init+0x74>)
 8008310:	2200      	movs	r2, #0
 8008312:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <USBH_LL_Init+0x74>)
 8008316:	2202      	movs	r2, #2
 8008318:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800831a:	4b0c      	ldr	r3, [pc, #48]	; (800834c <USBH_LL_Init+0x74>)
 800831c:	2200      	movs	r2, #0
 800831e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008320:	480a      	ldr	r0, [pc, #40]	; (800834c <USBH_LL_Init+0x74>)
 8008322:	f7fa f8c0 	bl	80024a6 <HAL_HCD_Init>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800832c:	f7f8 fc88 	bl	8000c40 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008330:	4806      	ldr	r0, [pc, #24]	; (800834c <USBH_LL_Init+0x74>)
 8008332:	f7fa fca4 	bl	8002c7e <HAL_HCD_GetCurrentFrame>
 8008336:	4603      	mov	r3, r0
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7fe ff60 	bl	8007200 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000634 	.word	0x20000634

08008350 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008366:	4618      	mov	r0, r3
 8008368:	f7fa fc13 	bl	8002b92 <HAL_HCD_Start>
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f95c 	bl	8008630 <USBH_Get_USB_Status>
 8008378:	4603      	mov	r3, r0
 800837a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800837c:	7bbb      	ldrb	r3, [r7, #14]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800839c:	4618      	mov	r0, r3
 800839e:	f7fa fc1b 	bl	8002bd8 <HAL_HCD_Stop>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 f941 	bl	8008630 <USBH_Get_USB_Status>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80083c4:	2301      	movs	r3, #1
 80083c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fa fc63 	bl	8002c9a <HAL_HCD_GetCurrentSpeed>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d00c      	beq.n	80083f4 <USBH_LL_GetSpeed+0x38>
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d80d      	bhi.n	80083fa <USBH_LL_GetSpeed+0x3e>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <USBH_LL_GetSpeed+0x2c>
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d003      	beq.n	80083ee <USBH_LL_GetSpeed+0x32>
 80083e6:	e008      	b.n	80083fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
    break;
 80083ec:	e008      	b.n	8008400 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80083ee:	2301      	movs	r3, #1
 80083f0:	73fb      	strb	r3, [r7, #15]
    break;
 80083f2:	e005      	b.n	8008400 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80083f4:	2302      	movs	r3, #2
 80083f6:	73fb      	strb	r3, [r7, #15]
    break;
 80083f8:	e002      	b.n	8008400 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80083fa:	2301      	movs	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]
    break;
 80083fe:	bf00      	nop
  }
  return  speed;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008420:	4618      	mov	r0, r3
 8008422:	f7fa fbf6 	bl	8002c12 <HAL_HCD_ResetPort>
 8008426:	4603      	mov	r3, r0
 8008428:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 f8ff 	bl	8008630 <USBH_Get_USB_Status>
 8008432:	4603      	mov	r3, r0
 8008434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008436:	7bbb      	ldrb	r3, [r7, #14]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f7fa fbfd 	bl	8002c56 <HAL_HCD_HC_GetXferCount>
 800845c:	4603      	mov	r3, r0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008466:	b590      	push	{r4, r7, lr}
 8008468:	b089      	sub	sp, #36	; 0x24
 800846a:	af04      	add	r7, sp, #16
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	4608      	mov	r0, r1
 8008470:	4611      	mov	r1, r2
 8008472:	461a      	mov	r2, r3
 8008474:	4603      	mov	r3, r0
 8008476:	70fb      	strb	r3, [r7, #3]
 8008478:	460b      	mov	r3, r1
 800847a:	70bb      	strb	r3, [r7, #2]
 800847c:	4613      	mov	r3, r2
 800847e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800848e:	787c      	ldrb	r4, [r7, #1]
 8008490:	78ba      	ldrb	r2, [r7, #2]
 8008492:	78f9      	ldrb	r1, [r7, #3]
 8008494:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008496:	9302      	str	r3, [sp, #8]
 8008498:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4623      	mov	r3, r4
 80084a6:	f7fa f860 	bl	800256a <HAL_HCD_HC_Init>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 f8bd 	bl	8008630 <USBH_Get_USB_Status>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd90      	pop	{r4, r7, pc}

080084c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084de:	78fa      	ldrb	r2, [r7, #3]
 80084e0:	4611      	mov	r1, r2
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fa f8d0 	bl	8002688 <HAL_HCD_HC_Halt>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f89e 	bl	8008630 <USBH_Get_USB_Status>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008502:	b590      	push	{r4, r7, lr}
 8008504:	b089      	sub	sp, #36	; 0x24
 8008506:	af04      	add	r7, sp, #16
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	4608      	mov	r0, r1
 800850c:	4611      	mov	r1, r2
 800850e:	461a      	mov	r2, r3
 8008510:	4603      	mov	r3, r0
 8008512:	70fb      	strb	r3, [r7, #3]
 8008514:	460b      	mov	r3, r1
 8008516:	70bb      	strb	r3, [r7, #2]
 8008518:	4613      	mov	r3, r2
 800851a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800852a:	787c      	ldrb	r4, [r7, #1]
 800852c:	78ba      	ldrb	r2, [r7, #2]
 800852e:	78f9      	ldrb	r1, [r7, #3]
 8008530:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008534:	9303      	str	r3, [sp, #12]
 8008536:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008538:	9302      	str	r3, [sp, #8]
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	4623      	mov	r3, r4
 8008546:	f7fa f8c3 	bl	80026d0 <HAL_HCD_HC_SubmitRequest>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	4618      	mov	r0, r3
 8008552:	f000 f86d 	bl	8008630 <USBH_Get_USB_Status>
 8008556:	4603      	mov	r3, r0
 8008558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800855a:	7bbb      	ldrb	r3, [r7, #14]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	bd90      	pop	{r4, r7, pc}

08008564 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	4611      	mov	r1, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f7fa fb57 	bl	8002c2e <HAL_HCD_HC_GetURBState>
 8008580:	4603      	mov	r3, r0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	460b      	mov	r3, r1
 8008594:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800859c:	2b01      	cmp	r3, #1
 800859e:	d103      	bne.n	80085a8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 f870 	bl	8008688 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80085a8:	20c8      	movs	r0, #200	; 0xc8
 80085aa:	f7f8 fdf1 	bl	8001190 <HAL_Delay>
  return USBH_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
 80085c4:	4613      	mov	r3, r2
 80085c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	212c      	movs	r1, #44	; 0x2c
 80085d6:	fb01 f303 	mul.w	r3, r1, r3
 80085da:	4413      	add	r3, r2
 80085dc:	333b      	adds	r3, #59	; 0x3b
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d009      	beq.n	80085f8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	212c      	movs	r1, #44	; 0x2c
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	4413      	add	r3, r2
 80085f0:	3354      	adds	r3, #84	; 0x54
 80085f2:	78ba      	ldrb	r2, [r7, #2]
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e008      	b.n	800860a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	212c      	movs	r1, #44	; 0x2c
 80085fe:	fb01 f303 	mul.w	r3, r1, r3
 8008602:	4413      	add	r3, r2
 8008604:	3355      	adds	r3, #85	; 0x55
 8008606:	78ba      	ldrb	r2, [r7, #2]
 8008608:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7f8 fdb5 	bl	8001190 <HAL_Delay>
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	2b03      	cmp	r3, #3
 8008642:	d817      	bhi.n	8008674 <USBH_Get_USB_Status+0x44>
 8008644:	a201      	add	r2, pc, #4	; (adr r2, 800864c <USBH_Get_USB_Status+0x1c>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	0800865d 	.word	0x0800865d
 8008650:	08008663 	.word	0x08008663
 8008654:	08008669 	.word	0x08008669
 8008658:	0800866f 	.word	0x0800866f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
    break;
 8008660:	e00b      	b.n	800867a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008662:	2302      	movs	r3, #2
 8008664:	73fb      	strb	r3, [r7, #15]
    break;
 8008666:	e008      	b.n	800867a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
    break;
 800866c:	e005      	b.n	800867a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800866e:	2302      	movs	r3, #2
 8008670:	73fb      	strb	r3, [r7, #15]
    break;
 8008672:	e002      	b.n	800867a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008674:	2302      	movs	r3, #2
 8008676:	73fb      	strb	r3, [r7, #15]
    break;
 8008678:	bf00      	nop
  }
  return usb_status;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d102      	bne.n	80086a2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
 80086a0:	e001      	b.n	80086a6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80086a2:	2301      	movs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	461a      	mov	r2, r3
 80086aa:	2101      	movs	r1, #1
 80086ac:	4803      	ldr	r0, [pc, #12]	; (80086bc <MX_DriverVbusFS+0x34>)
 80086ae:	f7f9 fea3 	bl	80023f8 <HAL_GPIO_WritePin>
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	40020800 	.word	0x40020800

080086c0 <__errno>:
 80086c0:	4b01      	ldr	r3, [pc, #4]	; (80086c8 <__errno+0x8>)
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	2000002c 	.word	0x2000002c

080086cc <__libc_init_array>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	4d0d      	ldr	r5, [pc, #52]	; (8008704 <__libc_init_array+0x38>)
 80086d0:	4c0d      	ldr	r4, [pc, #52]	; (8008708 <__libc_init_array+0x3c>)
 80086d2:	1b64      	subs	r4, r4, r5
 80086d4:	10a4      	asrs	r4, r4, #2
 80086d6:	2600      	movs	r6, #0
 80086d8:	42a6      	cmp	r6, r4
 80086da:	d109      	bne.n	80086f0 <__libc_init_array+0x24>
 80086dc:	4d0b      	ldr	r5, [pc, #44]	; (800870c <__libc_init_array+0x40>)
 80086de:	4c0c      	ldr	r4, [pc, #48]	; (8008710 <__libc_init_array+0x44>)
 80086e0:	f000 fc9e 	bl	8009020 <_init>
 80086e4:	1b64      	subs	r4, r4, r5
 80086e6:	10a4      	asrs	r4, r4, #2
 80086e8:	2600      	movs	r6, #0
 80086ea:	42a6      	cmp	r6, r4
 80086ec:	d105      	bne.n	80086fa <__libc_init_array+0x2e>
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f4:	4798      	blx	r3
 80086f6:	3601      	adds	r6, #1
 80086f8:	e7ee      	b.n	80086d8 <__libc_init_array+0xc>
 80086fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80086fe:	4798      	blx	r3
 8008700:	3601      	adds	r6, #1
 8008702:	e7f2      	b.n	80086ea <__libc_init_array+0x1e>
 8008704:	080090c8 	.word	0x080090c8
 8008708:	080090c8 	.word	0x080090c8
 800870c:	080090c8 	.word	0x080090c8
 8008710:	080090cc 	.word	0x080090cc

08008714 <malloc>:
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <malloc+0xc>)
 8008716:	4601      	mov	r1, r0
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	f000 b87f 	b.w	800881c <_malloc_r>
 800871e:	bf00      	nop
 8008720:	2000002c 	.word	0x2000002c

08008724 <free>:
 8008724:	4b02      	ldr	r3, [pc, #8]	; (8008730 <free+0xc>)
 8008726:	4601      	mov	r1, r0
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	f000 b80b 	b.w	8008744 <_free_r>
 800872e:	bf00      	nop
 8008730:	2000002c 	.word	0x2000002c

08008734 <memset>:
 8008734:	4402      	add	r2, r0
 8008736:	4603      	mov	r3, r0
 8008738:	4293      	cmp	r3, r2
 800873a:	d100      	bne.n	800873e <memset+0xa>
 800873c:	4770      	bx	lr
 800873e:	f803 1b01 	strb.w	r1, [r3], #1
 8008742:	e7f9      	b.n	8008738 <memset+0x4>

08008744 <_free_r>:
 8008744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008746:	2900      	cmp	r1, #0
 8008748:	d044      	beq.n	80087d4 <_free_r+0x90>
 800874a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874e:	9001      	str	r0, [sp, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f1a1 0404 	sub.w	r4, r1, #4
 8008756:	bfb8      	it	lt
 8008758:	18e4      	addlt	r4, r4, r3
 800875a:	f000 f903 	bl	8008964 <__malloc_lock>
 800875e:	4a1e      	ldr	r2, [pc, #120]	; (80087d8 <_free_r+0x94>)
 8008760:	9801      	ldr	r0, [sp, #4]
 8008762:	6813      	ldr	r3, [r2, #0]
 8008764:	b933      	cbnz	r3, 8008774 <_free_r+0x30>
 8008766:	6063      	str	r3, [r4, #4]
 8008768:	6014      	str	r4, [r2, #0]
 800876a:	b003      	add	sp, #12
 800876c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008770:	f000 b8fe 	b.w	8008970 <__malloc_unlock>
 8008774:	42a3      	cmp	r3, r4
 8008776:	d908      	bls.n	800878a <_free_r+0x46>
 8008778:	6825      	ldr	r5, [r4, #0]
 800877a:	1961      	adds	r1, r4, r5
 800877c:	428b      	cmp	r3, r1
 800877e:	bf01      	itttt	eq
 8008780:	6819      	ldreq	r1, [r3, #0]
 8008782:	685b      	ldreq	r3, [r3, #4]
 8008784:	1949      	addeq	r1, r1, r5
 8008786:	6021      	streq	r1, [r4, #0]
 8008788:	e7ed      	b.n	8008766 <_free_r+0x22>
 800878a:	461a      	mov	r2, r3
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	b10b      	cbz	r3, 8008794 <_free_r+0x50>
 8008790:	42a3      	cmp	r3, r4
 8008792:	d9fa      	bls.n	800878a <_free_r+0x46>
 8008794:	6811      	ldr	r1, [r2, #0]
 8008796:	1855      	adds	r5, r2, r1
 8008798:	42a5      	cmp	r5, r4
 800879a:	d10b      	bne.n	80087b4 <_free_r+0x70>
 800879c:	6824      	ldr	r4, [r4, #0]
 800879e:	4421      	add	r1, r4
 80087a0:	1854      	adds	r4, r2, r1
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	6011      	str	r1, [r2, #0]
 80087a6:	d1e0      	bne.n	800876a <_free_r+0x26>
 80087a8:	681c      	ldr	r4, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	6053      	str	r3, [r2, #4]
 80087ae:	4421      	add	r1, r4
 80087b0:	6011      	str	r1, [r2, #0]
 80087b2:	e7da      	b.n	800876a <_free_r+0x26>
 80087b4:	d902      	bls.n	80087bc <_free_r+0x78>
 80087b6:	230c      	movs	r3, #12
 80087b8:	6003      	str	r3, [r0, #0]
 80087ba:	e7d6      	b.n	800876a <_free_r+0x26>
 80087bc:	6825      	ldr	r5, [r4, #0]
 80087be:	1961      	adds	r1, r4, r5
 80087c0:	428b      	cmp	r3, r1
 80087c2:	bf04      	itt	eq
 80087c4:	6819      	ldreq	r1, [r3, #0]
 80087c6:	685b      	ldreq	r3, [r3, #4]
 80087c8:	6063      	str	r3, [r4, #4]
 80087ca:	bf04      	itt	eq
 80087cc:	1949      	addeq	r1, r1, r5
 80087ce:	6021      	streq	r1, [r4, #0]
 80087d0:	6054      	str	r4, [r2, #4]
 80087d2:	e7ca      	b.n	800876a <_free_r+0x26>
 80087d4:	b003      	add	sp, #12
 80087d6:	bd30      	pop	{r4, r5, pc}
 80087d8:	20000938 	.word	0x20000938

080087dc <sbrk_aligned>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4e0e      	ldr	r6, [pc, #56]	; (8008818 <sbrk_aligned+0x3c>)
 80087e0:	460c      	mov	r4, r1
 80087e2:	6831      	ldr	r1, [r6, #0]
 80087e4:	4605      	mov	r5, r0
 80087e6:	b911      	cbnz	r1, 80087ee <sbrk_aligned+0x12>
 80087e8:	f000 f88c 	bl	8008904 <_sbrk_r>
 80087ec:	6030      	str	r0, [r6, #0]
 80087ee:	4621      	mov	r1, r4
 80087f0:	4628      	mov	r0, r5
 80087f2:	f000 f887 	bl	8008904 <_sbrk_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d00a      	beq.n	8008810 <sbrk_aligned+0x34>
 80087fa:	1cc4      	adds	r4, r0, #3
 80087fc:	f024 0403 	bic.w	r4, r4, #3
 8008800:	42a0      	cmp	r0, r4
 8008802:	d007      	beq.n	8008814 <sbrk_aligned+0x38>
 8008804:	1a21      	subs	r1, r4, r0
 8008806:	4628      	mov	r0, r5
 8008808:	f000 f87c 	bl	8008904 <_sbrk_r>
 800880c:	3001      	adds	r0, #1
 800880e:	d101      	bne.n	8008814 <sbrk_aligned+0x38>
 8008810:	f04f 34ff 	mov.w	r4, #4294967295
 8008814:	4620      	mov	r0, r4
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	2000093c 	.word	0x2000093c

0800881c <_malloc_r>:
 800881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008820:	1ccd      	adds	r5, r1, #3
 8008822:	f025 0503 	bic.w	r5, r5, #3
 8008826:	3508      	adds	r5, #8
 8008828:	2d0c      	cmp	r5, #12
 800882a:	bf38      	it	cc
 800882c:	250c      	movcc	r5, #12
 800882e:	2d00      	cmp	r5, #0
 8008830:	4607      	mov	r7, r0
 8008832:	db01      	blt.n	8008838 <_malloc_r+0x1c>
 8008834:	42a9      	cmp	r1, r5
 8008836:	d905      	bls.n	8008844 <_malloc_r+0x28>
 8008838:	230c      	movs	r3, #12
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	2600      	movs	r6, #0
 800883e:	4630      	mov	r0, r6
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	4e2e      	ldr	r6, [pc, #184]	; (8008900 <_malloc_r+0xe4>)
 8008846:	f000 f88d 	bl	8008964 <__malloc_lock>
 800884a:	6833      	ldr	r3, [r6, #0]
 800884c:	461c      	mov	r4, r3
 800884e:	bb34      	cbnz	r4, 800889e <_malloc_r+0x82>
 8008850:	4629      	mov	r1, r5
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff ffc2 	bl	80087dc <sbrk_aligned>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	4604      	mov	r4, r0
 800885c:	d14d      	bne.n	80088fa <_malloc_r+0xde>
 800885e:	6834      	ldr	r4, [r6, #0]
 8008860:	4626      	mov	r6, r4
 8008862:	2e00      	cmp	r6, #0
 8008864:	d140      	bne.n	80088e8 <_malloc_r+0xcc>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	4631      	mov	r1, r6
 800886a:	4638      	mov	r0, r7
 800886c:	eb04 0803 	add.w	r8, r4, r3
 8008870:	f000 f848 	bl	8008904 <_sbrk_r>
 8008874:	4580      	cmp	r8, r0
 8008876:	d13a      	bne.n	80088ee <_malloc_r+0xd2>
 8008878:	6821      	ldr	r1, [r4, #0]
 800887a:	3503      	adds	r5, #3
 800887c:	1a6d      	subs	r5, r5, r1
 800887e:	f025 0503 	bic.w	r5, r5, #3
 8008882:	3508      	adds	r5, #8
 8008884:	2d0c      	cmp	r5, #12
 8008886:	bf38      	it	cc
 8008888:	250c      	movcc	r5, #12
 800888a:	4629      	mov	r1, r5
 800888c:	4638      	mov	r0, r7
 800888e:	f7ff ffa5 	bl	80087dc <sbrk_aligned>
 8008892:	3001      	adds	r0, #1
 8008894:	d02b      	beq.n	80088ee <_malloc_r+0xd2>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	442b      	add	r3, r5
 800889a:	6023      	str	r3, [r4, #0]
 800889c:	e00e      	b.n	80088bc <_malloc_r+0xa0>
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	1b52      	subs	r2, r2, r5
 80088a2:	d41e      	bmi.n	80088e2 <_malloc_r+0xc6>
 80088a4:	2a0b      	cmp	r2, #11
 80088a6:	d916      	bls.n	80088d6 <_malloc_r+0xba>
 80088a8:	1961      	adds	r1, r4, r5
 80088aa:	42a3      	cmp	r3, r4
 80088ac:	6025      	str	r5, [r4, #0]
 80088ae:	bf18      	it	ne
 80088b0:	6059      	strne	r1, [r3, #4]
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	bf08      	it	eq
 80088b6:	6031      	streq	r1, [r6, #0]
 80088b8:	5162      	str	r2, [r4, r5]
 80088ba:	604b      	str	r3, [r1, #4]
 80088bc:	4638      	mov	r0, r7
 80088be:	f104 060b 	add.w	r6, r4, #11
 80088c2:	f000 f855 	bl	8008970 <__malloc_unlock>
 80088c6:	f026 0607 	bic.w	r6, r6, #7
 80088ca:	1d23      	adds	r3, r4, #4
 80088cc:	1af2      	subs	r2, r6, r3
 80088ce:	d0b6      	beq.n	800883e <_malloc_r+0x22>
 80088d0:	1b9b      	subs	r3, r3, r6
 80088d2:	50a3      	str	r3, [r4, r2]
 80088d4:	e7b3      	b.n	800883e <_malloc_r+0x22>
 80088d6:	6862      	ldr	r2, [r4, #4]
 80088d8:	42a3      	cmp	r3, r4
 80088da:	bf0c      	ite	eq
 80088dc:	6032      	streq	r2, [r6, #0]
 80088de:	605a      	strne	r2, [r3, #4]
 80088e0:	e7ec      	b.n	80088bc <_malloc_r+0xa0>
 80088e2:	4623      	mov	r3, r4
 80088e4:	6864      	ldr	r4, [r4, #4]
 80088e6:	e7b2      	b.n	800884e <_malloc_r+0x32>
 80088e8:	4634      	mov	r4, r6
 80088ea:	6876      	ldr	r6, [r6, #4]
 80088ec:	e7b9      	b.n	8008862 <_malloc_r+0x46>
 80088ee:	230c      	movs	r3, #12
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	4638      	mov	r0, r7
 80088f4:	f000 f83c 	bl	8008970 <__malloc_unlock>
 80088f8:	e7a1      	b.n	800883e <_malloc_r+0x22>
 80088fa:	6025      	str	r5, [r4, #0]
 80088fc:	e7de      	b.n	80088bc <_malloc_r+0xa0>
 80088fe:	bf00      	nop
 8008900:	20000938 	.word	0x20000938

08008904 <_sbrk_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4d06      	ldr	r5, [pc, #24]	; (8008920 <_sbrk_r+0x1c>)
 8008908:	2300      	movs	r3, #0
 800890a:	4604      	mov	r4, r0
 800890c:	4608      	mov	r0, r1
 800890e:	602b      	str	r3, [r5, #0]
 8008910:	f7f8 fb5a 	bl	8000fc8 <_sbrk>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_sbrk_r+0x1a>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_sbrk_r+0x1a>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	20000940 	.word	0x20000940

08008924 <siprintf>:
 8008924:	b40e      	push	{r1, r2, r3}
 8008926:	b500      	push	{lr}
 8008928:	b09c      	sub	sp, #112	; 0x70
 800892a:	ab1d      	add	r3, sp, #116	; 0x74
 800892c:	9002      	str	r0, [sp, #8]
 800892e:	9006      	str	r0, [sp, #24]
 8008930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008934:	4809      	ldr	r0, [pc, #36]	; (800895c <siprintf+0x38>)
 8008936:	9107      	str	r1, [sp, #28]
 8008938:	9104      	str	r1, [sp, #16]
 800893a:	4909      	ldr	r1, [pc, #36]	; (8008960 <siprintf+0x3c>)
 800893c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008940:	9105      	str	r1, [sp, #20]
 8008942:	6800      	ldr	r0, [r0, #0]
 8008944:	9301      	str	r3, [sp, #4]
 8008946:	a902      	add	r1, sp, #8
 8008948:	f000 f874 	bl	8008a34 <_svfiprintf_r>
 800894c:	9b02      	ldr	r3, [sp, #8]
 800894e:	2200      	movs	r2, #0
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	b01c      	add	sp, #112	; 0x70
 8008954:	f85d eb04 	ldr.w	lr, [sp], #4
 8008958:	b003      	add	sp, #12
 800895a:	4770      	bx	lr
 800895c:	2000002c 	.word	0x2000002c
 8008960:	ffff0208 	.word	0xffff0208

08008964 <__malloc_lock>:
 8008964:	4801      	ldr	r0, [pc, #4]	; (800896c <__malloc_lock+0x8>)
 8008966:	f000 baf9 	b.w	8008f5c <__retarget_lock_acquire_recursive>
 800896a:	bf00      	nop
 800896c:	20000944 	.word	0x20000944

08008970 <__malloc_unlock>:
 8008970:	4801      	ldr	r0, [pc, #4]	; (8008978 <__malloc_unlock+0x8>)
 8008972:	f000 baf4 	b.w	8008f5e <__retarget_lock_release_recursive>
 8008976:	bf00      	nop
 8008978:	20000944 	.word	0x20000944

0800897c <__ssputs_r>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	688e      	ldr	r6, [r1, #8]
 8008982:	429e      	cmp	r6, r3
 8008984:	4682      	mov	sl, r0
 8008986:	460c      	mov	r4, r1
 8008988:	4690      	mov	r8, r2
 800898a:	461f      	mov	r7, r3
 800898c:	d838      	bhi.n	8008a00 <__ssputs_r+0x84>
 800898e:	898a      	ldrh	r2, [r1, #12]
 8008990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008994:	d032      	beq.n	80089fc <__ssputs_r+0x80>
 8008996:	6825      	ldr	r5, [r4, #0]
 8008998:	6909      	ldr	r1, [r1, #16]
 800899a:	eba5 0901 	sub.w	r9, r5, r1
 800899e:	6965      	ldr	r5, [r4, #20]
 80089a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089a8:	3301      	adds	r3, #1
 80089aa:	444b      	add	r3, r9
 80089ac:	106d      	asrs	r5, r5, #1
 80089ae:	429d      	cmp	r5, r3
 80089b0:	bf38      	it	cc
 80089b2:	461d      	movcc	r5, r3
 80089b4:	0553      	lsls	r3, r2, #21
 80089b6:	d531      	bpl.n	8008a1c <__ssputs_r+0xa0>
 80089b8:	4629      	mov	r1, r5
 80089ba:	f7ff ff2f 	bl	800881c <_malloc_r>
 80089be:	4606      	mov	r6, r0
 80089c0:	b950      	cbnz	r0, 80089d8 <__ssputs_r+0x5c>
 80089c2:	230c      	movs	r3, #12
 80089c4:	f8ca 3000 	str.w	r3, [sl]
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	f04f 30ff 	mov.w	r0, #4294967295
 80089d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d8:	6921      	ldr	r1, [r4, #16]
 80089da:	464a      	mov	r2, r9
 80089dc:	f000 fac0 	bl	8008f60 <memcpy>
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	6126      	str	r6, [r4, #16]
 80089ee:	6165      	str	r5, [r4, #20]
 80089f0:	444e      	add	r6, r9
 80089f2:	eba5 0509 	sub.w	r5, r5, r9
 80089f6:	6026      	str	r6, [r4, #0]
 80089f8:	60a5      	str	r5, [r4, #8]
 80089fa:	463e      	mov	r6, r7
 80089fc:	42be      	cmp	r6, r7
 80089fe:	d900      	bls.n	8008a02 <__ssputs_r+0x86>
 8008a00:	463e      	mov	r6, r7
 8008a02:	6820      	ldr	r0, [r4, #0]
 8008a04:	4632      	mov	r2, r6
 8008a06:	4641      	mov	r1, r8
 8008a08:	f000 fab8 	bl	8008f7c <memmove>
 8008a0c:	68a3      	ldr	r3, [r4, #8]
 8008a0e:	1b9b      	subs	r3, r3, r6
 8008a10:	60a3      	str	r3, [r4, #8]
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	4433      	add	r3, r6
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	2000      	movs	r0, #0
 8008a1a:	e7db      	b.n	80089d4 <__ssputs_r+0x58>
 8008a1c:	462a      	mov	r2, r5
 8008a1e:	f000 fac7 	bl	8008fb0 <_realloc_r>
 8008a22:	4606      	mov	r6, r0
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d1e1      	bne.n	80089ec <__ssputs_r+0x70>
 8008a28:	6921      	ldr	r1, [r4, #16]
 8008a2a:	4650      	mov	r0, sl
 8008a2c:	f7ff fe8a 	bl	8008744 <_free_r>
 8008a30:	e7c7      	b.n	80089c2 <__ssputs_r+0x46>
	...

08008a34 <_svfiprintf_r>:
 8008a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	4698      	mov	r8, r3
 8008a3a:	898b      	ldrh	r3, [r1, #12]
 8008a3c:	061b      	lsls	r3, r3, #24
 8008a3e:	b09d      	sub	sp, #116	; 0x74
 8008a40:	4607      	mov	r7, r0
 8008a42:	460d      	mov	r5, r1
 8008a44:	4614      	mov	r4, r2
 8008a46:	d50e      	bpl.n	8008a66 <_svfiprintf_r+0x32>
 8008a48:	690b      	ldr	r3, [r1, #16]
 8008a4a:	b963      	cbnz	r3, 8008a66 <_svfiprintf_r+0x32>
 8008a4c:	2140      	movs	r1, #64	; 0x40
 8008a4e:	f7ff fee5 	bl	800881c <_malloc_r>
 8008a52:	6028      	str	r0, [r5, #0]
 8008a54:	6128      	str	r0, [r5, #16]
 8008a56:	b920      	cbnz	r0, 8008a62 <_svfiprintf_r+0x2e>
 8008a58:	230c      	movs	r3, #12
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a60:	e0d1      	b.n	8008c06 <_svfiprintf_r+0x1d2>
 8008a62:	2340      	movs	r3, #64	; 0x40
 8008a64:	616b      	str	r3, [r5, #20]
 8008a66:	2300      	movs	r3, #0
 8008a68:	9309      	str	r3, [sp, #36]	; 0x24
 8008a6a:	2320      	movs	r3, #32
 8008a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a74:	2330      	movs	r3, #48	; 0x30
 8008a76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c20 <_svfiprintf_r+0x1ec>
 8008a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a7e:	f04f 0901 	mov.w	r9, #1
 8008a82:	4623      	mov	r3, r4
 8008a84:	469a      	mov	sl, r3
 8008a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a8a:	b10a      	cbz	r2, 8008a90 <_svfiprintf_r+0x5c>
 8008a8c:	2a25      	cmp	r2, #37	; 0x25
 8008a8e:	d1f9      	bne.n	8008a84 <_svfiprintf_r+0x50>
 8008a90:	ebba 0b04 	subs.w	fp, sl, r4
 8008a94:	d00b      	beq.n	8008aae <_svfiprintf_r+0x7a>
 8008a96:	465b      	mov	r3, fp
 8008a98:	4622      	mov	r2, r4
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f7ff ff6d 	bl	800897c <__ssputs_r>
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	f000 80aa 	beq.w	8008bfc <_svfiprintf_r+0x1c8>
 8008aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aaa:	445a      	add	r2, fp
 8008aac:	9209      	str	r2, [sp, #36]	; 0x24
 8008aae:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 80a2 	beq.w	8008bfc <_svfiprintf_r+0x1c8>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f04f 32ff 	mov.w	r2, #4294967295
 8008abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ac2:	f10a 0a01 	add.w	sl, sl, #1
 8008ac6:	9304      	str	r3, [sp, #16]
 8008ac8:	9307      	str	r3, [sp, #28]
 8008aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ace:	931a      	str	r3, [sp, #104]	; 0x68
 8008ad0:	4654      	mov	r4, sl
 8008ad2:	2205      	movs	r2, #5
 8008ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad8:	4851      	ldr	r0, [pc, #324]	; (8008c20 <_svfiprintf_r+0x1ec>)
 8008ada:	f7f7 fb81 	bl	80001e0 <memchr>
 8008ade:	9a04      	ldr	r2, [sp, #16]
 8008ae0:	b9d8      	cbnz	r0, 8008b1a <_svfiprintf_r+0xe6>
 8008ae2:	06d0      	lsls	r0, r2, #27
 8008ae4:	bf44      	itt	mi
 8008ae6:	2320      	movmi	r3, #32
 8008ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aec:	0711      	lsls	r1, r2, #28
 8008aee:	bf44      	itt	mi
 8008af0:	232b      	movmi	r3, #43	; 0x2b
 8008af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af6:	f89a 3000 	ldrb.w	r3, [sl]
 8008afa:	2b2a      	cmp	r3, #42	; 0x2a
 8008afc:	d015      	beq.n	8008b2a <_svfiprintf_r+0xf6>
 8008afe:	9a07      	ldr	r2, [sp, #28]
 8008b00:	4654      	mov	r4, sl
 8008b02:	2000      	movs	r0, #0
 8008b04:	f04f 0c0a 	mov.w	ip, #10
 8008b08:	4621      	mov	r1, r4
 8008b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b0e:	3b30      	subs	r3, #48	; 0x30
 8008b10:	2b09      	cmp	r3, #9
 8008b12:	d94e      	bls.n	8008bb2 <_svfiprintf_r+0x17e>
 8008b14:	b1b0      	cbz	r0, 8008b44 <_svfiprintf_r+0x110>
 8008b16:	9207      	str	r2, [sp, #28]
 8008b18:	e014      	b.n	8008b44 <_svfiprintf_r+0x110>
 8008b1a:	eba0 0308 	sub.w	r3, r0, r8
 8008b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8008b22:	4313      	orrs	r3, r2
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	46a2      	mov	sl, r4
 8008b28:	e7d2      	b.n	8008ad0 <_svfiprintf_r+0x9c>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	1d19      	adds	r1, r3, #4
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	9103      	str	r1, [sp, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bfbb      	ittet	lt
 8008b36:	425b      	neglt	r3, r3
 8008b38:	f042 0202 	orrlt.w	r2, r2, #2
 8008b3c:	9307      	strge	r3, [sp, #28]
 8008b3e:	9307      	strlt	r3, [sp, #28]
 8008b40:	bfb8      	it	lt
 8008b42:	9204      	strlt	r2, [sp, #16]
 8008b44:	7823      	ldrb	r3, [r4, #0]
 8008b46:	2b2e      	cmp	r3, #46	; 0x2e
 8008b48:	d10c      	bne.n	8008b64 <_svfiprintf_r+0x130>
 8008b4a:	7863      	ldrb	r3, [r4, #1]
 8008b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b4e:	d135      	bne.n	8008bbc <_svfiprintf_r+0x188>
 8008b50:	9b03      	ldr	r3, [sp, #12]
 8008b52:	1d1a      	adds	r2, r3, #4
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	9203      	str	r2, [sp, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bfb8      	it	lt
 8008b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b60:	3402      	adds	r4, #2
 8008b62:	9305      	str	r3, [sp, #20]
 8008b64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c30 <_svfiprintf_r+0x1fc>
 8008b68:	7821      	ldrb	r1, [r4, #0]
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	f7f7 fb37 	bl	80001e0 <memchr>
 8008b72:	b140      	cbz	r0, 8008b86 <_svfiprintf_r+0x152>
 8008b74:	2340      	movs	r3, #64	; 0x40
 8008b76:	eba0 000a 	sub.w	r0, r0, sl
 8008b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8008b7e:	9b04      	ldr	r3, [sp, #16]
 8008b80:	4303      	orrs	r3, r0
 8008b82:	3401      	adds	r4, #1
 8008b84:	9304      	str	r3, [sp, #16]
 8008b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8a:	4826      	ldr	r0, [pc, #152]	; (8008c24 <_svfiprintf_r+0x1f0>)
 8008b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b90:	2206      	movs	r2, #6
 8008b92:	f7f7 fb25 	bl	80001e0 <memchr>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d038      	beq.n	8008c0c <_svfiprintf_r+0x1d8>
 8008b9a:	4b23      	ldr	r3, [pc, #140]	; (8008c28 <_svfiprintf_r+0x1f4>)
 8008b9c:	bb1b      	cbnz	r3, 8008be6 <_svfiprintf_r+0x1b2>
 8008b9e:	9b03      	ldr	r3, [sp, #12]
 8008ba0:	3307      	adds	r3, #7
 8008ba2:	f023 0307 	bic.w	r3, r3, #7
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	9303      	str	r3, [sp, #12]
 8008baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bac:	4433      	add	r3, r6
 8008bae:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb0:	e767      	b.n	8008a82 <_svfiprintf_r+0x4e>
 8008bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	2001      	movs	r0, #1
 8008bba:	e7a5      	b.n	8008b08 <_svfiprintf_r+0xd4>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	3401      	adds	r4, #1
 8008bc0:	9305      	str	r3, [sp, #20]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	f04f 0c0a 	mov.w	ip, #10
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bce:	3a30      	subs	r2, #48	; 0x30
 8008bd0:	2a09      	cmp	r2, #9
 8008bd2:	d903      	bls.n	8008bdc <_svfiprintf_r+0x1a8>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0c5      	beq.n	8008b64 <_svfiprintf_r+0x130>
 8008bd8:	9105      	str	r1, [sp, #20]
 8008bda:	e7c3      	b.n	8008b64 <_svfiprintf_r+0x130>
 8008bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008be0:	4604      	mov	r4, r0
 8008be2:	2301      	movs	r3, #1
 8008be4:	e7f0      	b.n	8008bc8 <_svfiprintf_r+0x194>
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	462a      	mov	r2, r5
 8008bec:	4b0f      	ldr	r3, [pc, #60]	; (8008c2c <_svfiprintf_r+0x1f8>)
 8008bee:	a904      	add	r1, sp, #16
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	f3af 8000 	nop.w
 8008bf6:	1c42      	adds	r2, r0, #1
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	d1d6      	bne.n	8008baa <_svfiprintf_r+0x176>
 8008bfc:	89ab      	ldrh	r3, [r5, #12]
 8008bfe:	065b      	lsls	r3, r3, #25
 8008c00:	f53f af2c 	bmi.w	8008a5c <_svfiprintf_r+0x28>
 8008c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c06:	b01d      	add	sp, #116	; 0x74
 8008c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0c:	ab03      	add	r3, sp, #12
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	462a      	mov	r2, r5
 8008c12:	4b06      	ldr	r3, [pc, #24]	; (8008c2c <_svfiprintf_r+0x1f8>)
 8008c14:	a904      	add	r1, sp, #16
 8008c16:	4638      	mov	r0, r7
 8008c18:	f000 f87a 	bl	8008d10 <_printf_i>
 8008c1c:	e7eb      	b.n	8008bf6 <_svfiprintf_r+0x1c2>
 8008c1e:	bf00      	nop
 8008c20:	0800908c 	.word	0x0800908c
 8008c24:	08009096 	.word	0x08009096
 8008c28:	00000000 	.word	0x00000000
 8008c2c:	0800897d 	.word	0x0800897d
 8008c30:	08009092 	.word	0x08009092

08008c34 <_printf_common>:
 8008c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c38:	4616      	mov	r6, r2
 8008c3a:	4699      	mov	r9, r3
 8008c3c:	688a      	ldr	r2, [r1, #8]
 8008c3e:	690b      	ldr	r3, [r1, #16]
 8008c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c44:	4293      	cmp	r3, r2
 8008c46:	bfb8      	it	lt
 8008c48:	4613      	movlt	r3, r2
 8008c4a:	6033      	str	r3, [r6, #0]
 8008c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c50:	4607      	mov	r7, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	b10a      	cbz	r2, 8008c5a <_printf_common+0x26>
 8008c56:	3301      	adds	r3, #1
 8008c58:	6033      	str	r3, [r6, #0]
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	0699      	lsls	r1, r3, #26
 8008c5e:	bf42      	ittt	mi
 8008c60:	6833      	ldrmi	r3, [r6, #0]
 8008c62:	3302      	addmi	r3, #2
 8008c64:	6033      	strmi	r3, [r6, #0]
 8008c66:	6825      	ldr	r5, [r4, #0]
 8008c68:	f015 0506 	ands.w	r5, r5, #6
 8008c6c:	d106      	bne.n	8008c7c <_printf_common+0x48>
 8008c6e:	f104 0a19 	add.w	sl, r4, #25
 8008c72:	68e3      	ldr	r3, [r4, #12]
 8008c74:	6832      	ldr	r2, [r6, #0]
 8008c76:	1a9b      	subs	r3, r3, r2
 8008c78:	42ab      	cmp	r3, r5
 8008c7a:	dc26      	bgt.n	8008cca <_printf_common+0x96>
 8008c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c80:	1e13      	subs	r3, r2, #0
 8008c82:	6822      	ldr	r2, [r4, #0]
 8008c84:	bf18      	it	ne
 8008c86:	2301      	movne	r3, #1
 8008c88:	0692      	lsls	r2, r2, #26
 8008c8a:	d42b      	bmi.n	8008ce4 <_printf_common+0xb0>
 8008c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c90:	4649      	mov	r1, r9
 8008c92:	4638      	mov	r0, r7
 8008c94:	47c0      	blx	r8
 8008c96:	3001      	adds	r0, #1
 8008c98:	d01e      	beq.n	8008cd8 <_printf_common+0xa4>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	68e5      	ldr	r5, [r4, #12]
 8008c9e:	6832      	ldr	r2, [r6, #0]
 8008ca0:	f003 0306 	and.w	r3, r3, #6
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	bf08      	it	eq
 8008ca8:	1aad      	subeq	r5, r5, r2
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	6922      	ldr	r2, [r4, #16]
 8008cae:	bf0c      	ite	eq
 8008cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cb4:	2500      	movne	r5, #0
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	bfc4      	itt	gt
 8008cba:	1a9b      	subgt	r3, r3, r2
 8008cbc:	18ed      	addgt	r5, r5, r3
 8008cbe:	2600      	movs	r6, #0
 8008cc0:	341a      	adds	r4, #26
 8008cc2:	42b5      	cmp	r5, r6
 8008cc4:	d11a      	bne.n	8008cfc <_printf_common+0xc8>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	e008      	b.n	8008cdc <_printf_common+0xa8>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	4652      	mov	r2, sl
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	47c0      	blx	r8
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d103      	bne.n	8008ce0 <_printf_common+0xac>
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce0:	3501      	adds	r5, #1
 8008ce2:	e7c6      	b.n	8008c72 <_printf_common+0x3e>
 8008ce4:	18e1      	adds	r1, r4, r3
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	2030      	movs	r0, #48	; 0x30
 8008cea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cee:	4422      	add	r2, r4
 8008cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cf8:	3302      	adds	r3, #2
 8008cfa:	e7c7      	b.n	8008c8c <_printf_common+0x58>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	4622      	mov	r2, r4
 8008d00:	4649      	mov	r1, r9
 8008d02:	4638      	mov	r0, r7
 8008d04:	47c0      	blx	r8
 8008d06:	3001      	adds	r0, #1
 8008d08:	d0e6      	beq.n	8008cd8 <_printf_common+0xa4>
 8008d0a:	3601      	adds	r6, #1
 8008d0c:	e7d9      	b.n	8008cc2 <_printf_common+0x8e>
	...

08008d10 <_printf_i>:
 8008d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	7e0f      	ldrb	r7, [r1, #24]
 8008d16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d18:	2f78      	cmp	r7, #120	; 0x78
 8008d1a:	4691      	mov	r9, r2
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	469a      	mov	sl, r3
 8008d22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d26:	d807      	bhi.n	8008d38 <_printf_i+0x28>
 8008d28:	2f62      	cmp	r7, #98	; 0x62
 8008d2a:	d80a      	bhi.n	8008d42 <_printf_i+0x32>
 8008d2c:	2f00      	cmp	r7, #0
 8008d2e:	f000 80d8 	beq.w	8008ee2 <_printf_i+0x1d2>
 8008d32:	2f58      	cmp	r7, #88	; 0x58
 8008d34:	f000 80a3 	beq.w	8008e7e <_printf_i+0x16e>
 8008d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d40:	e03a      	b.n	8008db8 <_printf_i+0xa8>
 8008d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d46:	2b15      	cmp	r3, #21
 8008d48:	d8f6      	bhi.n	8008d38 <_printf_i+0x28>
 8008d4a:	a101      	add	r1, pc, #4	; (adr r1, 8008d50 <_printf_i+0x40>)
 8008d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d50:	08008da9 	.word	0x08008da9
 8008d54:	08008dbd 	.word	0x08008dbd
 8008d58:	08008d39 	.word	0x08008d39
 8008d5c:	08008d39 	.word	0x08008d39
 8008d60:	08008d39 	.word	0x08008d39
 8008d64:	08008d39 	.word	0x08008d39
 8008d68:	08008dbd 	.word	0x08008dbd
 8008d6c:	08008d39 	.word	0x08008d39
 8008d70:	08008d39 	.word	0x08008d39
 8008d74:	08008d39 	.word	0x08008d39
 8008d78:	08008d39 	.word	0x08008d39
 8008d7c:	08008ec9 	.word	0x08008ec9
 8008d80:	08008ded 	.word	0x08008ded
 8008d84:	08008eab 	.word	0x08008eab
 8008d88:	08008d39 	.word	0x08008d39
 8008d8c:	08008d39 	.word	0x08008d39
 8008d90:	08008eeb 	.word	0x08008eeb
 8008d94:	08008d39 	.word	0x08008d39
 8008d98:	08008ded 	.word	0x08008ded
 8008d9c:	08008d39 	.word	0x08008d39
 8008da0:	08008d39 	.word	0x08008d39
 8008da4:	08008eb3 	.word	0x08008eb3
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	1d1a      	adds	r2, r3, #4
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	602a      	str	r2, [r5, #0]
 8008db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008db8:	2301      	movs	r3, #1
 8008dba:	e0a3      	b.n	8008f04 <_printf_i+0x1f4>
 8008dbc:	6820      	ldr	r0, [r4, #0]
 8008dbe:	6829      	ldr	r1, [r5, #0]
 8008dc0:	0606      	lsls	r6, r0, #24
 8008dc2:	f101 0304 	add.w	r3, r1, #4
 8008dc6:	d50a      	bpl.n	8008dde <_printf_i+0xce>
 8008dc8:	680e      	ldr	r6, [r1, #0]
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	2e00      	cmp	r6, #0
 8008dce:	da03      	bge.n	8008dd8 <_printf_i+0xc8>
 8008dd0:	232d      	movs	r3, #45	; 0x2d
 8008dd2:	4276      	negs	r6, r6
 8008dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd8:	485e      	ldr	r0, [pc, #376]	; (8008f54 <_printf_i+0x244>)
 8008dda:	230a      	movs	r3, #10
 8008ddc:	e019      	b.n	8008e12 <_printf_i+0x102>
 8008dde:	680e      	ldr	r6, [r1, #0]
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008de6:	bf18      	it	ne
 8008de8:	b236      	sxthne	r6, r6
 8008dea:	e7ef      	b.n	8008dcc <_printf_i+0xbc>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	6820      	ldr	r0, [r4, #0]
 8008df0:	1d19      	adds	r1, r3, #4
 8008df2:	6029      	str	r1, [r5, #0]
 8008df4:	0601      	lsls	r1, r0, #24
 8008df6:	d501      	bpl.n	8008dfc <_printf_i+0xec>
 8008df8:	681e      	ldr	r6, [r3, #0]
 8008dfa:	e002      	b.n	8008e02 <_printf_i+0xf2>
 8008dfc:	0646      	lsls	r6, r0, #25
 8008dfe:	d5fb      	bpl.n	8008df8 <_printf_i+0xe8>
 8008e00:	881e      	ldrh	r6, [r3, #0]
 8008e02:	4854      	ldr	r0, [pc, #336]	; (8008f54 <_printf_i+0x244>)
 8008e04:	2f6f      	cmp	r7, #111	; 0x6f
 8008e06:	bf0c      	ite	eq
 8008e08:	2308      	moveq	r3, #8
 8008e0a:	230a      	movne	r3, #10
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e12:	6865      	ldr	r5, [r4, #4]
 8008e14:	60a5      	str	r5, [r4, #8]
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	bfa2      	ittt	ge
 8008e1a:	6821      	ldrge	r1, [r4, #0]
 8008e1c:	f021 0104 	bicge.w	r1, r1, #4
 8008e20:	6021      	strge	r1, [r4, #0]
 8008e22:	b90e      	cbnz	r6, 8008e28 <_printf_i+0x118>
 8008e24:	2d00      	cmp	r5, #0
 8008e26:	d04d      	beq.n	8008ec4 <_printf_i+0x1b4>
 8008e28:	4615      	mov	r5, r2
 8008e2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e2e:	fb03 6711 	mls	r7, r3, r1, r6
 8008e32:	5dc7      	ldrb	r7, [r0, r7]
 8008e34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e38:	4637      	mov	r7, r6
 8008e3a:	42bb      	cmp	r3, r7
 8008e3c:	460e      	mov	r6, r1
 8008e3e:	d9f4      	bls.n	8008e2a <_printf_i+0x11a>
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d10b      	bne.n	8008e5c <_printf_i+0x14c>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	07de      	lsls	r6, r3, #31
 8008e48:	d508      	bpl.n	8008e5c <_printf_i+0x14c>
 8008e4a:	6923      	ldr	r3, [r4, #16]
 8008e4c:	6861      	ldr	r1, [r4, #4]
 8008e4e:	4299      	cmp	r1, r3
 8008e50:	bfde      	ittt	le
 8008e52:	2330      	movle	r3, #48	; 0x30
 8008e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e5c:	1b52      	subs	r2, r2, r5
 8008e5e:	6122      	str	r2, [r4, #16]
 8008e60:	f8cd a000 	str.w	sl, [sp]
 8008e64:	464b      	mov	r3, r9
 8008e66:	aa03      	add	r2, sp, #12
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	f7ff fee2 	bl	8008c34 <_printf_common>
 8008e70:	3001      	adds	r0, #1
 8008e72:	d14c      	bne.n	8008f0e <_printf_i+0x1fe>
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	b004      	add	sp, #16
 8008e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7e:	4835      	ldr	r0, [pc, #212]	; (8008f54 <_printf_i+0x244>)
 8008e80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e84:	6829      	ldr	r1, [r5, #0]
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e8c:	6029      	str	r1, [r5, #0]
 8008e8e:	061d      	lsls	r5, r3, #24
 8008e90:	d514      	bpl.n	8008ebc <_printf_i+0x1ac>
 8008e92:	07df      	lsls	r7, r3, #31
 8008e94:	bf44      	itt	mi
 8008e96:	f043 0320 	orrmi.w	r3, r3, #32
 8008e9a:	6023      	strmi	r3, [r4, #0]
 8008e9c:	b91e      	cbnz	r6, 8008ea6 <_printf_i+0x196>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	f023 0320 	bic.w	r3, r3, #32
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	2310      	movs	r3, #16
 8008ea8:	e7b0      	b.n	8008e0c <_printf_i+0xfc>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	f043 0320 	orr.w	r3, r3, #32
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	2378      	movs	r3, #120	; 0x78
 8008eb4:	4828      	ldr	r0, [pc, #160]	; (8008f58 <_printf_i+0x248>)
 8008eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008eba:	e7e3      	b.n	8008e84 <_printf_i+0x174>
 8008ebc:	0659      	lsls	r1, r3, #25
 8008ebe:	bf48      	it	mi
 8008ec0:	b2b6      	uxthmi	r6, r6
 8008ec2:	e7e6      	b.n	8008e92 <_printf_i+0x182>
 8008ec4:	4615      	mov	r5, r2
 8008ec6:	e7bb      	b.n	8008e40 <_printf_i+0x130>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	6826      	ldr	r6, [r4, #0]
 8008ecc:	6961      	ldr	r1, [r4, #20]
 8008ece:	1d18      	adds	r0, r3, #4
 8008ed0:	6028      	str	r0, [r5, #0]
 8008ed2:	0635      	lsls	r5, r6, #24
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	d501      	bpl.n	8008edc <_printf_i+0x1cc>
 8008ed8:	6019      	str	r1, [r3, #0]
 8008eda:	e002      	b.n	8008ee2 <_printf_i+0x1d2>
 8008edc:	0670      	lsls	r0, r6, #25
 8008ede:	d5fb      	bpl.n	8008ed8 <_printf_i+0x1c8>
 8008ee0:	8019      	strh	r1, [r3, #0]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6123      	str	r3, [r4, #16]
 8008ee6:	4615      	mov	r5, r2
 8008ee8:	e7ba      	b.n	8008e60 <_printf_i+0x150>
 8008eea:	682b      	ldr	r3, [r5, #0]
 8008eec:	1d1a      	adds	r2, r3, #4
 8008eee:	602a      	str	r2, [r5, #0]
 8008ef0:	681d      	ldr	r5, [r3, #0]
 8008ef2:	6862      	ldr	r2, [r4, #4]
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f7f7 f972 	bl	80001e0 <memchr>
 8008efc:	b108      	cbz	r0, 8008f02 <_printf_i+0x1f2>
 8008efe:	1b40      	subs	r0, r0, r5
 8008f00:	6060      	str	r0, [r4, #4]
 8008f02:	6863      	ldr	r3, [r4, #4]
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	2300      	movs	r3, #0
 8008f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f0c:	e7a8      	b.n	8008e60 <_printf_i+0x150>
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	462a      	mov	r2, r5
 8008f12:	4649      	mov	r1, r9
 8008f14:	4640      	mov	r0, r8
 8008f16:	47d0      	blx	sl
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d0ab      	beq.n	8008e74 <_printf_i+0x164>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	079b      	lsls	r3, r3, #30
 8008f20:	d413      	bmi.n	8008f4a <_printf_i+0x23a>
 8008f22:	68e0      	ldr	r0, [r4, #12]
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	4298      	cmp	r0, r3
 8008f28:	bfb8      	it	lt
 8008f2a:	4618      	movlt	r0, r3
 8008f2c:	e7a4      	b.n	8008e78 <_printf_i+0x168>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4632      	mov	r2, r6
 8008f32:	4649      	mov	r1, r9
 8008f34:	4640      	mov	r0, r8
 8008f36:	47d0      	blx	sl
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d09b      	beq.n	8008e74 <_printf_i+0x164>
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	68e3      	ldr	r3, [r4, #12]
 8008f40:	9903      	ldr	r1, [sp, #12]
 8008f42:	1a5b      	subs	r3, r3, r1
 8008f44:	42ab      	cmp	r3, r5
 8008f46:	dcf2      	bgt.n	8008f2e <_printf_i+0x21e>
 8008f48:	e7eb      	b.n	8008f22 <_printf_i+0x212>
 8008f4a:	2500      	movs	r5, #0
 8008f4c:	f104 0619 	add.w	r6, r4, #25
 8008f50:	e7f5      	b.n	8008f3e <_printf_i+0x22e>
 8008f52:	bf00      	nop
 8008f54:	0800909d 	.word	0x0800909d
 8008f58:	080090ae 	.word	0x080090ae

08008f5c <__retarget_lock_acquire_recursive>:
 8008f5c:	4770      	bx	lr

08008f5e <__retarget_lock_release_recursive>:
 8008f5e:	4770      	bx	lr

08008f60 <memcpy>:
 8008f60:	440a      	add	r2, r1
 8008f62:	4291      	cmp	r1, r2
 8008f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f68:	d100      	bne.n	8008f6c <memcpy+0xc>
 8008f6a:	4770      	bx	lr
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f76:	4291      	cmp	r1, r2
 8008f78:	d1f9      	bne.n	8008f6e <memcpy+0xe>
 8008f7a:	bd10      	pop	{r4, pc}

08008f7c <memmove>:
 8008f7c:	4288      	cmp	r0, r1
 8008f7e:	b510      	push	{r4, lr}
 8008f80:	eb01 0402 	add.w	r4, r1, r2
 8008f84:	d902      	bls.n	8008f8c <memmove+0x10>
 8008f86:	4284      	cmp	r4, r0
 8008f88:	4623      	mov	r3, r4
 8008f8a:	d807      	bhi.n	8008f9c <memmove+0x20>
 8008f8c:	1e43      	subs	r3, r0, #1
 8008f8e:	42a1      	cmp	r1, r4
 8008f90:	d008      	beq.n	8008fa4 <memmove+0x28>
 8008f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f9a:	e7f8      	b.n	8008f8e <memmove+0x12>
 8008f9c:	4402      	add	r2, r0
 8008f9e:	4601      	mov	r1, r0
 8008fa0:	428a      	cmp	r2, r1
 8008fa2:	d100      	bne.n	8008fa6 <memmove+0x2a>
 8008fa4:	bd10      	pop	{r4, pc}
 8008fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fae:	e7f7      	b.n	8008fa0 <memmove+0x24>

08008fb0 <_realloc_r>:
 8008fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	460e      	mov	r6, r1
 8008fba:	b921      	cbnz	r1, 8008fc6 <_realloc_r+0x16>
 8008fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	f7ff bc2b 	b.w	800881c <_malloc_r>
 8008fc6:	b92a      	cbnz	r2, 8008fd4 <_realloc_r+0x24>
 8008fc8:	f7ff fbbc 	bl	8008744 <_free_r>
 8008fcc:	4625      	mov	r5, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd4:	f000 f81b 	bl	800900e <_malloc_usable_size_r>
 8008fd8:	4284      	cmp	r4, r0
 8008fda:	4607      	mov	r7, r0
 8008fdc:	d802      	bhi.n	8008fe4 <_realloc_r+0x34>
 8008fde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fe2:	d812      	bhi.n	800900a <_realloc_r+0x5a>
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	f7ff fc18 	bl	800881c <_malloc_r>
 8008fec:	4605      	mov	r5, r0
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d0ed      	beq.n	8008fce <_realloc_r+0x1e>
 8008ff2:	42bc      	cmp	r4, r7
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	bf28      	it	cs
 8008ffa:	463a      	movcs	r2, r7
 8008ffc:	f7ff ffb0 	bl	8008f60 <memcpy>
 8009000:	4631      	mov	r1, r6
 8009002:	4640      	mov	r0, r8
 8009004:	f7ff fb9e 	bl	8008744 <_free_r>
 8009008:	e7e1      	b.n	8008fce <_realloc_r+0x1e>
 800900a:	4635      	mov	r5, r6
 800900c:	e7df      	b.n	8008fce <_realloc_r+0x1e>

0800900e <_malloc_usable_size_r>:
 800900e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009012:	1f18      	subs	r0, r3, #4
 8009014:	2b00      	cmp	r3, #0
 8009016:	bfbc      	itt	lt
 8009018:	580b      	ldrlt	r3, [r1, r0]
 800901a:	18c0      	addlt	r0, r0, r3
 800901c:	4770      	bx	lr
	...

08009020 <_init>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	bf00      	nop
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr

0800902c <_fini>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr
