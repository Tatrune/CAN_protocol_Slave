
CAN_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008c7c  08008c7c  00018c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c98  08008c98  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca0  08008ca0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000087c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000090c  2000090c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c94  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039f2  00000000  00000000  00037d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  0003b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001108  00000000  00000000  0003c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d94  00000000  00000000  0003dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186fb  00000000  00000000  0006186c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdec9  00000000  00000000  00079f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147e30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f70  00000000  00000000  00147e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c64 	.word	0x08008c64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008c64 	.word	0x08008c64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_CAN_RxFifo1MsgPendingCallback>:
	uint32_t TxMailbox;

	int datacheck = 0;

	void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
	{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK) //add
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80004d6:	4a0f      	ldr	r2, [pc, #60]	; (8000514 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 80004d8:	2101      	movs	r1, #1
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f001 f909 	bl	80016f2 <HAL_CAN_GetRxMessage>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
		{
			Error_Handler();
 80004e6:	f000 fb25 	bl	8000b34 <Error_Handler>
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 80004f2:	f001 ff09 	bl	8002308 <HAL_GPIO_WritePin>

		//if (RxHeader.DLC == 2)

		if (RxHeader.StdId== 0x446)
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f240 4246 	movw	r2, #1094	; 0x446
 80004fe:	4293      	cmp	r3, r2
 8000500:	d102      	bne.n	8000508 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>
		{
			datacheck = 1;
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8000504:	2201      	movs	r2, #1
 8000506:	601a      	str	r2, [r3, #0]
		}

	}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000204 	.word	0x20000204
 8000514:	200001e0 	.word	0x200001e0
 8000518:	40020c00 	.word	0x40020c00
 800051c:	20000210 	.word	0x20000210

08000520 <HAL_CAN_RxFifo1FullCallback>:

	void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
	{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK) //add
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_CAN_RxFifo1FullCallback+0x44>)
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <HAL_CAN_RxFifo1FullCallback+0x48>)
 800052c:	2101      	movs	r1, #1
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f001 f8df 	bl	80016f2 <HAL_CAN_GetRxMessage>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_CAN_RxFifo1FullCallback+0x1e>
		{
			Error_Handler();
 800053a:	f000 fafb 	bl	8000b34 <Error_Handler>
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <HAL_CAN_RxFifo1FullCallback+0x4c>)
 8000546:	f001 fedf 	bl	8002308 <HAL_GPIO_WritePin>

		//if (RxHeader.DLC == 2)

		if (RxHeader.StdId== 0x446)
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <HAL_CAN_RxFifo1FullCallback+0x48>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f240 4246 	movw	r2, #1094	; 0x446
 8000552:	4293      	cmp	r3, r2
 8000554:	d102      	bne.n	800055c <HAL_CAN_RxFifo1FullCallback+0x3c>
		{
			datacheck = 1;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_CAN_RxFifo1FullCallback+0x50>)
 8000558:	2201      	movs	r2, #1
 800055a:	601a      	str	r2, [r3, #0]
		}

	}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000204 	.word	0x20000204
 8000568:	200001e0 	.word	0x200001e0
 800056c:	40020c00 	.word	0x40020c00
 8000570:	20000210 	.word	0x20000210

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fd29 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f86b 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f9bb 	bl	80008fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000586:	f000 f925 	bl	80007d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 800058a:	f000 f951 	bl	8000830 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058e:	f000 f97f 	bl	8000890 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000592:	f007 ff1f 	bl	80083d4 <MX_USB_HOST_Init>
  MX_CAN1_Init();
 8000596:	f000 f8c9 	bl	800072c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  	HAL_CAN_Start(&hcan1);
 800059a:	4828      	ldr	r0, [pc, #160]	; (800063c <main+0xc8>)
 800059c:	f000 ff8a 	bl	80014b4 <HAL_CAN_Start>
  	// Activate the notification
  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80005a0:	2110      	movs	r1, #16
 80005a2:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xc8>)
 80005a4:	f001 f9b7 	bl	8001916 <HAL_CAN_ActivateNotification>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <main+0x3e>
  	{
  		Error_Handler();
 80005ae:	f000 fac1 	bl	8000b34 <Error_Handler>
  	}

  	TxHeader.DLC = 2;  // data length
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <main+0xcc>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	611a      	str	r2, [r3, #16]
  	TxHeader.IDE = CAN_ID_STD;
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <main+0xcc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  	TxHeader.RTR = CAN_RTR_DATA;
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <main+0xcc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  	TxHeader.StdId = 0x103;  // ID
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <main+0xcc>)
 80005c6:	f240 1203 	movw	r2, #259	; 0x103
 80005ca:	601a      	str	r2, [r3, #0]

  	TxData[0] = 50; // ms delay
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <main+0xd0>)
 80005ce:	2232      	movs	r2, #50	; 0x32
 80005d0:	701a      	strb	r2, [r3, #0]
  	TxData[1] = 20; // loop rep
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <main+0xd0>)
 80005d4:	2214      	movs	r2, #20
 80005d6:	705a      	strb	r2, [r3, #1]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005d8:	f007 ff22 	bl	8008420 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    // blink the LED
    if(datacheck)
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <main+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f9      	beq.n	80005d8 <main+0x64>
    {

		for (int i = 0; i < RxData[1]; i++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	e00c      	b.n	8000604 <main+0x90>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // green led
 80005ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ee:	4817      	ldr	r0, [pc, #92]	; (800064c <main+0xd8>)
 80005f0:	f001 fea3 	bl	800233a <HAL_GPIO_TogglePin>
			HAL_Delay(RxData[0]);
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <main+0xdc>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fd5b 	bl	80010b4 <HAL_Delay>
		for (int i = 0; i < RxData[1]; i++)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3301      	adds	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <main+0xdc>)
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	461a      	mov	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4293      	cmp	r3, r2
 800060e:	dbec      	blt.n	80005ea <main+0x76>
		}
		datacheck = 0;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <main+0xd4>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]

	  	TxData[0] = 50; // ms delay
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <main+0xd0>)
 8000618:	2232      	movs	r2, #50	; 0x32
 800061a:	701a      	strb	r2, [r3, #0]
	  	TxData[1] = 20; // loop rep
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <main+0xd0>)
 800061e:	2214      	movs	r2, #20
 8000620:	705a      	strb	r2, [r3, #1]

	  	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)  // Add
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <main+0xe0>)
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <main+0xd0>)
 8000626:	4906      	ldr	r1, [pc, #24]	; (8000640 <main+0xcc>)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <main+0xc8>)
 800062a:	f000 ff87 	bl	800153c <HAL_CAN_AddTxMessage>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0d1      	beq.n	80005d8 <main+0x64>
		{
			Error_Handler();
 8000634:	f000 fa7e 	bl	8000b34 <Error_Handler>
    MX_USB_HOST_Process();
 8000638:	e7ce      	b.n	80005d8 <main+0x64>
 800063a:	bf00      	nop
 800063c:	200000ac 	.word	0x200000ac
 8000640:	200001c8 	.word	0x200001c8
 8000644:	200001fc 	.word	0x200001fc
 8000648:	20000210 	.word	0x20000210
 800064c:	40020c00 	.word	0x40020c00
 8000650:	20000204 	.word	0x20000204
 8000654:	2000020c 	.word	0x2000020c

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f008 f9f6 	bl	8008a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d6:	2307      	movs	r3, #7
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 f858 	bl	8004794 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ea:	f000 fa23 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2105      	movs	r1, #5
 800070c:	4618      	mov	r0, r3
 800070e:	f004 fab9 	bl	8004c84 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000718:	f000 fa0c 	bl	8000b34 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_CAN1_Init+0xa0>)
 8000734:	4a26      	ldr	r2, [pc, #152]	; (80007d0 <MX_CAN1_Init+0xa4>)
 8000736:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_CAN1_Init+0xa0>)
 800073a:	2212      	movs	r2, #18
 800073c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <MX_CAN1_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_CAN1_Init+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_CAN1_Init+0xa0>)
 800074c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000750:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_CAN1_Init+0xa0>)
 8000754:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000758:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_CAN1_Init+0xa0>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_CAN1_Init+0xa0>)
 8000762:	2200      	movs	r2, #0
 8000764:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_CAN1_Init+0xa0>)
 8000768:	2200      	movs	r2, #0
 800076a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_CAN1_Init+0xa0>)
 800076e:	2200      	movs	r2, #0
 8000770:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_CAN1_Init+0xa0>)
 8000774:	2200      	movs	r2, #0
 8000776:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_CAN1_Init+0xa0>)
 800077a:	2200      	movs	r2, #0
 800077c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800077e:	4813      	ldr	r0, [pc, #76]	; (80007cc <MX_CAN1_Init+0xa0>)
 8000780:	f000 fcbc 	bl	80010fc <HAL_CAN_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800078a:	f000 f9d3 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 8000792:	230a      	movs	r3, #10
 8000794:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000796:	2301      	movs	r3, #1
 8000798:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x446 << 5;
 800079a:	f648 03c0 	movw	r3, #35008	; 0x88c0
 800079e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x446 << 5;
 80007a4:	f648 03c0 	movw	r3, #35008	; 0x88c0
 80007a8:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // doesn't matter in single can controllers
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig); // add
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_CAN1_Init+0xa0>)
 80007c0:	f000 fd98 	bl	80012f4 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000ac 	.word	0x200000ac
 80007d0:	40006400 	.word	0x40006400

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2C1_Init+0x50>)
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_I2C1_Init+0x54>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_I2C1_Init+0x58>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_I2C1_Init+0x50>)
 80007f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_I2C1_Init+0x50>)
 8000812:	f003 f9db 	bl	8003bcc <HAL_I2C_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800081c:	f000 f98a 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000d4 	.word	0x200000d4
 8000828:	40005400 	.word	0x40005400
 800082c:	000186a0 	.word	0x000186a0

08000830 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_I2S3_Init+0x54>)
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <MX_I2S3_Init+0x58>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2S3_Init+0x54>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_I2S3_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_I2S3_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_I2S3_Init+0x54>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_I2S3_Init+0x54>)
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <MX_I2S3_Init+0x5c>)
 800085a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_I2S3_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_I2S3_Init+0x54>)
 8000870:	f003 faf0 	bl	8003e54 <HAL_I2S_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800087a:	f000 f95b 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000128 	.word	0x20000128
 8000888:	40003c00 	.word	0x40003c00
 800088c:	00017700 	.word	0x00017700

08000890 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_SPI1_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <MX_SPI1_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008e2:	f004 fd1b 	bl	800531c <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 f922 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000170 	.word	0x20000170
 80008f8:	40013000 	.word	0x40013000

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	4b81      	ldr	r3, [pc, #516]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a80      	ldr	r2, [pc, #512]	; (8000b1c <MX_GPIO_Init+0x220>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b7e      	ldr	r3, [pc, #504]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	4b7a      	ldr	r3, [pc, #488]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a79      	ldr	r2, [pc, #484]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b77      	ldr	r3, [pc, #476]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b73      	ldr	r3, [pc, #460]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a72      	ldr	r2, [pc, #456]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b70      	ldr	r3, [pc, #448]	; (8000b1c <MX_GPIO_Init+0x220>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b6c      	ldr	r3, [pc, #432]	; (8000b1c <MX_GPIO_Init+0x220>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a6b      	ldr	r2, [pc, #428]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b69      	ldr	r3, [pc, #420]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b65      	ldr	r3, [pc, #404]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a64      	ldr	r2, [pc, #400]	; (8000b1c <MX_GPIO_Init+0x220>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b62      	ldr	r3, [pc, #392]	; (8000b1c <MX_GPIO_Init+0x220>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <MX_GPIO_Init+0x220>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a5d      	ldr	r2, [pc, #372]	; (8000b1c <MX_GPIO_Init+0x220>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b5b      	ldr	r3, [pc, #364]	; (8000b1c <MX_GPIO_Init+0x220>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2108      	movs	r1, #8
 80009be:	4858      	ldr	r0, [pc, #352]	; (8000b20 <MX_GPIO_Init+0x224>)
 80009c0:	f001 fca2 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2101      	movs	r1, #1
 80009c8:	4856      	ldr	r0, [pc, #344]	; (8000b24 <MX_GPIO_Init+0x228>)
 80009ca:	f001 fc9d 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ce:	2200      	movs	r2, #0
 80009d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009d4:	4854      	ldr	r0, [pc, #336]	; (8000b28 <MX_GPIO_Init+0x22c>)
 80009d6:	f001 fc97 	bl	8002308 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009da:	2308      	movs	r3, #8
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	484b      	ldr	r0, [pc, #300]	; (8000b20 <MX_GPIO_Init+0x224>)
 80009f2:	f001 faed 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4845      	ldr	r0, [pc, #276]	; (8000b24 <MX_GPIO_Init+0x228>)
 8000a0e:	f001 fadf 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	483e      	ldr	r0, [pc, #248]	; (8000b24 <MX_GPIO_Init+0x228>)
 8000a2a:	f001 fad1 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4836      	ldr	r0, [pc, #216]	; (8000b24 <MX_GPIO_Init+0x228>)
 8000a4a:	f001 fac1 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4832      	ldr	r0, [pc, #200]	; (8000b2c <MX_GPIO_Init+0x230>)
 8000a64:	f001 fab4 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	482d      	ldr	r0, [pc, #180]	; (8000b30 <MX_GPIO_Init+0x234>)
 8000a7c:	f001 faa8 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a92:	2305      	movs	r3, #5
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4824      	ldr	r0, [pc, #144]	; (8000b30 <MX_GPIO_Init+0x234>)
 8000a9e:	f001 fa97 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aa2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000aa6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481b      	ldr	r0, [pc, #108]	; (8000b28 <MX_GPIO_Init+0x22c>)
 8000abc:	f001 fa88 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4815      	ldr	r0, [pc, #84]	; (8000b28 <MX_GPIO_Init+0x22c>)
 8000ad4:	f001 fa7c 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000adc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_GPIO_Init+0x224>)
 8000aee:	f001 fa6f 	bl	8001fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2006      	movs	r0, #6
 8000af8:	f001 fa33 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000afc:	2006      	movs	r0, #6
 8000afe:	f001 fa4c 	bl	8001f9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2028      	movs	r0, #40	; 0x28
 8000b08:	f001 fa2b 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b0c:	2028      	movs	r0, #40	; 0x28
 8000b0e:	f001 fa44 	bl	8001f9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b12:	bf00      	nop
 8000b14:	3730      	adds	r7, #48	; 0x30
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020400 	.word	0x40020400

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f001 f9e4 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <HAL_CAN_MspInit+0x94>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d133      	bne.n	8000c1a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <HAL_CAN_MspInit+0x98>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <HAL_CAN_MspInit+0x98>)
 8000bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_CAN_MspInit+0x98>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_CAN_MspInit+0x98>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_CAN_MspInit+0x98>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_CAN_MspInit+0x98>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bea:	2303      	movs	r3, #3
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bfa:	2309      	movs	r3, #9
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <HAL_CAN_MspInit+0x9c>)
 8000c06:	f001 f9e3 	bl	8001fd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2015      	movs	r0, #21
 8000c10:	f001 f9a7 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c14:	2015      	movs	r0, #21
 8000c16:	f001 f9c0 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40006400 	.word	0x40006400
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020c00 	.word	0x40020c00

08000c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_I2C_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c74:	2312      	movs	r3, #18
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c80:	2304      	movs	r3, #4
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <HAL_I2C_MspInit+0x8c>)
 8000c8c:	f001 f9a0 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <HAL_I2S_MspInit+0xf0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d15a      	bne.n	8000da6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cf4:	23c0      	movs	r3, #192	; 0xc0
 8000cf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 f9cb 	bl	800509c <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d0c:	f7ff ff12 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d64:	2310      	movs	r3, #16
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d74:	2306      	movs	r3, #6
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480e      	ldr	r0, [pc, #56]	; (8000db8 <HAL_I2S_MspInit+0xf8>)
 8000d80:	f001 f926 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d84:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d96:	2306      	movs	r3, #6
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <HAL_I2S_MspInit+0xfc>)
 8000da2:	f001 f915 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3738      	adds	r7, #56	; 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40003c00 	.word	0x40003c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40020800 	.word	0x40020800

08000dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_SPI_MspInit+0x84>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12b      	bne.n	8000e3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_SPI_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e1a:	23e0      	movs	r3, #224	; 0xe0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <HAL_SPI_MspInit+0x8c>)
 8000e36:	f001 f8cb 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40013000 	.word	0x40013000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 f8ea 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f001 fa61 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
//
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <CAN1_RX1_IRQHandler+0x10>)
 8000eba:	f000 fd52 	bl	8001962 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
//
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000ac 	.word	0x200000ac

08000ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ecc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ed0:	f001 fa4e 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <OTG_FS_IRQHandler+0x10>)
 8000ede:	f001 fcd5 	bl	800288c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200005f8 	.word	0x200005f8

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f007 fd62 	bl	80089e4 <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20020000 	.word	0x20020000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	20000214 	.word	0x20000214
 8000f54:	20000910 	.word	0x20000910

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f82:	490e      	ldr	r1, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f98:	4c0b      	ldr	r4, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ffd7 	bl	8000f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f007 fd21 	bl	80089f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fae1 	bl	8000574 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fc0:	08008ca8 	.word	0x08008ca8
  ldr r2, =_sbss
 8000fc4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fc8:	2000090c 	.word	0x2000090c

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <HAL_Init+0x40>)
 8000fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_Init+0x40>)
 8000fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x40>)
 8000ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 ffa7 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fd9c 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023c00 	.word	0x40023c00

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 ffbf 	bl	8001fb6 <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 ff87 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008
 8001098:	20000218 	.word	0x20000218

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000218 	.word	0x20000218

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff ffee 	bl	800109c <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffde 	bl	800109c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008

080010fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0ed      	b.n	80012ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fd38 	bl	8000b90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001130:	f7ff ffb4 	bl	800109c <HAL_GetTick>
 8001134:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001136:	e012      	b.n	800115e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001138:	f7ff ffb0 	bl	800109c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b0a      	cmp	r3, #10
 8001144:	d90b      	bls.n	800115e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2205      	movs	r2, #5
 8001156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e0c5      	b.n	80012ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0e5      	beq.n	8001138 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0202 	bic.w	r2, r2, #2
 800117a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800117c:	f7ff ff8e 	bl	800109c <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001182:	e012      	b.n	80011aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001184:	f7ff ff8a 	bl	800109c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b0a      	cmp	r3, #10
 8001190:	d90b      	bls.n	80011aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2205      	movs	r2, #5
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e09f      	b.n	80012ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e5      	bne.n	8001184 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7e1b      	ldrb	r3, [r3, #24]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d108      	bne.n	80011d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e007      	b.n	80011e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7e5b      	ldrb	r3, [r3, #25]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d108      	bne.n	80011fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e007      	b.n	800120c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800120a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7e9b      	ldrb	r3, [r3, #26]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d108      	bne.n	8001226 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0220 	orr.w	r2, r2, #32
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	e007      	b.n	8001236 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0220 	bic.w	r2, r2, #32
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7edb      	ldrb	r3, [r3, #27]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d108      	bne.n	8001250 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0210 	bic.w	r2, r2, #16
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	e007      	b.n	8001260 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0210 	orr.w	r2, r2, #16
 800125e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7f1b      	ldrb	r3, [r3, #28]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d108      	bne.n	800127a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0208 	orr.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e007      	b.n	800128a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0208 	bic.w	r2, r2, #8
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7f5b      	ldrb	r3, [r3, #29]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d108      	bne.n	80012a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 0204 	orr.w	r2, r2, #4
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e007      	b.n	80012b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0204 	bic.w	r2, r2, #4
 80012b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	ea42 0103 	orr.w	r1, r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800130c:	7cfb      	ldrb	r3, [r7, #19]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d003      	beq.n	800131a <HAL_CAN_ConfigFilter+0x26>
 8001312:	7cfb      	ldrb	r3, [r7, #19]
 8001314:	2b02      	cmp	r3, #2
 8001316:	f040 80be 	bne.w	8001496 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800131a:	4b65      	ldr	r3, [pc, #404]	; (80014b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800131c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001324:	f043 0201 	orr.w	r2, r3, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001334:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	431a      	orrs	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	2201      	movs	r2, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	401a      	ands	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d123      	bne.n	80013c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800139e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3248      	adds	r2, #72	; 0x48
 80013a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ba:	6979      	ldr	r1, [r7, #20]
 80013bc:	3348      	adds	r3, #72	; 0x48
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d122      	bne.n	8001412 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3248      	adds	r2, #72	; 0x48
 80013f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001406:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001408:	6979      	ldr	r1, [r7, #20]
 800140a:	3348      	adds	r3, #72	; 0x48
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	401a      	ands	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800142c:	e007      	b.n	800143e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	431a      	orrs	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	401a      	ands	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001458:	e007      	b.n	800146a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	431a      	orrs	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	431a      	orrs	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001488:	f023 0201 	bic.w	r2, r3, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e006      	b.n	80014a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40006400 	.word	0x40006400

080014b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d12e      	bne.n	8001526 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014e0:	f7ff fddc 	bl	800109c <HAL_GetTick>
 80014e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014e6:	e012      	b.n	800150e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014e8:	f7ff fdd8 	bl	800109c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b0a      	cmp	r3, #10
 80014f4:	d90b      	bls.n	800150e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2205      	movs	r2, #5
 8001506:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e012      	b.n	8001534 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e5      	bne.n	80014e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e006      	b.n	8001534 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
  }
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800155a:	7ffb      	ldrb	r3, [r7, #31]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d003      	beq.n	8001568 <HAL_CAN_AddTxMessage+0x2c>
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	2b02      	cmp	r3, #2
 8001564:	f040 80b8 	bne.w	80016d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80a0 	beq.w	80016c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	0e1b      	lsrs	r3, r3, #24
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d907      	bls.n	80015a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e09e      	b.n	80016e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015a8:	2201      	movs	r2, #1
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	409a      	lsls	r2, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	6809      	ldr	r1, [r1, #0]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3318      	adds	r3, #24
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	440b      	add	r3, r1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e00f      	b.n	80015f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3318      	adds	r3, #24
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	440b      	add	r3, r1
 80015f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6819      	ldr	r1, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3318      	adds	r3, #24
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	440b      	add	r3, r1
 8001606:	3304      	adds	r3, #4
 8001608:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	7d1b      	ldrb	r3, [r3, #20]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d111      	bne.n	8001636 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3318      	adds	r3, #24
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	3304      	adds	r3, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	6811      	ldr	r1, [r2, #0]
 8001626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3318      	adds	r3, #24
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	3304      	adds	r3, #4
 8001634:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3307      	adds	r3, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	061a      	lsls	r2, r3, #24
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3306      	adds	r3, #6
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3305      	adds	r3, #5
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	4313      	orrs	r3, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	3204      	adds	r2, #4
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	4610      	mov	r0, r2
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	6811      	ldr	r1, [r2, #0]
 800165e:	ea43 0200 	orr.w	r2, r3, r0
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	440b      	add	r3, r1
 8001668:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800166c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3303      	adds	r3, #3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	061a      	lsls	r2, r3, #24
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3302      	adds	r3, #2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3301      	adds	r3, #1
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	4313      	orrs	r3, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4610      	mov	r0, r2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	6811      	ldr	r1, [r2, #0]
 8001694:	ea43 0200 	orr.w	r2, r3, r0
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80016a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3318      	adds	r3, #24
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	6811      	ldr	r1, [r2, #0]
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3318      	adds	r3, #24
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	440b      	add	r3, r1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e00e      	b.n	80016e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e006      	b.n	80016e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016f2:	b480      	push	{r7}
 80016f4:	b087      	sub	sp, #28
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001706:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d003      	beq.n	8001716 <HAL_CAN_GetRxMessage+0x24>
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	2b02      	cmp	r3, #2
 8001712:	f040 80f3 	bne.w	80018fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10e      	bne.n	800173a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0e7      	b.n	800190a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d107      	bne.n	8001758 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0d8      	b.n	800190a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	331b      	adds	r3, #27
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	4413      	add	r3, r2
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0204 	and.w	r2, r3, #4
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	331b      	adds	r3, #27
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0d5b      	lsrs	r3, r3, #21
 8001786:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e00b      	b.n	80017a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	331b      	adds	r3, #27
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	331b      	adds	r3, #27
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4413      	add	r3, r2
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0202 	and.w	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	331b      	adds	r3, #27
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 020f 	and.w	r2, r3, #15
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	331b      	adds	r3, #27
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	3304      	adds	r3, #4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	331b      	adds	r3, #27
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	3304      	adds	r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0a1a      	lsrs	r2, r3, #8
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0c1a      	lsrs	r2, r3, #16
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	3302      	adds	r3, #2
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0e1a      	lsrs	r2, r3, #24
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3303      	adds	r3, #3
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3304      	adds	r3, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0a1a      	lsrs	r2, r3, #8
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	3305      	adds	r3, #5
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0c1a      	lsrs	r2, r3, #16
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3306      	adds	r3, #6
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e1a      	lsrs	r2, r3, #24
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3307      	adds	r3, #7
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d108      	bne.n	80018e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0220 	orr.w	r2, r2, #32
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	e007      	b.n	80018f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0220 	orr.w	r2, r2, #32
 80018f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e006      	b.n	800190a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
  }
}
 800190a:	4618      	mov	r0, r3
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001926:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d002      	beq.n	8001934 <HAL_CAN_ActivateNotification+0x1e>
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d109      	bne.n	8001948 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6959      	ldr	r1, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e006      	b.n	8001956 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
  }
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b08a      	sub	sp, #40	; 0x28
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d07c      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d023      	beq.n	80019fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f983 	bl	8001cd0 <HAL_CAN_TxMailbox0CompleteCallback>
 80019ca:	e016      	b.n	80019fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
 80019de:	e00c      	b.n	80019fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
 80019f2:	e002      	b.n	80019fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f989 	bl	8001d0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d024      	beq.n	8001a4e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f963 	bl	8001ce4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a1e:	e016      	b.n	8001a4e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
 8001a32:	e00c      	b.n	8001a4e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
 8001a46:	e002      	b.n	8001a4e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f969 	bl	8001d20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d024      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f943 	bl	8001cf8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a72:	e016      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	e00c      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9a:	e002      	b.n	8001aa2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f949 	bl	8001d34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00b      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2208      	movs	r2, #8
 8001ae0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f93a 	bl	8001d5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f921 	bl	8001d48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00c      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2210      	movs	r2, #16
 8001b28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00b      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2208      	movs	r2, #8
 8001b44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fcea 	bl	8000520 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7fe fcb1 	bl	80004cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2210      	movs	r2, #16
 8001b84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8f2 	bl	8001d70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8eb 	bl	8001d84 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d07b      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d072      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d043      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d03e      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c30:	2b60      	cmp	r3, #96	; 0x60
 8001c32:	d02b      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x32a>
 8001c34:	2b60      	cmp	r3, #96	; 0x60
 8001c36:	d82e      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c38:	2b50      	cmp	r3, #80	; 0x50
 8001c3a:	d022      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x320>
 8001c3c:	2b50      	cmp	r3, #80	; 0x50
 8001c3e:	d82a      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c40:	2b40      	cmp	r3, #64	; 0x40
 8001c42:	d019      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x316>
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d826      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c48:	2b30      	cmp	r3, #48	; 0x30
 8001c4a:	d010      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x30c>
 8001c4c:	2b30      	cmp	r3, #48	; 0x30
 8001c4e:	d822      	bhi.n	8001c96 <HAL_CAN_IRQHandler+0x334>
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x2f8>
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d005      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c58:	e01d      	b.n	8001c96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c62:	e019      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c6c:	e014      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f043 0320 	orr.w	r3, r3, #32
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c76:	e00f      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c80:	e00a      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8a:	e005      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c94:	e000      	b.n	8001c98 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c96:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ca6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2204      	movs	r2, #4
 8001cae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f868 	bl	8001d98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff3e 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff8e 	bl	8001ea0 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5d 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff31 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa2 	bl	8001f08 <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e16b      	b.n	80022c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fec:	2201      	movs	r2, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	429a      	cmp	r2, r3
 8002006:	f040 815a 	bne.w	80022be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d005      	beq.n	8002022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	2b02      	cmp	r3, #2
 8002020:	d130      	bne.n	8002084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 0201 	and.w	r2, r3, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b03      	cmp	r3, #3
 800208e:	d017      	beq.n	80020c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d123      	bne.n	8002114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	08da      	lsrs	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3208      	adds	r2, #8
 80020d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0203 	and.w	r2, r3, #3
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80b4 	beq.w	80022be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b60      	ldr	r3, [pc, #384]	; (80022dc <HAL_GPIO_Init+0x30c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a5f      	ldr	r2, [pc, #380]	; (80022dc <HAL_GPIO_Init+0x30c>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b5d      	ldr	r3, [pc, #372]	; (80022dc <HAL_GPIO_Init+0x30c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002172:	4a5b      	ldr	r2, [pc, #364]	; (80022e0 <HAL_GPIO_Init+0x310>)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	220f      	movs	r2, #15
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_GPIO_Init+0x314>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02b      	beq.n	80021f6 <HAL_GPIO_Init+0x226>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <HAL_GPIO_Init+0x318>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d025      	beq.n	80021f2 <HAL_GPIO_Init+0x222>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a50      	ldr	r2, [pc, #320]	; (80022ec <HAL_GPIO_Init+0x31c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01f      	beq.n	80021ee <HAL_GPIO_Init+0x21e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <HAL_GPIO_Init+0x320>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_GPIO_Init+0x21a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4e      	ldr	r2, [pc, #312]	; (80022f4 <HAL_GPIO_Init+0x324>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x216>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4d      	ldr	r2, [pc, #308]	; (80022f8 <HAL_GPIO_Init+0x328>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x212>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_GPIO_Init+0x32c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x20e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <HAL_GPIO_Init+0x330>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x20a>
 80021d6:	2307      	movs	r3, #7
 80021d8:	e00e      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021da:	2308      	movs	r3, #8
 80021dc:	e00c      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021de:	2306      	movs	r3, #6
 80021e0:	e00a      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021e2:	2305      	movs	r3, #5
 80021e4:	e008      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e004      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021f6:	2300      	movs	r3, #0
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	f002 0203 	and.w	r2, r2, #3
 80021fe:	0092      	lsls	r2, r2, #2
 8002200:	4093      	lsls	r3, r2
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002208:	4935      	ldr	r1, [pc, #212]	; (80022e0 <HAL_GPIO_Init+0x310>)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3302      	adds	r3, #2
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_GPIO_Init+0x334>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223a:	4a32      	ldr	r2, [pc, #200]	; (8002304 <HAL_GPIO_Init+0x334>)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002240:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_GPIO_Init+0x334>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002264:	4a27      	ldr	r2, [pc, #156]	; (8002304 <HAL_GPIO_Init+0x334>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_GPIO_Init+0x334>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_GPIO_Init+0x334>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_GPIO_Init+0x334>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_GPIO_Init+0x334>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3301      	adds	r3, #1
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	f67f ae90 	bls.w	8001fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40013800 	.word	0x40013800
 80022e4:	40020000 	.word	0x40020000
 80022e8:	40020400 	.word	0x40020400
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40020c00 	.word	0x40020c00
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40021400 	.word	0x40021400
 80022fc:	40021800 	.word	0x40021800
 8002300:	40021c00 	.word	0x40021c00
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800234c:	887a      	ldrh	r2, [r7, #2]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	041a      	lsls	r2, r3, #16
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43d9      	mvns	r1, r3
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	400b      	ands	r3, r1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f806 	bl	80023a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40013c00 	.word	0x40013c00

080023a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80023b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b8:	b08f      	sub	sp, #60	; 0x3c
 80023ba:	af0a      	add	r7, sp, #40	; 0x28
 80023bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e054      	b.n	8002472 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f006 f854 	bl	8008490 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2203      	movs	r2, #3
 80023ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 f883 	bl	8005512 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	687e      	ldr	r6, [r7, #4]
 8002414:	466d      	mov	r5, sp
 8002416:	f106 0410 	add.w	r4, r6, #16
 800241a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002426:	e885 0003 	stmia.w	r5, {r0, r1}
 800242a:	1d33      	adds	r3, r6, #4
 800242c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f002 fffd 	bl	800542e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	4618      	mov	r0, r3
 800243c:	f003 f87a 	bl	8005534 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	687e      	ldr	r6, [r7, #4]
 8002448:	466d      	mov	r5, sp
 800244a:	f106 0410 	add.w	r4, r6, #16
 800244e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800245a:	e885 0003 	stmia.w	r5, {r0, r1}
 800245e:	1d33      	adds	r3, r6, #4
 8002460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002462:	6838      	ldr	r0, [r7, #0]
 8002464:	f003 fa02 	bl	800586c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800247a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800247a:	b590      	push	{r4, r7, lr}
 800247c:	b089      	sub	sp, #36	; 0x24
 800247e:	af04      	add	r7, sp, #16
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	4608      	mov	r0, r1
 8002484:	4611      	mov	r1, r2
 8002486:	461a      	mov	r2, r3
 8002488:	4603      	mov	r3, r0
 800248a:	70fb      	strb	r3, [r7, #3]
 800248c:	460b      	mov	r3, r1
 800248e:	70bb      	strb	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_HCD_HC_Init+0x28>
 800249e:	2302      	movs	r3, #2
 80024a0:	e076      	b.n	8002590 <HAL_HCD_HC_Init+0x116>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	333d      	adds	r3, #61	; 0x3d
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3338      	adds	r3, #56	; 0x38
 80024ca:	787a      	ldrb	r2, [r7, #1]
 80024cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3340      	adds	r3, #64	; 0x40
 80024dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3339      	adds	r3, #57	; 0x39
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	333f      	adds	r3, #63	; 0x3f
 8002500:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002504:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	78ba      	ldrb	r2, [r7, #2]
 800250a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800250e:	b2d0      	uxtb	r0, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	333a      	adds	r3, #58	; 0x3a
 800251c:	4602      	mov	r2, r0
 800251e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002520:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002524:	2b00      	cmp	r3, #0
 8002526:	da09      	bge.n	800253c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	333b      	adds	r3, #59	; 0x3b
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e008      	b.n	800254e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	333b      	adds	r3, #59	; 0x3b
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	333c      	adds	r3, #60	; 0x3c
 800255c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002560:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	787c      	ldrb	r4, [r7, #1]
 8002568:	78ba      	ldrb	r2, [r7, #2]
 800256a:	78f9      	ldrb	r1, [r7, #3]
 800256c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4623      	mov	r3, r4
 800257e:	f003 fafb 	bl	8005b78 <USB_HC_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}

08002598 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_HCD_HC_Halt+0x1e>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e00f      	b.n	80025d6 <HAL_HCD_HC_Halt+0x3e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fd4b 	bl	8006062 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	70fb      	strb	r3, [r7, #3]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70bb      	strb	r3, [r7, #2]
 80025f6:	4613      	mov	r3, r2
 80025f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	333b      	adds	r3, #59	; 0x3b
 8002608:	78ba      	ldrb	r2, [r7, #2]
 800260a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	333f      	adds	r3, #63	; 0x3f
 800261a:	787a      	ldrb	r2, [r7, #1]
 800261c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800261e:	7c3b      	ldrb	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d112      	bne.n	800264a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3342      	adds	r3, #66	; 0x42
 8002632:	2203      	movs	r2, #3
 8002634:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	333d      	adds	r3, #61	; 0x3d
 8002644:	7f3a      	ldrb	r2, [r7, #28]
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e008      	b.n	800265c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	3342      	adds	r3, #66	; 0x42
 8002658:	2202      	movs	r2, #2
 800265a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b03      	cmp	r3, #3
 8002660:	f200 80c6 	bhi.w	80027f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002664:	a201      	add	r2, pc, #4	; (adr r2, 800266c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266a:	bf00      	nop
 800266c:	0800267d 	.word	0x0800267d
 8002670:	080027dd 	.word	0x080027dd
 8002674:	080026e1 	.word	0x080026e1
 8002678:	0800275f 	.word	0x0800275f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800267c:	7c3b      	ldrb	r3, [r7, #16]
 800267e:	2b01      	cmp	r3, #1
 8002680:	f040 80b8 	bne.w	80027f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002684:	78bb      	ldrb	r3, [r7, #2]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80b4 	bne.w	80027f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800268c:	8b3b      	ldrh	r3, [r7, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d108      	bne.n	80026a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3355      	adds	r3, #85	; 0x55
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3355      	adds	r3, #85	; 0x55
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d109      	bne.n	80026cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3342      	adds	r3, #66	; 0x42
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026ca:	e093      	b.n	80027f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	3342      	adds	r3, #66	; 0x42
 80026da:	2202      	movs	r2, #2
 80026dc:	701a      	strb	r2, [r3, #0]
      break;
 80026de:	e089      	b.n	80027f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80026e0:	78bb      	ldrb	r3, [r7, #2]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d11d      	bne.n	8002722 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3355      	adds	r3, #85	; 0x55
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3342      	adds	r3, #66	; 0x42
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800270c:	e073      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3342      	adds	r3, #66	; 0x42
 800271c:	2202      	movs	r2, #2
 800271e:	701a      	strb	r2, [r3, #0]
      break;
 8002720:	e069      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3354      	adds	r3, #84	; 0x54
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3342      	adds	r3, #66	; 0x42
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
      break;
 8002748:	e055      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3342      	adds	r3, #66	; 0x42
 8002758:	2202      	movs	r2, #2
 800275a:	701a      	strb	r2, [r3, #0]
      break;
 800275c:	e04b      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800275e:	78bb      	ldrb	r3, [r7, #2]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11d      	bne.n	80027a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3355      	adds	r3, #85	; 0x55
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3342      	adds	r3, #66	; 0x42
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800278a:	e034      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	3342      	adds	r3, #66	; 0x42
 800279a:	2202      	movs	r2, #2
 800279c:	701a      	strb	r2, [r3, #0]
      break;
 800279e:	e02a      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3354      	adds	r3, #84	; 0x54
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3342      	adds	r3, #66	; 0x42
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
      break;
 80027c6:	e016      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3342      	adds	r3, #66	; 0x42
 80027d6:	2202      	movs	r2, #2
 80027d8:	701a      	strb	r2, [r3, #0]
      break;
 80027da:	e00c      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3342      	adds	r3, #66	; 0x42
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
      break;
 80027ee:	e002      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80027f0:	bf00      	nop
 80027f2:	e000      	b.n	80027f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80027f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3344      	adds	r3, #68	; 0x44
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	8b3a      	ldrh	r2, [r7, #24]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	202c      	movs	r0, #44	; 0x2c
 8002810:	fb00 f303 	mul.w	r3, r0, r3
 8002814:	440b      	add	r3, r1
 8002816:	334c      	adds	r3, #76	; 0x4c
 8002818:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3360      	adds	r3, #96	; 0x60
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3350      	adds	r3, #80	; 0x50
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3339      	adds	r3, #57	; 0x39
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3361      	adds	r3, #97	; 0x61
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	222c      	movs	r2, #44	; 0x2c
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	3338      	adds	r3, #56	; 0x38
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	18d1      	adds	r1, r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	f003 fa9e 	bl	8005dbc <USB_HC_StartXfer>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop

0800288c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 ff9f 	bl	80057e6 <USB_GetMode>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 80f6 	bne.w	8002a9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 ff83 	bl	80057c0 <USB_ReadInterrupts>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80ec 	beq.w	8002a9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 ff7a 	bl	80057c0 <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d6:	d104      	bne.n	80028e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 ff6a 	bl	80057c0 <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f6:	d104      	bne.n	8002902 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002900:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f002 ff5a 	bl	80057c0 <USB_ReadInterrupts>
 800290c:	4603      	mov	r3, r0
 800290e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002912:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002916:	d104      	bne.n	8002922 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002920:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f002 ff4a 	bl	80057c0 <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d103      	bne.n	800293e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2202      	movs	r2, #2
 800293c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f002 ff3c 	bl	80057c0 <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800294e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002952:	d11c      	bne.n	800298e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800295c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800296e:	2110      	movs	r1, #16
 8002970:	6938      	ldr	r0, [r7, #16]
 8002972:	f002 fe2b 	bl	80055cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002976:	6938      	ldr	r0, [r7, #16]
 8002978:	f002 fe5c 	bl	8005634 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	4618      	mov	r0, r3
 8002984:	f003 f832 	bl	80059ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f005 fdff 	bl	800858c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f002 ff14 	bl	80057c0 <USB_ReadInterrupts>
 8002998:	4603      	mov	r3, r0
 800299a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a2:	d102      	bne.n	80029aa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f001 f89e 	bl	8003ae6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 ff06 	bl	80057c0 <USB_ReadInterrupts>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d106      	bne.n	80029cc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f005 fdc8 	bl	8008554 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2208      	movs	r2, #8
 80029ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 fef5 	bl	80057c0 <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d101      	bne.n	80029e4 <HAL_HCD_IRQHandler+0x158>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_HCD_IRQHandler+0x15a>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0210 	bic.w	r2, r2, #16
 80029f8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 ffa1 	bl	8003942 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0210 	orr.w	r2, r2, #16
 8002a0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fed3 	bl	80057c0 <USB_ReadInterrupts>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a24:	d13a      	bne.n	8002a9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 fb08 	bl	8006040 <USB_HC_ReadInterrupt>
 8002a30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	e025      	b.n	8002a84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d018      	beq.n	8002a7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a62:	d106      	bne.n	8002a72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4619      	mov	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8ab 	bl	8002bc6 <HCD_HC_IN_IRQHandler>
 8002a70:	e005      	b.n	8002a7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fbf9 	bl	8003270 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3d4      	bcc.n	8002a38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a96:	615a      	str	r2, [r3, #20]
 8002a98:	e000      	b.n	8002a9c <HAL_HCD_IRQHandler+0x210>
      return;
 8002a9a:	bf00      	nop
    }
  }
}
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_HCD_Start+0x16>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e013      	b.n	8002ae0 <HAL_HCD_Start+0x3e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 fff4 	bl	8005ab4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 fd0d 	bl	80054f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_HCD_Stop+0x16>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e00d      	b.n	8002b1a <HAL_HCD_Stop+0x32>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fbe2 	bl	80062d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 ff96 	bl	8005a60 <USB_ResetPort>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3360      	adds	r3, #96	; 0x60
 8002b58:	781b      	ldrb	r3, [r3, #0]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3350      	adds	r3, #80	; 0x50
 8002b80:	681b      	ldr	r3, [r3, #0]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 ffda 	bl	8005b54 <USB_GetCurrentFrame>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 ffb5 	bl	8005b26 <USB_GetHostSpeed>
 8002bbc:	4603      	mov	r3, r0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d11a      	bne.n	8002c2c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c02:	461a      	mov	r2, r3
 8002c04:	2304      	movs	r3, #4
 8002c06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3361      	adds	r3, #97	; 0x61
 8002c16:	2206      	movs	r2, #6
 8002c18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fa1c 	bl	8006062 <USB_HC_Halt>
 8002c2a:	e0af      	b.n	8002d8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c42:	d11b      	bne.n	8002c7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3361      	adds	r3, #97	; 0x61
 8002c66:	2207      	movs	r2, #7
 8002c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 f9f4 	bl	8006062 <USB_HC_Halt>
 8002c7a:	e087      	b.n	8002d8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d109      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	6093      	str	r3, [r2, #8]
 8002ca4:	e072      	b.n	8002d8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d11a      	bne.n	8002cf2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2308      	movs	r3, #8
 8002ccc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3361      	adds	r3, #97	; 0x61
 8002cdc:	2205      	movs	r2, #5
 8002cde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 f9b9 	bl	8006062 <USB_HC_Halt>
 8002cf0:	e04c      	b.n	8002d8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d08:	d11b      	bne.n	8002d42 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	461a      	mov	r2, r3
 8002d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3361      	adds	r3, #97	; 0x61
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 f991 	bl	8006062 <USB_HC_Halt>
 8002d40:	e024      	b.n	8002d8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d119      	bne.n	8002d8c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	461a      	mov	r2, r3
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3361      	adds	r3, #97	; 0x61
 8002d78:	2206      	movs	r2, #6
 8002d7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 f96b 	bl	8006062 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da2:	d112      	bne.n	8002dca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 f957 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002dc8:	e24e      	b.n	8003268 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	f040 80df 	bne.w	8002fa0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d019      	beq.n	8002e1e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3348      	adds	r3, #72	; 0x48
 8002df8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	0159      	lsls	r1, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	440b      	add	r3, r1
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	202c      	movs	r0, #44	; 0x2c
 8002e14:	fb00 f303 	mul.w	r3, r0, r3
 8002e18:	440b      	add	r3, r1
 8002e1a:	3350      	adds	r3, #80	; 0x50
 8002e1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3361      	adds	r3, #97	; 0x61
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	335c      	adds	r3, #92	; 0x5c
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2301      	movs	r3, #1
 8002e52:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	333f      	adds	r3, #63	; 0x3f
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	333f      	adds	r3, #63	; 0x3f
 8002e76:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d111      	bne.n	8002ea0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 f8eb 	bl	8006062 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2310      	movs	r3, #16
 8002e9c:	6093      	str	r3, [r2, #8]
 8002e9e:	e03a      	b.n	8002f16 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	333f      	adds	r3, #63	; 0x3f
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d009      	beq.n	8002ec8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	333f      	adds	r3, #63	; 0x3f
 8002ec2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d126      	bne.n	8002f16 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	0151      	lsls	r1, r2, #5
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	440a      	add	r2, r1
 8002ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ee2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ee6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3360      	adds	r3, #96	; 0x60
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	b2d9      	uxtb	r1, r3
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	202c      	movs	r0, #44	; 0x2c
 8002f04:	fb00 f303 	mul.w	r3, r0, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3360      	adds	r3, #96	; 0x60
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f005 fb49 	bl	80085a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d12b      	bne.n	8002f76 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3348      	adds	r3, #72	; 0x48
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	202c      	movs	r0, #44	; 0x2c
 8002f34:	fb00 f202 	mul.w	r2, r0, r2
 8002f38:	440a      	add	r2, r1
 8002f3a:	3240      	adds	r2, #64	; 0x40
 8002f3c:	8812      	ldrh	r2, [r2, #0]
 8002f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 818e 	beq.w	8003268 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	3354      	adds	r3, #84	; 0x54
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	f083 0301 	eor.w	r3, r3, #1
 8002f60:	b2d8      	uxtb	r0, r3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3354      	adds	r3, #84	; 0x54
 8002f70:	4602      	mov	r2, r0
 8002f72:	701a      	strb	r2, [r3, #0]
}
 8002f74:	e178      	b.n	8003268 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3354      	adds	r3, #84	; 0x54
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2d8      	uxtb	r0, r3
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3354      	adds	r3, #84	; 0x54
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	701a      	strb	r2, [r3, #0]
}
 8002f9e:	e163      	b.n	8003268 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	f040 80f6 	bne.w	80031a4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3361      	adds	r3, #97	; 0x61
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d109      	bne.n	8002fe0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3360      	adds	r3, #96	; 0x60
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e0c9      	b.n	8003174 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	3361      	adds	r3, #97	; 0x61
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d109      	bne.n	8003008 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	3360      	adds	r3, #96	; 0x60
 8003002:	2205      	movs	r2, #5
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	e0b5      	b.n	8003174 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3361      	adds	r3, #97	; 0x61
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b06      	cmp	r3, #6
 800301a:	d009      	beq.n	8003030 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3361      	adds	r3, #97	; 0x61
 800302a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800302c:	2b08      	cmp	r3, #8
 800302e:	d150      	bne.n	80030d2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	335c      	adds	r3, #92	; 0x5c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	202c      	movs	r0, #44	; 0x2c
 8003048:	fb00 f303 	mul.w	r3, r0, r3
 800304c:	440b      	add	r3, r1
 800304e:	335c      	adds	r3, #92	; 0x5c
 8003050:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	335c      	adds	r3, #92	; 0x5c
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d912      	bls.n	800308c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	335c      	adds	r3, #92	; 0x5c
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3360      	adds	r3, #96	; 0x60
 8003086:	2204      	movs	r2, #4
 8003088:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800308a:	e073      	b.n	8003174 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3360      	adds	r3, #96	; 0x60
 800309a:	2202      	movs	r2, #2
 800309c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030d0:	e050      	b.n	8003174 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	3361      	adds	r3, #97	; 0x61
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d122      	bne.n	800312c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3360      	adds	r3, #96	; 0x60
 80030f4:	2202      	movs	r2, #2
 80030f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800310e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003116:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e023      	b.n	8003174 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	3361      	adds	r3, #97	; 0x61
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b07      	cmp	r3, #7
 800313e:	d119      	bne.n	8003174 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	335c      	adds	r3, #92	; 0x5c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	202c      	movs	r0, #44	; 0x2c
 8003158:	fb00 f303 	mul.w	r3, r0, r3
 800315c:	440b      	add	r3, r1
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3360      	adds	r3, #96	; 0x60
 8003170:	2204      	movs	r2, #4
 8003172:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	461a      	mov	r2, r3
 8003182:	2302      	movs	r3, #2
 8003184:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	b2d9      	uxtb	r1, r3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	202c      	movs	r0, #44	; 0x2c
 8003190:	fb00 f303 	mul.w	r3, r0, r3
 8003194:	4413      	add	r3, r2
 8003196:	3360      	adds	r3, #96	; 0x60
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f005 fa03 	bl	80085a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031a2:	e061      	b.n	8003268 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b10      	cmp	r3, #16
 80031b8:	d156      	bne.n	8003268 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	333f      	adds	r3, #63	; 0x3f
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d111      	bne.n	80031f2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	335c      	adds	r3, #92	; 0x5c
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 ff39 	bl	8006062 <USB_HC_Halt>
 80031f0:	e031      	b.n	8003256 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	333f      	adds	r3, #63	; 0x3f
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	333f      	adds	r3, #63	; 0x3f
 8003214:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003216:	2b02      	cmp	r3, #2
 8003218:	d11d      	bne.n	8003256 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d110      	bne.n	8003256 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3361      	adds	r3, #97	; 0x61
 8003242:	2203      	movs	r2, #3
 8003244:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f002 ff06 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	2310      	movs	r3, #16
 8003266:	6093      	str	r3, [r2, #8]
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d11a      	bne.n	80032d6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	461a      	mov	r2, r3
 80032ae:	2304      	movs	r3, #4
 80032b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	212c      	movs	r1, #44	; 0x2c
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	3361      	adds	r3, #97	; 0x61
 80032c0:	2206      	movs	r2, #6
 80032c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 fec7 	bl	8006062 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80032d4:	e331      	b.n	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d12e      	bne.n	800334a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	461a      	mov	r2, r3
 80032fa:	2320      	movs	r3, #32
 80032fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	333d      	adds	r3, #61	; 0x3d
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	f040 8313 	bne.w	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	333d      	adds	r3, #61	; 0x3d
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3360      	adds	r3, #96	; 0x60
 8003334:	2202      	movs	r2, #2
 8003336:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f002 fe8d 	bl	8006062 <USB_HC_Halt>
}
 8003348:	e2f7      	b.n	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003360:	d112      	bne.n	8003388 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4413      	add	r3, r2
 800336a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336e:	461a      	mov	r2, r3
 8003370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003374:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f002 fe6e 	bl	8006062 <USB_HC_Halt>
}
 8003386:	e2d8      	b.n	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d140      	bne.n	8003420 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	335c      	adds	r3, #92	; 0x5c
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d111      	bne.n	80033ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	333d      	adds	r3, #61	; 0x3d
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	2340      	movs	r3, #64	; 0x40
 80033e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2301      	movs	r3, #1
 80033fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3361      	adds	r3, #97	; 0x61
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f002 fe22 	bl	8006062 <USB_HC_Halt>
}
 800341e:	e28c      	b.n	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d12c      	bne.n	8003490 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	3361      	adds	r3, #97	; 0x61
 8003444:	2204      	movs	r2, #4
 8003446:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	333d      	adds	r3, #61	; 0x3d
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	335c      	adds	r3, #92	; 0x5c
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f002 fdf3 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	2340      	movs	r3, #64	; 0x40
 800348c:	6093      	str	r3, [r2, #8]
}
 800348e:	e254      	b.n	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11a      	bne.n	80034dc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b2:	461a      	mov	r2, r3
 80034b4:	2308      	movs	r3, #8
 80034b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3361      	adds	r3, #97	; 0x61
 80034c6:	2205      	movs	r2, #5
 80034c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 fdc4 	bl	8006062 <USB_HC_Halt>
}
 80034da:	e22e      	b.n	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d140      	bne.n	8003574 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	335c      	adds	r3, #92	; 0x5c
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	3361      	adds	r3, #97	; 0x61
 8003512:	2203      	movs	r2, #3
 8003514:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	333d      	adds	r3, #61	; 0x3d
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d112      	bne.n	8003550 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	333c      	adds	r3, #60	; 0x3c
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d108      	bne.n	8003550 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	333d      	adds	r3, #61	; 0x3d
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f002 fd81 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	461a      	mov	r2, r3
 800356e:	2310      	movs	r3, #16
 8003570:	6093      	str	r3, [r2, #8]
}
 8003572:	e1e2      	b.n	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d164      	bne.n	8003654 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d111      	bne.n	80035b6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3361      	adds	r3, #97	; 0x61
 80035a0:	2206      	movs	r2, #6
 80035a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 fd57 	bl	8006062 <USB_HC_Halt>
 80035b4:	e044      	b.n	8003640 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	335c      	adds	r3, #92	; 0x5c
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	202c      	movs	r0, #44	; 0x2c
 80035ce:	fb00 f303 	mul.w	r3, r0, r3
 80035d2:	440b      	add	r3, r1
 80035d4:	335c      	adds	r3, #92	; 0x5c
 80035d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	335c      	adds	r3, #92	; 0x5c
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d920      	bls.n	800362e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	335c      	adds	r3, #92	; 0x5c
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	3360      	adds	r3, #96	; 0x60
 800360c:	2204      	movs	r2, #4
 800360e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	b2d9      	uxtb	r1, r3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	202c      	movs	r0, #44	; 0x2c
 800361a:	fb00 f303 	mul.w	r3, r0, r3
 800361e:	4413      	add	r3, r2
 8003620:	3360      	adds	r3, #96	; 0x60
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f004 ffbe 	bl	80085a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800362c:	e008      	b.n	8003640 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	212c      	movs	r1, #44	; 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	3360      	adds	r3, #96	; 0x60
 800363c:	2202      	movs	r2, #2
 800363e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	4413      	add	r3, r2
 8003648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364c:	461a      	mov	r2, r3
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	6093      	str	r3, [r2, #8]
}
 8003652:	e172      	b.n	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	4413      	add	r3, r2
 800365c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366a:	d11b      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3361      	adds	r3, #97	; 0x61
 800367a:	2208      	movs	r2, #8
 800367c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f002 fcea 	bl	8006062 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	461a      	mov	r2, r3
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	6093      	str	r3, [r2, #8]
}
 80036a2:	e14a      	b.n	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	f040 813f 	bne.w	800393a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3361      	adds	r3, #97	; 0x61
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d17d      	bne.n	80037cc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3360      	adds	r3, #96	; 0x60
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	333f      	adds	r3, #63	; 0x3f
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d00a      	beq.n	800370c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	212c      	movs	r1, #44	; 0x2c
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	333f      	adds	r3, #63	; 0x3f
 8003704:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003706:	2b03      	cmp	r3, #3
 8003708:	f040 8100 	bne.w	800390c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d113      	bne.n	800373c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3355      	adds	r3, #85	; 0x55
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2d8      	uxtb	r0, r3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3355      	adds	r3, #85	; 0x55
 8003738:	4602      	mov	r2, r0
 800373a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 80e3 	bne.w	800390c <HCD_HC_OUT_IRQHandler+0x69c>
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	212c      	movs	r1, #44	; 0x2c
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	4413      	add	r3, r2
 8003752:	334c      	adds	r3, #76	; 0x4c
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80d8 	beq.w	800390c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	334c      	adds	r3, #76	; 0x4c
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	202c      	movs	r0, #44	; 0x2c
 8003772:	fb00 f202 	mul.w	r2, r0, r2
 8003776:	440a      	add	r2, r1
 8003778:	3240      	adds	r2, #64	; 0x40
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	4413      	add	r3, r2
 800377e:	3b01      	subs	r3, #1
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	202c      	movs	r0, #44	; 0x2c
 8003786:	fb00 f202 	mul.w	r2, r0, r2
 800378a:	440a      	add	r2, r1
 800378c:	3240      	adds	r2, #64	; 0x40
 800378e:	8812      	ldrh	r2, [r2, #0]
 8003790:	fbb3 f3f2 	udiv	r3, r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80b5 	beq.w	800390c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	3355      	adds	r3, #85	; 0x55
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2d8      	uxtb	r0, r3
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3355      	adds	r3, #85	; 0x55
 80037c6:	4602      	mov	r2, r0
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e09f      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3361      	adds	r3, #97	; 0x61
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d109      	bne.n	80037f4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3360      	adds	r3, #96	; 0x60
 80037ee:	2202      	movs	r2, #2
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e08b      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	3361      	adds	r3, #97	; 0x61
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d109      	bne.n	800381c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	212c      	movs	r1, #44	; 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	3360      	adds	r3, #96	; 0x60
 8003816:	2202      	movs	r2, #2
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e077      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3361      	adds	r3, #97	; 0x61
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d109      	bne.n	8003844 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3360      	adds	r3, #96	; 0x60
 800383e:	2205      	movs	r2, #5
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e063      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3361      	adds	r3, #97	; 0x61
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b06      	cmp	r3, #6
 8003856:	d009      	beq.n	800386c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	3361      	adds	r3, #97	; 0x61
 8003866:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003868:	2b08      	cmp	r3, #8
 800386a:	d14f      	bne.n	800390c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	335c      	adds	r3, #92	; 0x5c
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	202c      	movs	r0, #44	; 0x2c
 8003884:	fb00 f303 	mul.w	r3, r0, r3
 8003888:	440b      	add	r3, r1
 800388a:	335c      	adds	r3, #92	; 0x5c
 800388c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	335c      	adds	r3, #92	; 0x5c
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d912      	bls.n	80038c8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	335c      	adds	r3, #92	; 0x5c
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3360      	adds	r3, #96	; 0x60
 80038c2:	2204      	movs	r2, #4
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e021      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3360      	adds	r3, #96	; 0x60
 80038d6:	2202      	movs	r2, #2
 80038d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038f0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038f8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	4413      	add	r3, r2
 8003902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003906:	461a      	mov	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	4413      	add	r3, r2
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	461a      	mov	r2, r3
 800391a:	2302      	movs	r3, #2
 800391c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	b2d9      	uxtb	r1, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	202c      	movs	r0, #44	; 0x2c
 8003928:	fb00 f303 	mul.w	r3, r0, r3
 800392c:	4413      	add	r3, r2
 800392e:	3360      	adds	r3, #96	; 0x60
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f004 fe37 	bl	80085a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800393a:	bf00      	nop
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b08a      	sub	sp, #40	; 0x28
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	0c5b      	lsrs	r3, r3, #17
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003976:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d004      	beq.n	8003988 <HCD_RXQLVL_IRQHandler+0x46>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b05      	cmp	r3, #5
 8003982:	f000 80a9 	beq.w	8003ad8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003986:	e0aa      	b.n	8003ade <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80a6 	beq.w	8003adc <HCD_RXQLVL_IRQHandler+0x19a>
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3344      	adds	r3, #68	; 0x44
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 809b 	beq.w	8003adc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3350      	adds	r3, #80	; 0x50
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	441a      	add	r2, r3
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	202c      	movs	r0, #44	; 0x2c
 80039c0:	fb00 f303 	mul.w	r3, r0, r3
 80039c4:	440b      	add	r3, r1
 80039c6:	334c      	adds	r3, #76	; 0x4c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d87a      	bhi.n	8003ac4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	212c      	movs	r1, #44	; 0x2c
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	3344      	adds	r3, #68	; 0x44
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	b292      	uxth	r2, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	f001 fe92 	bl	8005710 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3344      	adds	r3, #68	; 0x44
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	441a      	add	r2, r3
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	202c      	movs	r0, #44	; 0x2c
 8003a06:	fb00 f303 	mul.w	r3, r0, r3
 8003a0a:	440b      	add	r3, r1
 8003a0c:	3344      	adds	r3, #68	; 0x44
 8003a0e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3350      	adds	r3, #80	; 0x50
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	441a      	add	r2, r3
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	202c      	movs	r0, #44	; 0x2c
 8003a2a:	fb00 f303 	mul.w	r3, r0, r3
 8003a2e:	440b      	add	r3, r1
 8003a30:	3350      	adds	r3, #80	; 0x50
 8003a32:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	0cdb      	lsrs	r3, r3, #19
 8003a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a48:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3340      	adds	r3, #64	; 0x40
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d13c      	bne.n	8003adc <HCD_RXQLVL_IRQHandler+0x19a>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d039      	beq.n	8003adc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a7e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a86:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a94:	461a      	mov	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3354      	adds	r3, #84	; 0x54
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	f083 0301 	eor.w	r3, r3, #1
 8003aae:	b2d8      	uxtb	r0, r3
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	212c      	movs	r1, #44	; 0x2c
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3354      	adds	r3, #84	; 0x54
 8003abe:	4602      	mov	r2, r0
 8003ac0:	701a      	strb	r2, [r3, #0]
      break;
 8003ac2:	e00b      	b.n	8003adc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	3360      	adds	r3, #96	; 0x60
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	701a      	strb	r2, [r3, #0]
      break;
 8003ad6:	e001      	b.n	8003adc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003ad8:	bf00      	nop
 8003ada:	e000      	b.n	8003ade <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003adc:	bf00      	nop
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3728      	adds	r7, #40	; 0x28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b12:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d10b      	bne.n	8003b36 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f004 fd21 	bl	8008570 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d132      	bne.n	8003ba6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f043 0308 	orr.w	r3, r3, #8
 8003b46:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d126      	bne.n	8003ba0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d113      	bne.n	8003b82 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b64:	d106      	bne.n	8003b74 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 ff3d 	bl	80059ec <USB_InitFSLSPClkSel>
 8003b72:	e011      	b.n	8003b98 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 ff36 	bl	80059ec <USB_InitFSLSPClkSel>
 8003b80:	e00a      	b.n	8003b98 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d106      	bne.n	8003b98 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b90:	461a      	mov	r2, r3
 8003b92:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b96:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f004 fd13 	bl	80085c4 <HAL_HCD_PortEnabled_Callback>
 8003b9e:	e002      	b.n	8003ba6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f004 fd1d 	bl	80085e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d103      	bne.n	8003bb8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f043 0320 	orr.w	r3, r3, #32
 8003bb6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6013      	str	r3, [r2, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e12b      	b.n	8003e36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd f81c 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	; 0x24
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c30:	f001 fa20 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8003c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4a81      	ldr	r2, [pc, #516]	; (8003e40 <HAL_I2C_Init+0x274>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d807      	bhi.n	8003c50 <HAL_I2C_Init+0x84>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a80      	ldr	r2, [pc, #512]	; (8003e44 <HAL_I2C_Init+0x278>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	bf94      	ite	ls
 8003c48:	2301      	movls	r3, #1
 8003c4a:	2300      	movhi	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e006      	b.n	8003c5e <HAL_I2C_Init+0x92>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a7d      	ldr	r2, [pc, #500]	; (8003e48 <HAL_I2C_Init+0x27c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	bf94      	ite	ls
 8003c58:	2301      	movls	r3, #1
 8003c5a:	2300      	movhi	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e0e7      	b.n	8003e36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a78      	ldr	r2, [pc, #480]	; (8003e4c <HAL_I2C_Init+0x280>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	0c9b      	lsrs	r3, r3, #18
 8003c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4a6a      	ldr	r2, [pc, #424]	; (8003e40 <HAL_I2C_Init+0x274>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d802      	bhi.n	8003ca0 <HAL_I2C_Init+0xd4>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	e009      	b.n	8003cb4 <HAL_I2C_Init+0xe8>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	4a69      	ldr	r2, [pc, #420]	; (8003e50 <HAL_I2C_Init+0x284>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	495c      	ldr	r1, [pc, #368]	; (8003e40 <HAL_I2C_Init+0x274>)
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	d819      	bhi.n	8003d08 <HAL_I2C_Init+0x13c>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e59      	subs	r1, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce2:	1c59      	adds	r1, r3, #1
 8003ce4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ce8:	400b      	ands	r3, r1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_I2C_Init+0x138>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1e59      	subs	r1, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d02:	e051      	b.n	8003da8 <HAL_I2C_Init+0x1dc>
 8003d04:	2304      	movs	r3, #4
 8003d06:	e04f      	b.n	8003da8 <HAL_I2C_Init+0x1dc>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d111      	bne.n	8003d34 <HAL_I2C_Init+0x168>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e58      	subs	r0, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	440b      	add	r3, r1
 8003d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e012      	b.n	8003d5a <HAL_I2C_Init+0x18e>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1e58      	subs	r0, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	0099      	lsls	r1, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Init+0x196>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e022      	b.n	8003da8 <HAL_I2C_Init+0x1dc>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10e      	bne.n	8003d88 <HAL_I2C_Init+0x1bc>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1e58      	subs	r0, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	440b      	add	r3, r1
 8003d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d86:	e00f      	b.n	8003da8 <HAL_I2C_Init+0x1dc>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1e58      	subs	r0, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	0099      	lsls	r1, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	6809      	ldr	r1, [r1, #0]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6911      	ldr	r1, [r2, #16]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68d2      	ldr	r2, [r2, #12]
 8003de2:	4311      	orrs	r1, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	000186a0 	.word	0x000186a0
 8003e44:	001e847f 	.word	0x001e847f
 8003e48:	003d08ff 	.word	0x003d08ff
 8003e4c:	431bde83 	.word	0x431bde83
 8003e50:	10624dd3 	.word	0x10624dd3

08003e54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e128      	b.n	80040b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a90      	ldr	r2, [pc, #576]	; (80040c0 <HAL_I2S_Init+0x26c>)
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fc ff1d 	bl	8000cc0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e9c:	f023 030f 	bic.w	r3, r3, #15
 8003ea0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d060      	beq.n	8003f74 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003eba:	2310      	movs	r3, #16
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	e001      	b.n	8003ec4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d802      	bhi.n	8003ed2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f001 f9c4 	bl	8005260 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ed8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee2:	d125      	bne.n	8003f30 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	3305      	adds	r3, #5
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e01f      	b.n	8003f4e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	461a      	mov	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	3305      	adds	r3, #5
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	e00e      	b.n	8003f4e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	3305      	adds	r3, #5
 8003f4c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4a5c      	ldr	r2, [pc, #368]	; (80040c4 <HAL_I2S_Init+0x270>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	08db      	lsrs	r3, r3, #3
 8003f58:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	e003      	b.n	8003f7c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003f74:	2302      	movs	r3, #2
 8003f76:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d902      	bls.n	8003f88 <HAL_I2S_Init+0x134>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2bff      	cmp	r3, #255	; 0xff
 8003f86:	d907      	bls.n	8003f98 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	f043 0210 	orr.w	r2, r3, #16
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e08f      	b.n	80040b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	ea42 0103 	orr.w	r1, r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fb6:	f023 030f 	bic.w	r3, r3, #15
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6851      	ldr	r1, [r2, #4]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6892      	ldr	r2, [r2, #8]
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68d2      	ldr	r2, [r2, #12]
 8003fc8:	4311      	orrs	r1, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6992      	ldr	r2, [r2, #24]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fda:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d161      	bne.n	80040a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a38      	ldr	r2, [pc, #224]	; (80040c8 <HAL_I2S_Init+0x274>)
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a37      	ldr	r2, [pc, #220]	; (80040cc <HAL_I2S_Init+0x278>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2S_Init+0x1a4>
 8003ff4:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <HAL_I2S_Init+0x27c>)
 8003ff6:	e001      	b.n	8003ffc <HAL_I2S_Init+0x1a8>
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	4932      	ldr	r1, [pc, #200]	; (80040cc <HAL_I2S_Init+0x278>)
 8004004:	428a      	cmp	r2, r1
 8004006:	d101      	bne.n	800400c <HAL_I2S_Init+0x1b8>
 8004008:	4a31      	ldr	r2, [pc, #196]	; (80040d0 <HAL_I2S_Init+0x27c>)
 800400a:	e001      	b.n	8004010 <HAL_I2S_Init+0x1bc>
 800400c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004010:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004014:	f023 030f 	bic.w	r3, r3, #15
 8004018:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <HAL_I2S_Init+0x278>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_I2S_Init+0x1d4>
 8004024:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <HAL_I2S_Init+0x27c>)
 8004026:	e001      	b.n	800402c <HAL_I2S_Init+0x1d8>
 8004028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402c:	2202      	movs	r2, #2
 800402e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a25      	ldr	r2, [pc, #148]	; (80040cc <HAL_I2S_Init+0x278>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_I2S_Init+0x1ea>
 800403a:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_I2S_Init+0x27c>)
 800403c:	e001      	b.n	8004042 <HAL_I2S_Init+0x1ee>
 800403e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404e:	d003      	beq.n	8004058 <HAL_I2S_Init+0x204>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d103      	bne.n	8004060 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e001      	b.n	8004064 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800406e:	4313      	orrs	r3, r2
 8004070:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004078:	4313      	orrs	r3, r2
 800407a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004082:	4313      	orrs	r3, r2
 8004084:	b29a      	uxth	r2, r3
 8004086:	897b      	ldrh	r3, [r7, #10]
 8004088:	4313      	orrs	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004090:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <HAL_I2S_Init+0x278>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_I2S_Init+0x24c>
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <HAL_I2S_Init+0x27c>)
 800409e:	e001      	b.n	80040a4 <HAL_I2S_Init+0x250>
 80040a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a4:	897a      	ldrh	r2, [r7, #10]
 80040a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	080041cb 	.word	0x080041cb
 80040c4:	cccccccd 	.word	0xcccccccd
 80040c8:	080042e1 	.word	0x080042e1
 80040cc:	40003800 	.word	0x40003800
 80040d0:	40003400 	.word	0x40003400

080040d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	1c9a      	adds	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10e      	bne.n	8004164 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004154:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ffb8 	bl	80040d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	b292      	uxth	r2, r2
 8004180:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10e      	bne.n	80041c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ff93 	bl	80040e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d13a      	bne.n	800425c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d109      	bne.n	8004204 <I2S_IRQHandler+0x3a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d102      	bne.n	8004204 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ffb4 	bl	800416c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d126      	bne.n	800425c <I2S_IRQHandler+0x92>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b20      	cmp	r3, #32
 800421a:	d11f      	bne.n	800425c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800422a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	f043 0202 	orr.w	r2, r3, #2
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ff50 	bl	80040fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b03      	cmp	r3, #3
 8004266:	d136      	bne.n	80042d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b02      	cmp	r3, #2
 8004270:	d109      	bne.n	8004286 <I2S_IRQHandler+0xbc>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b80      	cmp	r3, #128	; 0x80
 800427e:	d102      	bne.n	8004286 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff45 	bl	8004110 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b08      	cmp	r3, #8
 800428e:	d122      	bne.n	80042d6 <I2S_IRQHandler+0x10c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b20      	cmp	r3, #32
 800429c:	d11b      	bne.n	80042d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c8:	f043 0204 	orr.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff13 	bl	80040fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042d6:	bf00      	nop
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a92      	ldr	r2, [pc, #584]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d101      	bne.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80042fa:	4b92      	ldr	r3, [pc, #584]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042fc:	e001      	b.n	8004302 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80042fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a8b      	ldr	r2, [pc, #556]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d101      	bne.n	800431c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004318:	4b8a      	ldr	r3, [pc, #552]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800431a:	e001      	b.n	8004320 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800431c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d004      	beq.n	8004338 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f040 8099 	bne.w	800446a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d107      	bne.n	8004352 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f925 	bl	800459c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d107      	bne.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f9c8 	bl	80046fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d13a      	bne.n	80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d035      	beq.n	80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800438a:	4b6e      	ldr	r3, [pc, #440]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800438c:	e001      	b.n	8004392 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800438e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4969      	ldr	r1, [pc, #420]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800439a:	428b      	cmp	r3, r1
 800439c:	d101      	bne.n	80043a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800439e:	4b69      	ldr	r3, [pc, #420]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043a0:	e001      	b.n	80043a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80043a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f043 0202 	orr.w	r2, r3, #2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fe88 	bl	80040fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	f040 80c3 	bne.w	800457e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80bd 	beq.w	800457e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004412:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a49      	ldr	r2, [pc, #292]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800441e:	4b49      	ldr	r3, [pc, #292]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004420:	e001      	b.n	8004426 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4944      	ldr	r1, [pc, #272]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800442e:	428b      	cmp	r3, r1
 8004430:	d101      	bne.n	8004436 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004432:	4b44      	ldr	r3, [pc, #272]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004434:	e001      	b.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800443a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800443e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004440:	2300      	movs	r3, #0
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f043 0204 	orr.w	r2, r3, #4
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fe4a 	bl	80040fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004468:	e089      	b.n	800457e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d107      	bne.n	8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8be 	bl	8004600 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d107      	bne.n	800449e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f8fd 	bl	8004698 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d12f      	bne.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02a      	beq.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d101      	bne.n	80044d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044ce:	e001      	b.n	80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80044d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4919      	ldr	r1, [pc, #100]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044dc:	428b      	cmp	r3, r1
 80044de:	d101      	bne.n	80044e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044e2:	e001      	b.n	80044e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80044e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f043 0202 	orr.w	r2, r3, #2
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fdfa 	bl	80040fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b08      	cmp	r3, #8
 8004510:	d136      	bne.n	8004580 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d031      	beq.n	8004580 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a07      	ldr	r2, [pc, #28]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004526:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004528:	e001      	b.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800452a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4902      	ldr	r1, [pc, #8]	; (8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004536:	428b      	cmp	r3, r1
 8004538:	d106      	bne.n	8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800453a:	4b02      	ldr	r3, [pc, #8]	; (8004544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800453c:	e006      	b.n	800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800453e:	bf00      	nop
 8004540:	40003800 	.word	0x40003800
 8004544:	40003400 	.word	0x40003400
 8004548:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800454c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004550:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004560:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fdc0 	bl	80040fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800457c:	e000      	b.n	8004580 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800457e:	bf00      	nop
}
 8004580:	bf00      	nop
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	1c99      	adds	r1, r3, #2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6251      	str	r1, [r2, #36]	; 0x24
 80045ae:	881a      	ldrh	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d113      	bne.n	80045f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ffc9 	bl	8004588 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	1c99      	adds	r1, r3, #2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6251      	str	r1, [r2, #36]	; 0x24
 8004612:	8819      	ldrh	r1, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <I2SEx_TxISR_I2SExt+0x90>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d101      	bne.n	8004622 <I2SEx_TxISR_I2SExt+0x22>
 800461e:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <I2SEx_TxISR_I2SExt+0x94>)
 8004620:	e001      	b.n	8004626 <I2SEx_TxISR_I2SExt+0x26>
 8004622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004626:	460a      	mov	r2, r1
 8004628:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d121      	bne.n	8004686 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a12      	ldr	r2, [pc, #72]	; (8004690 <I2SEx_TxISR_I2SExt+0x90>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <I2SEx_TxISR_I2SExt+0x50>
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <I2SEx_TxISR_I2SExt+0x94>)
 800464e:	e001      	b.n	8004654 <I2SEx_TxISR_I2SExt+0x54>
 8004650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	490d      	ldr	r1, [pc, #52]	; (8004690 <I2SEx_TxISR_I2SExt+0x90>)
 800465c:	428b      	cmp	r3, r1
 800465e:	d101      	bne.n	8004664 <I2SEx_TxISR_I2SExt+0x64>
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <I2SEx_TxISR_I2SExt+0x94>)
 8004662:	e001      	b.n	8004668 <I2SEx_TxISR_I2SExt+0x68>
 8004664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800466c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff81 	bl	8004588 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40003800 	.word	0x40003800
 8004694:	40003400 	.word	0x40003400

08004698 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68d8      	ldr	r0, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	1c99      	adds	r1, r3, #2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80046b0:	b282      	uxth	r2, r0
 80046b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d113      	bne.n	80046f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ff4a 	bl	8004588 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <I2SEx_RxISR_I2SExt+0x90>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <I2SEx_RxISR_I2SExt+0x16>
 800470e:	4b20      	ldr	r3, [pc, #128]	; (8004790 <I2SEx_RxISR_I2SExt+0x94>)
 8004710:	e001      	b.n	8004716 <I2SEx_RxISR_I2SExt+0x1a>
 8004712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004716:	68d8      	ldr	r0, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	1c99      	adds	r1, r3, #2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004722:	b282      	uxth	r2, r0
 8004724:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d121      	bne.n	8004782 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a12      	ldr	r2, [pc, #72]	; (800478c <I2SEx_RxISR_I2SExt+0x90>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d101      	bne.n	800474c <I2SEx_RxISR_I2SExt+0x50>
 8004748:	4b11      	ldr	r3, [pc, #68]	; (8004790 <I2SEx_RxISR_I2SExt+0x94>)
 800474a:	e001      	b.n	8004750 <I2SEx_RxISR_I2SExt+0x54>
 800474c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	490d      	ldr	r1, [pc, #52]	; (800478c <I2SEx_RxISR_I2SExt+0x90>)
 8004758:	428b      	cmp	r3, r1
 800475a:	d101      	bne.n	8004760 <I2SEx_RxISR_I2SExt+0x64>
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <I2SEx_RxISR_I2SExt+0x94>)
 800475e:	e001      	b.n	8004764 <I2SEx_RxISR_I2SExt+0x68>
 8004760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004764:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004768:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ff03 	bl	8004588 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40003800 	.word	0x40003800
 8004790:	40003400 	.word	0x40003400

08004794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e267      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d075      	beq.n	800489e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b2:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d00c      	beq.n	80047d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d112      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ca:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d6:	d10b      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	4b7e      	ldr	r3, [pc, #504]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05b      	beq.n	800489c <HAL_RCC_OscConfig+0x108>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d157      	bne.n	800489c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e242      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d106      	bne.n	8004808 <HAL_RCC_OscConfig+0x74>
 80047fa:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a75      	ldr	r2, [pc, #468]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e01d      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x98>
 8004812:	4b70      	ldr	r3, [pc, #448]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6f      	ldr	r2, [pc, #444]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6c      	ldr	r2, [pc, #432]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e00b      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 800482c:	4b69      	ldr	r3, [pc, #420]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a68      	ldr	r2, [pc, #416]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a65      	ldr	r2, [pc, #404]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d013      	beq.n	8004874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fc fc26 	bl	800109c <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004854:	f7fc fc22 	bl	800109c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e207      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b5b      	ldr	r3, [pc, #364]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0xc0>
 8004872:	e014      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fc fc12 	bl	800109c <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800487c:	f7fc fc0e 	bl	800109c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1f3      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0xe8>
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d063      	beq.n	8004972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d11c      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d116      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e1c7      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4937      	ldr	r1, [pc, #220]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fa:	e03a      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004904:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fc fbc7 	bl	800109c <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004912:	f7fc fbc3 	bl	800109c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e1a8      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4925      	ldr	r1, [pc, #148]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
 8004944:	e015      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fc fba6 	bl	800109c <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004954:	f7fc fba2 	bl	800109c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e187      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d036      	beq.n	80049ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fc fb86 	bl	800109c <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004994:	f7fc fb82 	bl	800109c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e167      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80049a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x200>
 80049b2:	e01b      	b.n	80049ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ba:	f7fc fb6f 	bl	800109c <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	e00e      	b.n	80049e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fc fb6b 	bl	800109c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d907      	bls.n	80049e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e150      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	42470000 	.word	0x42470000
 80049dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e0:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 80049e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ea      	bne.n	80049c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8097 	beq.w	8004b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fe:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10f      	bne.n	8004a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	4b7d      	ldr	r3, [pc, #500]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a7c      	ldr	r2, [pc, #496]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b77      	ldr	r3, [pc, #476]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d118      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a36:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a73      	ldr	r2, [pc, #460]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a42:	f7fc fb2b 	bl	800109c <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4a:	f7fc fb27 	bl	800109c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e10c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x2ea>
 8004a70:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a63      	ldr	r2, [pc, #396]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7c:	e01c      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x30c>
 8004a86:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a5e      	ldr	r2, [pc, #376]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	4b5c      	ldr	r3, [pc, #368]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a5b      	ldr	r2, [pc, #364]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004aa0:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a57      	ldr	r2, [pc, #348]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004aac:	4b55      	ldr	r3, [pc, #340]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	4a54      	ldr	r2, [pc, #336]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	f023 0304 	bic.w	r3, r3, #4
 8004ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fc faec 	bl	800109c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7fc fae8 	bl	800109c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0cb      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ade:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ee      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x334>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aec:	f7fc fad6 	bl	800109c <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fc fad2 	bl	800109c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0b5      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0a:	4b3e      	ldr	r3, [pc, #248]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1ee      	bne.n	8004af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1c:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	4a38      	ldr	r2, [pc, #224]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a1 	beq.w	8004c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d05c      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d141      	bne.n	8004bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fc faa6 	bl	800109c <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fc faa2 	bl	800109c <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e087      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	491b      	ldr	r1, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fc fa7b 	bl	800109c <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fc fa77 	bl	800109c <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e05c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x416>
 8004bc8:	e054      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fc fa64 	bl	800109c <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fc fa60 	bl	800109c <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e045      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x444>
 8004bf6:	e03d      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e038      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40007000 	.word	0x40007000
 8004c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x4ec>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d028      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d121      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d11a      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0cc      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b68      	ldr	r3, [pc, #416]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90c      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b63      	ldr	r3, [pc, #396]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0b8      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd8:	4b59      	ldr	r3, [pc, #356]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a58      	ldr	r2, [pc, #352]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf0:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4a52      	ldr	r2, [pc, #328]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	494d      	ldr	r1, [pc, #308]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d044      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d119      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	4b3f      	ldr	r3, [pc, #252]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e06f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e067      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 0203 	bic.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4934      	ldr	r1, [pc, #208]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d74:	f7fc f992 	bl	800109c <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fc f98e 	bl	800109c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e04f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 020c 	and.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1eb      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d20c      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e032      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd8:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4916      	ldr	r1, [pc, #88]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	490e      	ldr	r1, [pc, #56]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e0a:	f000 f821 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	490a      	ldr	r1, [pc, #40]	; (8004e44 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	5ccb      	ldrb	r3, [r1, r3]
 8004e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e22:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e26:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fc f8f2 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023c00 	.word	0x40023c00
 8004e40:	40023800 	.word	0x40023800
 8004e44:	08008c80 	.word	0x08008c80
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	20000004 	.word	0x20000004

08004e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b094      	sub	sp, #80	; 0x50
 8004e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e60:	2300      	movs	r3, #0
 8004e62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e68:	4b79      	ldr	r3, [pc, #484]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d00d      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x40>
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	f200 80e1 	bhi.w	800503c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x34>
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e82:	e0db      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e84:	4b73      	ldr	r3, [pc, #460]	; (8005054 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e88:	e0db      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e8a:	4b73      	ldr	r3, [pc, #460]	; (8005058 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e8e:	e0d8      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e90:	4b6f      	ldr	r3, [pc, #444]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e9a:	4b6d      	ldr	r3, [pc, #436]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d063      	beq.n	8004f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	2200      	movs	r2, #0
 8004eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eba:	2300      	movs	r3, #0
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	f04f 0000 	mov.w	r0, #0
 8004eca:	f04f 0100 	mov.w	r1, #0
 8004ece:	0159      	lsls	r1, r3, #5
 8004ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ed4:	0150      	lsls	r0, r2, #5
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4621      	mov	r1, r4
 8004edc:	1a51      	subs	r1, r2, r1
 8004ede:	6139      	str	r1, [r7, #16]
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	018b      	lsls	r3, r1, #6
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004efe:	4651      	mov	r1, sl
 8004f00:	018a      	lsls	r2, r1, #6
 8004f02:	4651      	mov	r1, sl
 8004f04:	ebb2 0801 	subs.w	r8, r2, r1
 8004f08:	4659      	mov	r1, fp
 8004f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f22:	4690      	mov	r8, r2
 8004f24:	4699      	mov	r9, r3
 8004f26:	4623      	mov	r3, r4
 8004f28:	eb18 0303 	adds.w	r3, r8, r3
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	462b      	mov	r3, r5
 8004f30:	eb49 0303 	adc.w	r3, r9, r3
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f42:	4629      	mov	r1, r5
 8004f44:	024b      	lsls	r3, r1, #9
 8004f46:	4621      	mov	r1, r4
 8004f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	024a      	lsls	r2, r1, #9
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f56:	2200      	movs	r2, #0
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f60:	f7fb f932 	bl	80001c8 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4613      	mov	r3, r2
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f6c:	e058      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f6e:	4b38      	ldr	r3, [pc, #224]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	099b      	lsrs	r3, r3, #6
 8004f74:	2200      	movs	r2, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	4611      	mov	r1, r2
 8004f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	2300      	movs	r3, #0
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	f04f 0000 	mov.w	r0, #0
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	0159      	lsls	r1, r3, #5
 8004f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f9a:	0150      	lsls	r0, r2, #5
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8004fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	00eb      	lsls	r3, r5, #3
 8004fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fd6:	00e2      	lsls	r2, r4, #3
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	4643      	mov	r3, r8
 8004fde:	18e3      	adds	r3, r4, r3
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	eb45 0303 	adc.w	r3, r5, r3
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	028b      	lsls	r3, r1, #10
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005000:	4621      	mov	r1, r4
 8005002:	028a      	lsls	r2, r1, #10
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500a:	2200      	movs	r2, #0
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	61fa      	str	r2, [r7, #28]
 8005010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005014:	f7fb f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4613      	mov	r3, r2
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	3301      	adds	r3, #1
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800503a:	e002      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCC_GetSysClockFreq+0x204>)
 800503e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005044:	4618      	mov	r0, r3
 8005046:	3750      	adds	r7, #80	; 0x50
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800
 8005054:	00f42400 	.word	0x00f42400
 8005058:	007a1200 	.word	0x007a1200

0800505c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <HAL_RCC_GetHCLKFreq+0x14>)
 8005062:	681b      	ldr	r3, [r3, #0]
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000000 	.word	0x20000000

08005074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005078:	f7ff fff0 	bl	800505c <HAL_RCC_GetHCLKFreq>
 800507c:	4602      	mov	r2, r0
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	0a9b      	lsrs	r3, r3, #10
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	4903      	ldr	r1, [pc, #12]	; (8005098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800508a:	5ccb      	ldrb	r3, [r1, r3]
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005090:	4618      	mov	r0, r3
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40023800 	.word	0x40023800
 8005098:	08008c90 	.word	0x08008c90

0800509c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d035      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050c4:	4b62      	ldr	r3, [pc, #392]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ca:	f7fb ffe7 	bl	800109c <HAL_GetTick>
 80050ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050d2:	f7fb ffe3 	bl	800109c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0b0      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e4:	4b5b      	ldr	r3, [pc, #364]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	019a      	lsls	r2, r3, #6
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	071b      	lsls	r3, r3, #28
 80050fc:	4955      	ldr	r1, [pc, #340]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005104:	4b52      	ldr	r3, [pc, #328]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800510a:	f7fb ffc7 	bl	800109c <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005112:	f7fb ffc3 	bl	800109c <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e090      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005124:	4b4b      	ldr	r3, [pc, #300]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8083 	beq.w	8005244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	4b44      	ldr	r3, [pc, #272]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	4a43      	ldr	r2, [pc, #268]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514c:	6413      	str	r3, [r2, #64]	; 0x40
 800514e:	4b41      	ldr	r3, [pc, #260]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800515a:	4b3f      	ldr	r3, [pc, #252]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a3e      	ldr	r2, [pc, #248]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005164:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005166:	f7fb ff99 	bl	800109c <HAL_GetTick>
 800516a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800516c:	e008      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800516e:	f7fb ff95 	bl	800109c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e062      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005180:	4b35      	ldr	r3, [pc, #212]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800518c:	4b31      	ldr	r3, [pc, #196]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005194:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02f      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d028      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051aa:	4b2a      	ldr	r3, [pc, #168]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051b4:	4b29      	ldr	r3, [pc, #164]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051ba:	4b28      	ldr	r3, [pc, #160]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051c0:	4a24      	ldr	r2, [pc, #144]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051c6:	4b23      	ldr	r3, [pc, #140]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d114      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051d2:	f7fb ff63 	bl	800109c <HAL_GetTick>
 80051d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fb ff5f 	bl	800109c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e02a      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f0:	4b18      	ldr	r3, [pc, #96]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ee      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005208:	d10d      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800521a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521e:	490d      	ldr	r1, [pc, #52]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005220:	4313      	orrs	r3, r2
 8005222:	608b      	str	r3, [r1, #8]
 8005224:	e005      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005226:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	4a0a      	ldr	r2, [pc, #40]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005230:	6093      	str	r3, [r2, #8]
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523e:	4905      	ldr	r1, [pc, #20]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005240:	4313      	orrs	r3, r2
 8005242:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	42470068 	.word	0x42470068
 8005254:	40023800 	.word	0x40023800
 8005258:	40007000 	.word	0x40007000
 800525c:	42470e40 	.word	0x42470e40

08005260 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d13e      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800527e:	4b23      	ldr	r3, [pc, #140]	; (800530c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d12f      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005294:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005296:	617b      	str	r3, [r7, #20]
          break;
 8005298:	e02f      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a6:	d108      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052a8:	4b18      	ldr	r3, [pc, #96]	; (800530c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b0:	4a18      	ldr	r2, [pc, #96]	; (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e007      	b.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052ba:	4b14      	ldr	r3, [pc, #80]	; (800530c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80052ca:	4b10      	ldr	r3, [pc, #64]	; (800530c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d0:	099b      	lsrs	r3, r3, #6
 80052d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e4:	0f1b      	lsrs	r3, r3, #28
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	617b      	str	r3, [r7, #20]
          break;
 80052f2:	e002      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
          break;
 80052f8:	bf00      	nop
        }
      }
      break;
 80052fa:	bf00      	nop
    }
  }
  return frequency;
 80052fc:	697b      	ldr	r3, [r7, #20]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	00bb8000 	.word	0x00bb8000
 8005314:	007a1200 	.word	0x007a1200
 8005318:	00f42400 	.word	0x00f42400

0800531c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e07b      	b.n	8005426 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2b00      	cmp	r3, #0
 8005334:	d108      	bne.n	8005348 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533e:	d009      	beq.n	8005354 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	61da      	str	r2, [r3, #28]
 8005346:	e005      	b.n	8005354 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fb fd26 	bl	8000dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	ea42 0103 	orr.w	r1, r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	f003 0104 	and.w	r1, r3, #4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f003 0210 	and.w	r2, r3, #16
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800542e:	b084      	sub	sp, #16
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	f107 001c 	add.w	r0, r7, #28
 800543c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	2b01      	cmp	r3, #1
 8005444:	d122      	bne.n	800548c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800545a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800546e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d105      	bne.n	8005480 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f9bf 	bl	8005804 <USB_CoreReset>
 8005486:	4603      	mov	r3, r0
 8005488:	73fb      	strb	r3, [r7, #15]
 800548a:	e01a      	b.n	80054c2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f9b3 	bl	8005804 <USB_CoreReset>
 800549e:	4603      	mov	r3, r0
 80054a0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d106      	bne.n	80054b6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
 80054b4:	e005      	b.n	80054c2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d10b      	bne.n	80054e0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f043 0206 	orr.w	r2, r3, #6
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ec:	b004      	add	sp, #16
 80054ee:	4770      	bx	lr

080054f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f043 0201 	orr.w	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f023 0201 	bic.w	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d115      	bne.n	8005582 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005562:	2001      	movs	r0, #1
 8005564:	f7fb fda6 	bl	80010b4 <HAL_Delay>
      ms++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f939 	bl	80057e6 <USB_GetMode>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d01e      	beq.n	80055b8 <USB_SetCurrentMode+0x84>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b31      	cmp	r3, #49	; 0x31
 800557e:	d9f0      	bls.n	8005562 <USB_SetCurrentMode+0x2e>
 8005580:	e01a      	b.n	80055b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d115      	bne.n	80055b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005594:	2001      	movs	r0, #1
 8005596:	f7fb fd8d 	bl	80010b4 <HAL_Delay>
      ms++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3301      	adds	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f920 	bl	80057e6 <USB_GetMode>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <USB_SetCurrentMode+0x84>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b31      	cmp	r3, #49	; 0x31
 80055b0:	d9f0      	bls.n	8005594 <USB_SetCurrentMode+0x60>
 80055b2:	e001      	b.n	80055b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e005      	b.n	80055c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b32      	cmp	r3, #50	; 0x32
 80055bc:	d101      	bne.n	80055c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3301      	adds	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a13      	ldr	r2, [pc, #76]	; (8005630 <USB_FlushTxFifo+0x64>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d901      	bls.n	80055ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e01b      	b.n	8005624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	daf2      	bge.n	80055da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	019b      	lsls	r3, r3, #6
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4a08      	ldr	r2, [pc, #32]	; (8005630 <USB_FlushTxFifo+0x64>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e006      	b.n	8005624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b20      	cmp	r3, #32
 8005620:	d0f0      	beq.n	8005604 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	00030d40 	.word	0x00030d40

08005634 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a11      	ldr	r2, [pc, #68]	; (8005690 <USB_FlushRxFifo+0x5c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e018      	b.n	8005684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	daf2      	bge.n	8005640 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2210      	movs	r2, #16
 8005662:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a08      	ldr	r2, [pc, #32]	; (8005690 <USB_FlushRxFifo+0x5c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e006      	b.n	8005684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b10      	cmp	r3, #16
 8005680:	d0f0      	beq.n	8005664 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	00030d40 	.word	0x00030d40

08005694 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005694:	b480      	push	{r7}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	4611      	mov	r1, r2
 80056a0:	461a      	mov	r2, r3
 80056a2:	460b      	mov	r3, r1
 80056a4:	71fb      	strb	r3, [r7, #7]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d123      	bne.n	8005702 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056ba:	88bb      	ldrh	r3, [r7, #4]
 80056bc:	3303      	adds	r3, #3
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056c2:	2300      	movs	r3, #0
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	e018      	b.n	80056fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	031a      	lsls	r2, r3, #12
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d4:	461a      	mov	r2, r3
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3301      	adds	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	3301      	adds	r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	3301      	adds	r3, #1
 80056ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	3301      	adds	r3, #1
 80056f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	3301      	adds	r3, #1
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d3e2      	bcc.n	80056c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3724      	adds	r7, #36	; 0x24
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005710:	b480      	push	{r7}
 8005712:	b08b      	sub	sp, #44	; 0x2c
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	089b      	lsrs	r3, r3, #2
 800572a:	b29b      	uxth	r3, r3
 800572c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	e014      	b.n	8005766 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	601a      	str	r2, [r3, #0]
    pDest++;
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	3301      	adds	r3, #1
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	3301      	adds	r3, #1
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	3301      	adds	r3, #1
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	3301      	adds	r3, #1
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	3301      	adds	r3, #1
 8005764:	623b      	str	r3, [r7, #32]
 8005766:	6a3a      	ldr	r2, [r7, #32]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	429a      	cmp	r2, r3
 800576c:	d3e6      	bcc.n	800573c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800576e:	8bfb      	ldrh	r3, [r7, #30]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01e      	beq.n	80057b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800577e:	461a      	mov	r2, r3
 8005780:	f107 0310 	add.w	r3, r7, #16
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	fa22 f303 	lsr.w	r3, r2, r3
 8005794:	b2da      	uxtb	r2, r3
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	701a      	strb	r2, [r3, #0]
      i++;
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	3301      	adds	r3, #1
 800579e:	623b      	str	r3, [r7, #32]
      pDest++;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	3301      	adds	r3, #1
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057a6:	8bfb      	ldrh	r3, [r7, #30]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057ac:	8bfb      	ldrh	r3, [r7, #30]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1ea      	bne.n	8005788 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	372c      	adds	r7, #44	; 0x2c
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4013      	ands	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057d8:	68fb      	ldr	r3, [r7, #12]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f003 0301 	and.w	r3, r3, #1
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a13      	ldr	r2, [pc, #76]	; (8005868 <USB_CoreReset+0x64>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e01b      	b.n	800585a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	daf2      	bge.n	8005810 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f043 0201 	orr.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a09      	ldr	r2, [pc, #36]	; (8005868 <USB_CoreReset+0x64>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e006      	b.n	800585a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b01      	cmp	r3, #1
 8005856:	d0f0      	beq.n	800583a <USB_CoreReset+0x36>

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	00030d40 	.word	0x00030d40

0800586c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800586c:	b084      	sub	sp, #16
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800587a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800588c:	461a      	mov	r2, r3
 800588e:	2300      	movs	r3, #0
 8005890:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d018      	beq.n	80058f4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d10a      	bne.n	80058de <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058d6:	f043 0304 	orr.w	r3, r3, #4
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	e014      	b.n	8005908 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	e009      	b.n	8005908 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005902:	f023 0304 	bic.w	r3, r3, #4
 8005906:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005908:	2110      	movs	r1, #16
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fe5e 	bl	80055cc <USB_FlushTxFifo>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fe8a 	bl	8005634 <USB_FlushRxFifo>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e015      	b.n	800595c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593c:	461a      	mov	r2, r3
 800593e:	f04f 33ff 	mov.w	r3, #4294967295
 8005942:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005950:	461a      	mov	r2, r3
 8005952:	2300      	movs	r3, #0
 8005954:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	3301      	adds	r3, #1
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	429a      	cmp	r2, r3
 8005962:	d3e5      	bcc.n	8005930 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <USB_HostInit+0x16c>)
 800598a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a13      	ldr	r2, [pc, #76]	; (80059dc <USB_HostInit+0x170>)
 8005990:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005994:	e009      	b.n	80059aa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a10      	ldr	r2, [pc, #64]	; (80059e0 <USB_HostInit+0x174>)
 80059a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a0f      	ldr	r2, [pc, #60]	; (80059e4 <USB_HostInit+0x178>)
 80059a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f043 0210 	orr.w	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <USB_HostInit+0x17c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059d4:	b004      	add	sp, #16
 80059d6:	4770      	bx	lr
 80059d8:	01000200 	.word	0x01000200
 80059dc:	00e00300 	.word	0x00e00300
 80059e0:	00600080 	.word	0x00600080
 80059e4:	004000e0 	.word	0x004000e0
 80059e8:	a3200008 	.word	0xa3200008

080059ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a24:	4313      	orrs	r3, r2
 8005a26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d107      	bne.n	8005a3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a34:	461a      	mov	r2, r3
 8005a36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a3a:	6053      	str	r3, [r2, #4]
 8005a3c:	e009      	b.n	8005a52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d106      	bne.n	8005a52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a90:	2064      	movs	r0, #100	; 0x64
 8005a92:	f7fb fb0f 	bl	80010b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005aa4:	200a      	movs	r0, #10
 8005aa6:	f7fb fb05 	bl	80010b4 <HAL_Delay>

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ad8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <USB_DriveVbus+0x44>
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d106      	bne.n	8005af8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005af2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005af6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b02:	d109      	bne.n	8005b18 <USB_DriveVbus+0x64>
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	0c5b      	lsrs	r3, r3, #17
 8005b44:	f003 0303 	and.w	r3, r3, #3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	b29b      	uxth	r3, r3
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	4608      	mov	r0, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	461a      	mov	r2, r3
 8005b86:	4603      	mov	r3, r0
 8005b88:	70fb      	strb	r3, [r7, #3]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	70bb      	strb	r3, [r7, #2]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005bae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d87e      	bhi.n	8005cb4 <USB_HC_Init+0x13c>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <USB_HC_Init+0x44>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005c77 	.word	0x08005c77
 8005bc4:	08005bcd 	.word	0x08005bcd
 8005bc8:	08005c39 	.word	0x08005c39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f240 439d 	movw	r3, #1181	; 0x49d
 8005bde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005be0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da10      	bge.n	8005c0a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	78fa      	ldrb	r2, [r7, #3]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c06:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005c08:	e057      	b.n	8005cba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d051      	beq.n	8005cba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	78fa      	ldrb	r2, [r7, #3]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c34:	60d3      	str	r3, [r2, #12]
      break;
 8005c36:	e040      	b.n	8005cba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c44:	461a      	mov	r2, r3
 8005c46:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da34      	bge.n	8005cbe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c74:	e023      	b.n	8005cbe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c82:	461a      	mov	r2, r3
 8005c84:	f240 2325 	movw	r3, #549	; 0x225
 8005c88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	da17      	bge.n	8005cc2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c92:	78fb      	ldrb	r3, [r7, #3]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	78fa      	ldrb	r2, [r7, #3]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005cb0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005cb2:	e006      	b.n	8005cc2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	77fb      	strb	r3, [r7, #31]
      break;
 8005cb8:	e004      	b.n	8005cc4 <USB_HC_Init+0x14c>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e002      	b.n	8005cc4 <USB_HC_Init+0x14c>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <USB_HC_Init+0x14c>
      break;
 8005cc2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	78fa      	ldrb	r2, [r7, #3]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cde:	f043 0302 	orr.w	r3, r3, #2
 8005ce2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf8:	6939      	ldr	r1, [r7, #16]
 8005cfa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	da03      	bge.n	8005d1e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1a:	61bb      	str	r3, [r7, #24]
 8005d1c:	e001      	b.n	8005d22 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff feff 	bl	8005b26 <USB_GetHostSpeed>
 8005d28:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d106      	bne.n	8005d40 <USB_HC_Init+0x1c8>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d003      	beq.n	8005d40 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e001      	b.n	8005d44 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d44:	787b      	ldrb	r3, [r7, #1]
 8005d46:	059b      	lsls	r3, r3, #22
 8005d48:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d4c:	78bb      	ldrb	r3, [r7, #2]
 8005d4e:	02db      	lsls	r3, r3, #11
 8005d50:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d54:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d5a:	049b      	lsls	r3, r3, #18
 8005d5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	0159      	lsls	r1, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	440b      	add	r3, r1
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d80:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005d82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d003      	beq.n	8005d92 <USB_HC_Init+0x21a>
 8005d8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d10f      	bne.n	8005db2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005db0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3720      	adds	r7, #32
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	; 0x30
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dd8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d02d      	beq.n	8005e42 <USB_HC_StartXfer+0x86>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	791b      	ldrb	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d129      	bne.n	8005e42 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d117      	bne.n	8005e24 <USB_HC_StartXfer+0x68>
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	79db      	ldrb	r3, [r3, #7]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <USB_HC_StartXfer+0x48>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	79db      	ldrb	r3, [r3, #7]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d10f      	bne.n	8005e24 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	6a3a      	ldr	r2, [r7, #32]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <USB_HC_StartXfer+0x86>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	795b      	ldrb	r3, [r3, #5]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d107      	bne.n	8005e42 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	4619      	mov	r1, r3
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fa0f 	bl	800625c <USB_DoPing>
      return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e0f8      	b.n	8006034 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d018      	beq.n	8005e7c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	8912      	ldrh	r2, [r2, #8]
 8005e52:	4413      	add	r3, r2
 8005e54:	3b01      	subs	r3, #1
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	8912      	ldrh	r2, [r2, #8]
 8005e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e5e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e62:	8b7b      	ldrh	r3, [r7, #26]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d90b      	bls.n	8005e80 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005e68:	8b7b      	ldrh	r3, [r7, #26]
 8005e6a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	8912      	ldrh	r2, [r2, #8]
 8005e72:	fb03 f202 	mul.w	r2, r3, r2
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	611a      	str	r2, [r3, #16]
 8005e7a:	e001      	b.n	8005e80 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	78db      	ldrb	r3, [r3, #3]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	8912      	ldrh	r2, [r2, #8]
 8005e8e:	fb03 f202 	mul.w	r2, r3, r2
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	611a      	str	r2, [r3, #16]
 8005e96:	e003      	b.n	8005ea0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eaa:	04d9      	lsls	r1, r3, #19
 8005eac:	4b63      	ldr	r3, [pc, #396]	; (800603c <USB_HC_StartXfer+0x280>)
 8005eae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005eb0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	7a9b      	ldrb	r3, [r3, #10]
 8005eb6:	075b      	lsls	r3, r3, #29
 8005eb8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ebc:	69f9      	ldr	r1, [r7, #28]
 8005ebe:	0148      	lsls	r0, r1, #5
 8005ec0:	6a39      	ldr	r1, [r7, #32]
 8005ec2:	4401      	add	r1, r0
 8005ec4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ec8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005eca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d009      	beq.n	8005ee6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	68d9      	ldr	r1, [r3, #12]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	460a      	mov	r2, r1
 8005ee4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf0c      	ite	eq
 8005ef6:	2301      	moveq	r3, #1
 8005ef8:	2300      	movne	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	6a3a      	ldr	r2, [r7, #32]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	7e7b      	ldrb	r3, [r7, #25]
 8005f2e:	075b      	lsls	r3, r3, #29
 8005f30:	69f9      	ldr	r1, [r7, #28]
 8005f32:	0148      	lsls	r0, r1, #5
 8005f34:	6a39      	ldr	r1, [r7, #32]
 8005f36:	4401      	add	r1, r0
 8005f38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f56:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	78db      	ldrb	r3, [r3, #3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	e003      	b.n	8005f72 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f70:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f78:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	461a      	mov	r2, r3
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	e04e      	b.n	8006034 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	78db      	ldrb	r3, [r3, #3]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d149      	bne.n	8006032 <USB_HC_StartXfer+0x276>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d045      	beq.n	8006032 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	79db      	ldrb	r3, [r3, #7]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d830      	bhi.n	8006010 <USB_HC_StartXfer+0x254>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <USB_HC_StartXfer+0x1f8>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fe9 	.word	0x08005fe9
 8005fbc:	08005fc5 	.word	0x08005fc5
 8005fc0:	08005fe9 	.word	0x08005fe9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	3303      	adds	r3, #3
 8005fca:	089b      	lsrs	r3, r3, #2
 8005fcc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005fce:	8afa      	ldrh	r2, [r7, #22]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d91c      	bls.n	8006014 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f043 0220 	orr.w	r2, r3, #32
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005fe6:	e015      	b.n	8006014 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	3303      	adds	r3, #3
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005ff2:	8afa      	ldrh	r2, [r7, #22]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d90a      	bls.n	8006018 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	619a      	str	r2, [r3, #24]
        }
        break;
 800600e:	e003      	b.n	8006018 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006010:	bf00      	nop
 8006012:	e002      	b.n	800601a <USB_HC_StartXfer+0x25e>
        break;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <USB_HC_StartXfer+0x25e>
        break;
 8006018:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	68d9      	ldr	r1, [r3, #12]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	785a      	ldrb	r2, [r3, #1]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	b29b      	uxth	r3, r3
 8006028:	2000      	movs	r0, #0
 800602a:	9000      	str	r0, [sp, #0]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff fb31 	bl	8005694 <USB_WritePacket>
  }

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3728      	adds	r7, #40	; 0x28
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	1ff80000 	.word	0x1ff80000

08006040 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	b29b      	uxth	r3, r3
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006062:	b480      	push	{r7}
 8006064:	b089      	sub	sp, #36	; 0x24
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	0c9b      	lsrs	r3, r3, #18
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	0fdb      	lsrs	r3, r3, #31
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d104      	bne.n	80060bc <USB_HC_Halt+0x5a>
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	e0c8      	b.n	800624e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <USB_HC_Halt+0x66>
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d163      	bne.n	8006190 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 80ab 	bne.w	800624c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d133      	bne.n	800616a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	440a      	add	r2, r1
 8006118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800611c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006120:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	440a      	add	r2, r1
 8006138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800613c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006140:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800614e:	d81d      	bhi.n	800618c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006166:	d0ec      	beq.n	8006142 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006168:	e070      	b.n	800624c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	440a      	add	r2, r1
 8006180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006188:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800618a:	e05f      	b.n	800624c <USB_HC_Halt+0x1ea>
            break;
 800618c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800618e:	e05d      	b.n	800624c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d133      	bne.n	8006228 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061fe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800620c:	d81d      	bhi.n	800624a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006224:	d0ec      	beq.n	8006200 <USB_HC_Halt+0x19e>
 8006226:	e011      	b.n	800624c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	440a      	add	r2, r1
 800623e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	e000      	b.n	800624c <USB_HC_Halt+0x1ea>
          break;
 800624a:	bf00      	nop
    }
  }

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3724      	adds	r7, #36	; 0x24
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006270:	2301      	movs	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	04da      	lsls	r2, r3, #19
 8006278:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <USB_DoPing+0x74>)
 800627a:	4013      	ands	r3, r2
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	440a      	add	r2, r1
 8006284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800628c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ba:	461a      	mov	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	1ff80000 	.word	0x1ff80000

080062d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff f912 	bl	8005512 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062ee:	2110      	movs	r1, #16
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff f96b 	bl	80055cc <USB_FlushTxFifo>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff f997 	bl	8005634 <USB_FlushRxFifo>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	e01f      	b.n	8006356 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800632c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006334:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800633c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	461a      	mov	r2, r3
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	3301      	adds	r3, #1
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b0f      	cmp	r3, #15
 800635a:	d9dc      	bls.n	8006316 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800635c:	2300      	movs	r3, #0
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e034      	b.n	80063cc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006378:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006380:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006388:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	461a      	mov	r2, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063a8:	d80c      	bhi.n	80063c4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c0:	d0ec      	beq.n	800639c <USB_StopHost+0xc8>
 80063c2:	e000      	b.n	80063c6 <USB_StopHost+0xf2>
        break;
 80063c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	3301      	adds	r3, #1
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	2b0f      	cmp	r3, #15
 80063d0:	d9c7      	bls.n	8006362 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d8:	461a      	mov	r2, r3
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f04f 32ff 	mov.w	r2, #4294967295
 80063e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff f881 	bl	80054f0 <USB_EnableGlobalInt>

  return ret;
 80063ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3720      	adds	r7, #32
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80063f8:	b590      	push	{r4, r7, lr}
 80063fa:	b089      	sub	sp, #36	; 0x24
 80063fc:	af04      	add	r7, sp, #16
 80063fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006400:	2301      	movs	r3, #1
 8006402:	2202      	movs	r2, #2
 8006404:	2102      	movs	r1, #2
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fc66 	bl	8006cd8 <USBH_FindInterface>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2bff      	cmp	r3, #255	; 0xff
 8006414:	d002      	beq.n	800641c <USBH_CDC_InterfaceInit+0x24>
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d901      	bls.n	8006420 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800641c:	2302      	movs	r3, #2
 800641e:	e13d      	b.n	800669c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fc3b 	bl	8006ca0 <USBH_SelectInterface>
 800642a:	4603      	mov	r3, r0
 800642c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006434:	2302      	movs	r3, #2
 8006436:	e131      	b.n	800669c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800643e:	2050      	movs	r0, #80	; 0x50
 8006440:	f002 fafa 	bl	8008a38 <malloc>
 8006444:	4603      	mov	r3, r0
 8006446:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006458:	2302      	movs	r3, #2
 800645a:	e11f      	b.n	800669c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800645c:	2250      	movs	r2, #80	; 0x50
 800645e:	2100      	movs	r1, #0
 8006460:	68b8      	ldr	r0, [r7, #8]
 8006462:	f002 faf9 	bl	8008a58 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	211a      	movs	r1, #26
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	4413      	add	r3, r2
 8006472:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	b25b      	sxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	da15      	bge.n	80064aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	211a      	movs	r1, #26
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	4413      	add	r3, r2
 800648a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	211a      	movs	r1, #26
 800649a:	fb01 f303 	mul.w	r3, r1, r3
 800649e:	4413      	add	r3, r2
 80064a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064a4:	881a      	ldrh	r2, [r3, #0]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 ff2c 	bl	800830e <USBH_AllocPipe>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	7819      	ldrb	r1, [r3, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	7858      	ldrb	r0, [r3, #1]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	8952      	ldrh	r2, [r2, #10]
 80064d6:	9202      	str	r2, [sp, #8]
 80064d8:	2203      	movs	r2, #3
 80064da:	9201      	str	r2, [sp, #4]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	4623      	mov	r3, r4
 80064e0:	4602      	mov	r2, r0
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fee4 	bl	80082b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2200      	movs	r2, #0
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f002 f9f3 	bl	80088dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80064f6:	2300      	movs	r3, #0
 80064f8:	2200      	movs	r2, #0
 80064fa:	210a      	movs	r1, #10
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fbeb 	bl	8006cd8 <USBH_FindInterface>
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2bff      	cmp	r3, #255	; 0xff
 800650a:	d002      	beq.n	8006512 <USBH_CDC_InterfaceInit+0x11a>
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d901      	bls.n	8006516 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006512:	2302      	movs	r3, #2
 8006514:	e0c2      	b.n	800669c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	211a      	movs	r1, #26
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	4413      	add	r3, r2
 8006522:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	b25b      	sxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	da16      	bge.n	800655c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	211a      	movs	r1, #26
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	4413      	add	r3, r2
 800653a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800653e:	781a      	ldrb	r2, [r3, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	211a      	movs	r1, #26
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	4413      	add	r3, r2
 8006550:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	835a      	strh	r2, [r3, #26]
 800655a:	e015      	b.n	8006588 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	211a      	movs	r1, #26
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	4413      	add	r3, r2
 8006568:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800656c:	781a      	ldrb	r2, [r3, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	211a      	movs	r1, #26
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	4413      	add	r3, r2
 800657e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006582:	881a      	ldrh	r2, [r3, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	211a      	movs	r1, #26
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	da16      	bge.n	80065ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	211a      	movs	r1, #26
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80065b0:	781a      	ldrb	r2, [r3, #0]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	211a      	movs	r1, #26
 80065bc:	fb01 f303 	mul.w	r3, r1, r3
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	835a      	strh	r2, [r3, #26]
 80065cc:	e015      	b.n	80065fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	211a      	movs	r1, #26
 80065d4:	fb01 f303 	mul.w	r3, r1, r3
 80065d8:	4413      	add	r3, r2
 80065da:	f203 3356 	addw	r3, r3, #854	; 0x356
 80065de:	781a      	ldrb	r2, [r3, #0]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	211a      	movs	r1, #26
 80065ea:	fb01 f303 	mul.w	r3, r1, r3
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80065f4:	881a      	ldrh	r2, [r3, #0]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	7b9b      	ldrb	r3, [r3, #14]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fe84 	bl	800830e <USBH_AllocPipe>
 8006606:	4603      	mov	r3, r0
 8006608:	461a      	mov	r2, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	7bdb      	ldrb	r3, [r3, #15]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fe7a 	bl	800830e <USBH_AllocPipe>
 800661a:	4603      	mov	r3, r0
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	7b59      	ldrb	r1, [r3, #13]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	7b98      	ldrb	r0, [r3, #14]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	8b12      	ldrh	r2, [r2, #24]
 800663a:	9202      	str	r2, [sp, #8]
 800663c:	2202      	movs	r2, #2
 800663e:	9201      	str	r2, [sp, #4]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	4623      	mov	r3, r4
 8006644:	4602      	mov	r2, r0
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fe32 	bl	80082b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	7b19      	ldrb	r1, [r3, #12]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	7bd8      	ldrb	r0, [r3, #15]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	8b52      	ldrh	r2, [r2, #26]
 8006664:	9202      	str	r2, [sp, #8]
 8006666:	2202      	movs	r2, #2
 8006668:	9201      	str	r2, [sp, #4]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	4623      	mov	r3, r4
 800666e:	4602      	mov	r2, r0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 fe1d 	bl	80082b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	7b5b      	ldrb	r3, [r3, #13]
 8006682:	2200      	movs	r2, #0
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f002 f928 	bl	80088dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	7b1b      	ldrb	r3, [r3, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f002 f921 	bl	80088dc <USBH_LL_SetToggle>

  return USBH_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd90      	pop	{r4, r7, pc}

080066a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00e      	beq.n	80066dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fe12 	bl	80082ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 fe3d 	bl	8008350 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	7b1b      	ldrb	r3, [r3, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00e      	beq.n	8006702 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	7b1b      	ldrb	r3, [r3, #12]
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fdff 	bl	80082ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	7b1b      	ldrb	r3, [r3, #12]
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f001 fe2a 	bl	8008350 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	7b5b      	ldrb	r3, [r3, #13]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	7b5b      	ldrb	r3, [r3, #13]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 fdec 	bl	80082ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	7b5b      	ldrb	r3, [r3, #13]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fe17 	bl	8008350 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	4618      	mov	r0, r3
 800673e:	f002 f983 	bl	8008a48 <free>
    phost->pActiveClass->pData = 0U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006748:	2200      	movs	r2, #0
 800674a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3340      	adds	r3, #64	; 0x40
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f8b1 	bl	80068d6 <GetLineCoding>
 8006774:	4603      	mov	r3, r0
 8006776:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d105      	bne.n	800678a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006784:	2102      	movs	r1, #2
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800678a:	7afb      	ldrb	r3, [r7, #11]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800679c:	2301      	movs	r3, #1
 800679e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d877      	bhi.n	80068a8 <USBH_CDC_Process+0x114>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <USBH_CDC_Process+0x2c>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	080067d5 	.word	0x080067d5
 80067c4:	080067db 	.word	0x080067db
 80067c8:	0800680b 	.word	0x0800680b
 80067cc:	0800687f 	.word	0x0800687f
 80067d0:	0800688d 	.word	0x0800688d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
      break;
 80067d8:	e06d      	b.n	80068b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f897 	bl	8006914 <SetLineCoding>
 80067e6:	4603      	mov	r3, r0
 80067e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067f8:	e058      	b.n	80068ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d055      	beq.n	80068ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2204      	movs	r2, #4
 8006804:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006808:	e050      	b.n	80068ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	3340      	adds	r3, #64	; 0x40
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f860 	bl	80068d6 <GetLineCoding>
 8006816:	4603      	mov	r3, r0
 8006818:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800681a:	7bbb      	ldrb	r3, [r7, #14]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d126      	bne.n	800686e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006832:	791b      	ldrb	r3, [r3, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d13b      	bne.n	80068b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006842:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006844:	429a      	cmp	r2, r3
 8006846:	d133      	bne.n	80068b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006852:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006854:	429a      	cmp	r2, r3
 8006856:	d12b      	bne.n	80068b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006860:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006862:	429a      	cmp	r2, r3
 8006864:	d124      	bne.n	80068b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f958 	bl	8006b1c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800686c:	e020      	b.n	80068b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d01d      	beq.n	80068b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2204      	movs	r2, #4
 8006878:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800687c:	e018      	b.n	80068b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f867 	bl	8006952 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f8da 	bl	8006a3e <CDC_ProcessReception>
      break;
 800688a:	e014      	b.n	80068b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800688c:	2100      	movs	r1, #0
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 ffef 	bl	8007872 <USBH_ClrFeature>
 8006894:	4603      	mov	r3, r0
 8006896:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80068a6:	e005      	b.n	80068b4 <USBH_CDC_Process+0x120>

    default:
      break;
 80068a8:	bf00      	nop
 80068aa:	e004      	b.n	80068b6 <USBH_CDC_Process+0x122>
      break;
 80068ac:	bf00      	nop
 80068ae:	e002      	b.n	80068b6 <USBH_CDC_Process+0x122>
      break;
 80068b0:	bf00      	nop
 80068b2:	e000      	b.n	80068b6 <USBH_CDC_Process+0x122>
      break;
 80068b4:	bf00      	nop

  }

  return status;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	22a1      	movs	r2, #161	; 0xa1
 80068e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2221      	movs	r2, #33	; 0x21
 80068ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2207      	movs	r2, #7
 80068fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2207      	movs	r2, #7
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fa81 	bl	8007e0c <USBH_CtlReq>
 800690a:	4603      	mov	r3, r0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2221      	movs	r2, #33	; 0x21
 8006922:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2207      	movs	r2, #7
 800693a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2207      	movs	r2, #7
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fa62 	bl	8007e0c <USBH_CtlReq>
 8006948:	4603      	mov	r3, r0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af02      	add	r7, sp, #8
 8006958:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006964:	2300      	movs	r3, #0
 8006966:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800696e:	2b01      	cmp	r3, #1
 8006970:	d002      	beq.n	8006978 <CDC_ProcessTransmission+0x26>
 8006972:	2b02      	cmp	r3, #2
 8006974:	d023      	beq.n	80069be <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006976:	e05e      	b.n	8006a36 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	8b12      	ldrh	r2, [r2, #24]
 8006980:	4293      	cmp	r3, r2
 8006982:	d90b      	bls.n	800699c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	69d9      	ldr	r1, [r3, #28]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8b1a      	ldrh	r2, [r3, #24]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	7b5b      	ldrb	r3, [r3, #13]
 8006990:	2001      	movs	r0, #1
 8006992:	9000      	str	r0, [sp, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fc48 	bl	800822a <USBH_BulkSendData>
 800699a:	e00b      	b.n	80069b4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	7b5b      	ldrb	r3, [r3, #13]
 80069aa:	2001      	movs	r0, #1
 80069ac:	9000      	str	r0, [sp, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 fc3b 	bl	800822a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069bc:	e03b      	b.n	8006a36 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	7b5b      	ldrb	r3, [r3, #13]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 ff5f 	bl	8008888 <USBH_LL_GetURBState>
 80069ca:	4603      	mov	r3, r0
 80069cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80069ce:	7afb      	ldrb	r3, [r7, #11]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d128      	bne.n	8006a26 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	8b12      	ldrh	r2, [r2, #24]
 80069dc:	4293      	cmp	r3, r2
 80069de:	d90e      	bls.n	80069fe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	8b12      	ldrh	r2, [r2, #24]
 80069e8:	1a9a      	subs	r2, r3, r2
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	8b12      	ldrh	r2, [r2, #24]
 80069f6:	441a      	add	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	61da      	str	r2, [r3, #28]
 80069fc:	e002      	b.n	8006a04 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a14:	e00e      	b.n	8006a34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f868 	bl	8006af4 <USBH_CDC_TransmitCallback>
      break;
 8006a24:	e006      	b.n	8006a34 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d103      	bne.n	8006a34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a34:	bf00      	nop
  }
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d002      	beq.n	8006a64 <CDC_ProcessReception+0x26>
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d00e      	beq.n	8006a80 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006a62:	e043      	b.n	8006aec <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	6a19      	ldr	r1, [r3, #32]
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	8b5a      	ldrh	r2, [r3, #26]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	7b1b      	ldrb	r3, [r3, #12]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fbff 	bl	8008274 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2204      	movs	r2, #4
 8006a7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a7e:	e035      	b.n	8006aec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	7b1b      	ldrb	r3, [r3, #12]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 fefe 	bl	8008888 <USBH_LL_GetURBState>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006a90:	7cfb      	ldrb	r3, [r7, #19]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d129      	bne.n	8006aea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	7b1b      	ldrb	r3, [r3, #12]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fe61 	bl	8008764 <USBH_LL_GetLastXferSize>
 8006aa2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d016      	beq.n	8006adc <CDC_ProcessReception+0x9e>
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	8b5b      	ldrh	r3, [r3, #26]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d910      	bls.n	8006adc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad2      	subs	r2, r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6a1a      	ldr	r2, [r3, #32]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	441a      	add	r2, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ada:	e006      	b.n	8006aea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f80f 	bl	8006b08 <USBH_CDC_ReceiveCallback>
      break;
 8006aea:	bf00      	nop
  }
}
 8006aec:	bf00      	nop
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b44:	2302      	movs	r3, #2
 8006b46:	e029      	b.n	8006b9c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	79fa      	ldrb	r2, [r7, #7]
 8006b4c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f81f 	bl	8006ba4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f001 fd31 	bl	80085fc <USBH_LL_Init>

  return USBH_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e009      	b.n	8006bca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	33e0      	adds	r3, #224	; 0xe0
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b0f      	cmp	r3, #15
 8006bce:	d9f2      	bls.n	8006bb6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e009      	b.n	8006bea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf0:	d3f1      	bcc.n	8006bd6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2240      	movs	r2, #64	; 0x40
 8006c16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d016      	beq.n	8006c8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10e      	bne.n	8006c88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c70:	1c59      	adds	r1, r3, #1
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	33de      	adds	r3, #222	; 0xde
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
 8006c86:	e004      	b.n	8006c92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	73fb      	strb	r3, [r7, #15]
 8006c8c:	e001      	b.n	8006c92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006cb6:	78fa      	ldrb	r2, [r7, #3]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d204      	bcs.n	8006cc6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006cc4:	e001      	b.n	8006cca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	70fb      	strb	r3, [r7, #3]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70bb      	strb	r3, [r7, #2]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d02:	e025      	b.n	8006d50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	221a      	movs	r2, #26
 8006d08:	fb02 f303 	mul.w	r3, r2, r3
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	3302      	adds	r3, #2
 8006d14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	795b      	ldrb	r3, [r3, #5]
 8006d1a:	78fa      	ldrb	r2, [r7, #3]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d002      	beq.n	8006d26 <USBH_FindInterface+0x4e>
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	2bff      	cmp	r3, #255	; 0xff
 8006d24:	d111      	bne.n	8006d4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d2a:	78ba      	ldrb	r2, [r7, #2]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d002      	beq.n	8006d36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d30:	78bb      	ldrb	r3, [r7, #2]
 8006d32:	2bff      	cmp	r3, #255	; 0xff
 8006d34:	d109      	bne.n	8006d4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d3a:	787a      	ldrb	r2, [r7, #1]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d002      	beq.n	8006d46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d40:	787b      	ldrb	r3, [r7, #1]
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d101      	bne.n	8006d4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	e006      	b.n	8006d58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d9d6      	bls.n	8006d04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006d56:	23ff      	movs	r3, #255	; 0xff
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 fc81 	bl	8008674 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006d72:	2101      	movs	r1, #1
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 fd9a 	bl	80088ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af04      	add	r7, sp, #16
 8006d8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d102      	bne.n	8006da6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2203      	movs	r2, #3
 8006da4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b0b      	cmp	r3, #11
 8006dae:	f200 81be 	bhi.w	800712e <USBH_Process+0x3aa>
 8006db2:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <USBH_Process+0x34>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006de9 	.word	0x08006de9
 8006dbc:	08006e1b 	.word	0x08006e1b
 8006dc0:	08006e83 	.word	0x08006e83
 8006dc4:	080070c9 	.word	0x080070c9
 8006dc8:	0800712f 	.word	0x0800712f
 8006dcc:	08006f27 	.word	0x08006f27
 8006dd0:	0800706f 	.word	0x0800706f
 8006dd4:	08006f5d 	.word	0x08006f5d
 8006dd8:	08006f7d 	.word	0x08006f7d
 8006ddc:	08006f9d 	.word	0x08006f9d
 8006de0:	08006fe1 	.word	0x08006fe1
 8006de4:	080070b1 	.word	0x080070b1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 819e 	beq.w	8007132 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006dfc:	20c8      	movs	r0, #200	; 0xc8
 8006dfe:	f001 fd9d 	bl	800893c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fc93 	bl	800872e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e18:	e18b      	b.n	8007132 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d107      	bne.n	8006e34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e32:	e18d      	b.n	8007150 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e3e:	d914      	bls.n	8006e6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e46:	3301      	adds	r3, #1
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d903      	bls.n	8006e62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	220d      	movs	r2, #13
 8006e5e:	701a      	strb	r2, [r3, #0]
      break;
 8006e60:	e176      	b.n	8007150 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	701a      	strb	r2, [r3, #0]
      break;
 8006e68:	e172      	b.n	8007150 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e70:	f103 020a 	add.w	r2, r3, #10
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006e7a:	200a      	movs	r0, #10
 8006e7c:	f001 fd5e 	bl	800893c <USBH_Delay>
      break;
 8006e80:	e166      	b.n	8007150 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e92:	2104      	movs	r1, #4
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006e98:	2064      	movs	r0, #100	; 0x64
 8006e9a:	f001 fd4f 	bl	800893c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fc1e 	bl	80086e0 <USBH_LL_GetSpeed>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2205      	movs	r2, #5
 8006eb2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 fa29 	bl	800830e <USBH_AllocPipe>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006ec4:	2180      	movs	r1, #128	; 0x80
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fa21 	bl	800830e <USBH_AllocPipe>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	461a      	mov	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	7919      	ldrb	r1, [r3, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ee8:	b292      	uxth	r2, r2
 8006eea:	9202      	str	r2, [sp, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	9201      	str	r2, [sp, #4]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2280      	movs	r2, #128	; 0x80
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 f9da 	bl	80082b0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	7959      	ldrb	r1, [r3, #5]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f10:	b292      	uxth	r2, r2
 8006f12:	9202      	str	r2, [sp, #8]
 8006f14:	2200      	movs	r2, #0
 8006f16:	9201      	str	r2, [sp, #4]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 f9c6 	bl	80082b0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f24:	e114      	b.n	8007150 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f918 	bl	800715c <USBH_HandleEnum>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f040 80fe 	bne.w	8007136 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d103      	bne.n	8006f54 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2208      	movs	r2, #8
 8006f50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f52:	e0f0      	b.n	8007136 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2207      	movs	r2, #7
 8006f58:	701a      	strb	r2, [r3, #0]
      break;
 8006f5a:	e0ec      	b.n	8007136 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 80e9 	beq.w	800713a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f6e:	2101      	movs	r1, #1
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2208      	movs	r2, #8
 8006f78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006f7a:	e0de      	b.n	800713a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fc2c 	bl	80077e4 <USBH_SetCfg>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 80d5 	bne.w	800713e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2209      	movs	r2, #9
 8006f98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f9a:	e0d0      	b.n	800713e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d016      	beq.n	8006fd8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006faa:	2101      	movs	r1, #1
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fc3c 	bl	800782a <USBH_SetFeature>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d103      	bne.n	8006fc6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fc4:	e0bd      	b.n	8007142 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	f040 80b9 	bne.w	8007142 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	220a      	movs	r2, #10
 8006fd4:	701a      	strb	r2, [r3, #0]
      break;
 8006fd6:	e0b4      	b.n	8007142 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	220a      	movs	r2, #10
 8006fdc:	701a      	strb	r2, [r3, #0]
      break;
 8006fde:	e0b0      	b.n	8007142 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 80ad 	beq.w	8007146 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73fb      	strb	r3, [r7, #15]
 8006ff8:	e016      	b.n	8007028 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ffa:	7bfa      	ldrb	r2, [r7, #15]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	32de      	adds	r2, #222	; 0xde
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	791a      	ldrb	r2, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800700c:	429a      	cmp	r2, r3
 800700e:	d108      	bne.n	8007022 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007010:	7bfa      	ldrb	r2, [r7, #15]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	32de      	adds	r2, #222	; 0xde
 8007016:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007020:	e005      	b.n	800702e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	3301      	adds	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0e5      	beq.n	8006ffa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d016      	beq.n	8007066 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2206      	movs	r2, #6
 800704e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007056:	2103      	movs	r1, #3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800705c:	e073      	b.n	8007146 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	220d      	movs	r2, #13
 8007062:	701a      	strb	r2, [r3, #0]
      break;
 8007064:	e06f      	b.n	8007146 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	220d      	movs	r2, #13
 800706a:	701a      	strb	r2, [r3, #0]
      break;
 800706c:	e06b      	b.n	8007146 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d017      	beq.n	80070a8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
 8007084:	4603      	mov	r3, r0
 8007086:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d103      	bne.n	8007098 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	220b      	movs	r2, #11
 8007094:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007096:	e058      	b.n	800714a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d154      	bne.n	800714a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	220d      	movs	r2, #13
 80070a4:	701a      	strb	r2, [r3, #0]
      break;
 80070a6:	e050      	b.n	800714a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	220d      	movs	r2, #13
 80070ac:	701a      	strb	r2, [r3, #0]
      break;
 80070ae:	e04c      	b.n	800714a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d049      	beq.n	800714e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
      }
      break;
 80070c6:	e042      	b.n	800714e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff fd67 	bl	8006ba4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007104:	2105      	movs	r1, #5
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	d107      	bne.n	8007126 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fe20 	bl	8006d64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007124:	e014      	b.n	8007150 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 faa4 	bl	8008674 <USBH_LL_Start>
      break;
 800712c:	e010      	b.n	8007150 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800712e:	bf00      	nop
 8007130:	e00e      	b.n	8007150 <USBH_Process+0x3cc>
      break;
 8007132:	bf00      	nop
 8007134:	e00c      	b.n	8007150 <USBH_Process+0x3cc>
      break;
 8007136:	bf00      	nop
 8007138:	e00a      	b.n	8007150 <USBH_Process+0x3cc>
    break;
 800713a:	bf00      	nop
 800713c:	e008      	b.n	8007150 <USBH_Process+0x3cc>
      break;
 800713e:	bf00      	nop
 8007140:	e006      	b.n	8007150 <USBH_Process+0x3cc>
      break;
 8007142:	bf00      	nop
 8007144:	e004      	b.n	8007150 <USBH_Process+0x3cc>
      break;
 8007146:	bf00      	nop
 8007148:	e002      	b.n	8007150 <USBH_Process+0x3cc>
      break;
 800714a:	bf00      	nop
 800714c:	e000      	b.n	8007150 <USBH_Process+0x3cc>
      break;
 800714e:	bf00      	nop
  }
  return USBH_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop

0800715c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af04      	add	r7, sp, #16
 8007162:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007164:	2301      	movs	r3, #1
 8007166:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007168:	2301      	movs	r3, #1
 800716a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b07      	cmp	r3, #7
 8007172:	f200 81c1 	bhi.w	80074f8 <USBH_HandleEnum+0x39c>
 8007176:	a201      	add	r2, pc, #4	; (adr r2, 800717c <USBH_HandleEnum+0x20>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	0800719d 	.word	0x0800719d
 8007180:	0800725b 	.word	0x0800725b
 8007184:	080072c5 	.word	0x080072c5
 8007188:	08007353 	.word	0x08007353
 800718c:	080073bd 	.word	0x080073bd
 8007190:	0800742d 	.word	0x0800742d
 8007194:	08007473 	.word	0x08007473
 8007198:	080074b9 	.word	0x080074b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800719c:	2108      	movs	r1, #8
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa50 	bl	8007644 <USBH_Get_DevDesc>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d130      	bne.n	8007210 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7919      	ldrb	r1, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80071d2:	b292      	uxth	r2, r2
 80071d4:	9202      	str	r2, [sp, #8]
 80071d6:	2200      	movs	r2, #0
 80071d8:	9201      	str	r2, [sp, #4]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4603      	mov	r3, r0
 80071de:	2280      	movs	r2, #128	; 0x80
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 f865 	bl	80082b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7959      	ldrb	r1, [r3, #5]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071fa:	b292      	uxth	r2, r2
 80071fc:	9202      	str	r2, [sp, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	9201      	str	r2, [sp, #4]
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	4603      	mov	r3, r0
 8007206:	2200      	movs	r2, #0
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f851 	bl	80082b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800720e:	e175      	b.n	80074fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b03      	cmp	r3, #3
 8007214:	f040 8172 	bne.w	80074fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800721e:	3301      	adds	r3, #1
 8007220:	b2da      	uxtb	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800722e:	2b03      	cmp	r3, #3
 8007230:	d903      	bls.n	800723a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	220d      	movs	r2, #13
 8007236:	701a      	strb	r2, [r3, #0]
      break;
 8007238:	e160      	b.n	80074fc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	795b      	ldrb	r3, [r3, #5]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f885 	bl	8008350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	791b      	ldrb	r3, [r3, #4]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f87f 	bl	8008350 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	701a      	strb	r2, [r3, #0]
      break;
 8007258:	e150      	b.n	80074fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800725a:	2112      	movs	r1, #18
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f9f1 	bl	8007644 <USBH_Get_DevDesc>
 8007262:	4603      	mov	r3, r0
 8007264:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007272:	e145      	b.n	8007500 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	2b03      	cmp	r3, #3
 8007278:	f040 8142 	bne.w	8007500 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007282:	3301      	adds	r3, #1
 8007284:	b2da      	uxtb	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007292:	2b03      	cmp	r3, #3
 8007294:	d903      	bls.n	800729e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	220d      	movs	r2, #13
 800729a:	701a      	strb	r2, [r3, #0]
      break;
 800729c:	e130      	b.n	8007500 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	795b      	ldrb	r3, [r3, #5]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 f853 	bl	8008350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	791b      	ldrb	r3, [r3, #4]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f84d 	bl	8008350 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
      break;
 80072c2:	e11d      	b.n	8007500 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80072c4:	2101      	movs	r1, #1
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa68 	bl	800779c <USBH_SetAddress>
 80072cc:	4603      	mov	r3, r0
 80072ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d132      	bne.n	800733c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80072d6:	2002      	movs	r0, #2
 80072d8:	f001 fb30 	bl	800893c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2203      	movs	r2, #3
 80072e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	7919      	ldrb	r1, [r3, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80072fe:	b292      	uxth	r2, r2
 8007300:	9202      	str	r2, [sp, #8]
 8007302:	2200      	movs	r2, #0
 8007304:	9201      	str	r2, [sp, #4]
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	4603      	mov	r3, r0
 800730a:	2280      	movs	r2, #128	; 0x80
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 ffcf 	bl	80082b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	7959      	ldrb	r1, [r3, #5]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007326:	b292      	uxth	r2, r2
 8007328:	9202      	str	r2, [sp, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	9201      	str	r2, [sp, #4]
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	4603      	mov	r3, r0
 8007332:	2200      	movs	r2, #0
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 ffbb 	bl	80082b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800733a:	e0e3      	b.n	8007504 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	2b03      	cmp	r3, #3
 8007340:	f040 80e0 	bne.w	8007504 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	220d      	movs	r2, #13
 8007348:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	705a      	strb	r2, [r3, #1]
      break;
 8007350:	e0d8      	b.n	8007504 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007352:	2109      	movs	r1, #9
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f99d 	bl	8007694 <USBH_Get_CfgDesc>
 800735a:	4603      	mov	r3, r0
 800735c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d103      	bne.n	800736c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2204      	movs	r2, #4
 8007368:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800736a:	e0cd      	b.n	8007508 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b03      	cmp	r3, #3
 8007370:	f040 80ca 	bne.w	8007508 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800737a:	3301      	adds	r3, #1
 800737c:	b2da      	uxtb	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800738a:	2b03      	cmp	r3, #3
 800738c:	d903      	bls.n	8007396 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	220d      	movs	r2, #13
 8007392:	701a      	strb	r2, [r3, #0]
      break;
 8007394:	e0b8      	b.n	8007508 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	795b      	ldrb	r3, [r3, #5]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 ffd7 	bl	8008350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	791b      	ldrb	r3, [r3, #4]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 ffd1 	bl	8008350 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
      break;
 80073ba:	e0a5      	b.n	8007508 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f965 	bl	8007694 <USBH_Get_CfgDesc>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2205      	movs	r2, #5
 80073d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073da:	e097      	b.n	800750c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	f040 8094 	bne.w	800750c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073ea:	3301      	adds	r3, #1
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d903      	bls.n	8007406 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	220d      	movs	r2, #13
 8007402:	701a      	strb	r2, [r3, #0]
      break;
 8007404:	e082      	b.n	800750c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	795b      	ldrb	r3, [r3, #5]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 ff9f 	bl	8008350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	791b      	ldrb	r3, [r3, #4]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 ff99 	bl	8008350 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	701a      	strb	r2, [r3, #0]
      break;
 800742a:	e06f      	b.n	800750c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007432:	2b00      	cmp	r3, #0
 8007434:	d019      	beq.n	800746a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007442:	23ff      	movs	r3, #255	; 0xff
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f949 	bl	80076dc <USBH_Get_StringDesc>
 800744a:	4603      	mov	r3, r0
 800744c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d103      	bne.n	800745c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2206      	movs	r2, #6
 8007458:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800745a:	e059      	b.n	8007510 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	2b03      	cmp	r3, #3
 8007460:	d156      	bne.n	8007510 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2206      	movs	r2, #6
 8007466:	705a      	strb	r2, [r3, #1]
      break;
 8007468:	e052      	b.n	8007510 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2206      	movs	r2, #6
 800746e:	705a      	strb	r2, [r3, #1]
      break;
 8007470:	e04e      	b.n	8007510 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007478:	2b00      	cmp	r3, #0
 800747a:	d019      	beq.n	80074b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007488:	23ff      	movs	r3, #255	; 0xff
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f926 	bl	80076dc <USBH_Get_StringDesc>
 8007490:	4603      	mov	r3, r0
 8007492:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2207      	movs	r2, #7
 800749e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074a0:	e038      	b.n	8007514 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d135      	bne.n	8007514 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2207      	movs	r2, #7
 80074ac:	705a      	strb	r2, [r3, #1]
      break;
 80074ae:	e031      	b.n	8007514 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2207      	movs	r2, #7
 80074b4:	705a      	strb	r2, [r3, #1]
      break;
 80074b6:	e02d      	b.n	8007514 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d017      	beq.n	80074f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80074ce:	23ff      	movs	r3, #255	; 0xff
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f903 	bl	80076dc <USBH_Get_StringDesc>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80074e4:	e018      	b.n	8007518 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d115      	bne.n	8007518 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
      break;
 80074f0:	e012      	b.n	8007518 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]
      break;
 80074f6:	e00f      	b.n	8007518 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80074f8:	bf00      	nop
 80074fa:	e00e      	b.n	800751a <USBH_HandleEnum+0x3be>
      break;
 80074fc:	bf00      	nop
 80074fe:	e00c      	b.n	800751a <USBH_HandleEnum+0x3be>
      break;
 8007500:	bf00      	nop
 8007502:	e00a      	b.n	800751a <USBH_HandleEnum+0x3be>
      break;
 8007504:	bf00      	nop
 8007506:	e008      	b.n	800751a <USBH_HandleEnum+0x3be>
      break;
 8007508:	bf00      	nop
 800750a:	e006      	b.n	800751a <USBH_HandleEnum+0x3be>
      break;
 800750c:	bf00      	nop
 800750e:	e004      	b.n	800751a <USBH_HandleEnum+0x3be>
      break;
 8007510:	bf00      	nop
 8007512:	e002      	b.n	800751a <USBH_HandleEnum+0x3be>
      break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <USBH_HandleEnum+0x3be>
      break;
 8007518:	bf00      	nop
  }
  return Status;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f804 	bl	8007566 <USBH_HandleSof>
}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b0b      	cmp	r3, #11
 8007576:	d10a      	bne.n	800758e <USBH_HandleSof+0x28>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
  }
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80075a6:	bf00      	nop
}
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80075c2:	bf00      	nop
}
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 f844 	bl	80086aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	791b      	ldrb	r3, [r3, #4]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fe91 	bl	8008350 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	795b      	ldrb	r3, [r3, #5]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fe8b 	bl	8008350 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af02      	add	r7, sp, #8
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007656:	78fb      	ldrb	r3, [r7, #3]
 8007658:	b29b      	uxth	r3, r3
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	4613      	mov	r3, r2
 800765e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007662:	2100      	movs	r1, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f864 	bl	8007732 <USBH_GetDescriptor>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f203 3026 	addw	r0, r3, #806	; 0x326
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007680:	78fa      	ldrb	r2, [r7, #3]
 8007682:	b292      	uxth	r2, r2
 8007684:	4619      	mov	r1, r3
 8007686:	f000 f918 	bl	80078ba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af02      	add	r7, sp, #8
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	331c      	adds	r3, #28
 80076a4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80076a6:	887b      	ldrh	r3, [r7, #2]
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b0:	2100      	movs	r1, #0
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f83d 	bl	8007732 <USBH_GetDescriptor>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d107      	bne.n	80076d2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80076c2:	887b      	ldrh	r3, [r7, #2]
 80076c4:	461a      	mov	r2, r3
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f987 	bl	80079dc <USBH_ParseCfgDesc>
 80076ce:	4603      	mov	r3, r0
 80076d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	607a      	str	r2, [r7, #4]
 80076e6:	461a      	mov	r2, r3
 80076e8:	460b      	mov	r3, r1
 80076ea:	72fb      	strb	r3, [r7, #11]
 80076ec:	4613      	mov	r3, r2
 80076ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80076f8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007700:	893b      	ldrh	r3, [r7, #8]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	460b      	mov	r3, r1
 8007706:	2100      	movs	r1, #0
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 f812 	bl	8007732 <USBH_GetDescriptor>
 800770e:	4603      	mov	r3, r0
 8007710:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d107      	bne.n	8007728 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800771e:	893a      	ldrh	r2, [r7, #8]
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fb24 	bl	8007d70 <USBH_ParseStringDesc>
  }

  return status;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	607b      	str	r3, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	72fb      	strb	r3, [r7, #11]
 8007740:	4613      	mov	r3, r2
 8007742:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	789b      	ldrb	r3, [r3, #2]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d11c      	bne.n	8007786 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007752:	b2da      	uxtb	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2206      	movs	r2, #6
 800775c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	893a      	ldrh	r2, [r7, #8]
 8007762:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007764:	893b      	ldrh	r3, [r7, #8]
 8007766:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800776a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800776e:	d104      	bne.n	800777a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f240 4209 	movw	r2, #1033	; 0x409
 8007776:	829a      	strh	r2, [r3, #20]
 8007778:	e002      	b.n	8007780 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8b3a      	ldrh	r2, [r7, #24]
 8007784:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007786:	8b3b      	ldrh	r3, [r7, #24]
 8007788:	461a      	mov	r2, r3
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 fb3d 	bl	8007e0c <USBH_CtlReq>
 8007792:	4603      	mov	r3, r0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	789b      	ldrb	r3, [r3, #2]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d10f      	bne.n	80077d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2205      	movs	r2, #5
 80077ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	b29a      	uxth	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80077d0:	2200      	movs	r2, #0
 80077d2:	2100      	movs	r1, #0
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fb19 	bl	8007e0c <USBH_CtlReq>
 80077da:	4603      	mov	r3, r0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	789b      	ldrb	r3, [r3, #2]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d10e      	bne.n	8007816 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2209      	movs	r2, #9
 8007802:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	887a      	ldrh	r2, [r7, #2]
 8007808:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007816:	2200      	movs	r2, #0
 8007818:	2100      	movs	r1, #0
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 faf6 	bl	8007e0c <USBH_CtlReq>
 8007820:	4603      	mov	r3, r0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	460b      	mov	r3, r1
 8007834:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	789b      	ldrb	r3, [r3, #2]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d10f      	bne.n	800785e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2203      	movs	r2, #3
 8007848:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	b29a      	uxth	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800785e:	2200      	movs	r2, #0
 8007860:	2100      	movs	r1, #0
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fad2 	bl	8007e0c <USBH_CtlReq>
 8007868:	4603      	mov	r3, r0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	789b      	ldrb	r3, [r3, #2]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d10f      	bne.n	80078a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2202      	movs	r2, #2
 800788a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	b29a      	uxth	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 faae 	bl	8007e0c <USBH_CtlReq>
 80078b0:	4603      	mov	r3, r0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	4613      	mov	r3, r2
 80078c6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	785a      	ldrb	r2, [r3, #1]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	3302      	adds	r3, #2
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	3303      	adds	r3, #3
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	4313      	orrs	r3, r2
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	791a      	ldrb	r2, [r3, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	795a      	ldrb	r2, [r3, #5]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	799a      	ldrb	r2, [r3, #6]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	79da      	ldrb	r2, [r3, #7]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	79db      	ldrb	r3, [r3, #7]
 8007918:	2b20      	cmp	r3, #32
 800791a:	dc11      	bgt.n	8007940 <USBH_ParseDevDesc+0x86>
 800791c:	2b08      	cmp	r3, #8
 800791e:	db16      	blt.n	800794e <USBH_ParseDevDesc+0x94>
 8007920:	3b08      	subs	r3, #8
 8007922:	2201      	movs	r2, #1
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800792c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007930:	2b00      	cmp	r3, #0
 8007932:	bf14      	ite	ne
 8007934:	2301      	movne	r3, #1
 8007936:	2300      	moveq	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d102      	bne.n	8007944 <USBH_ParseDevDesc+0x8a>
 800793e:	e006      	b.n	800794e <USBH_ParseDevDesc+0x94>
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d104      	bne.n	800794e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	79da      	ldrb	r2, [r3, #7]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	71da      	strb	r2, [r3, #7]
      break;
 800794c:	e003      	b.n	8007956 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2240      	movs	r2, #64	; 0x40
 8007952:	71da      	strb	r2, [r3, #7]
      break;
 8007954:	bf00      	nop
  }

  if (length > 8U)
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	2b08      	cmp	r3, #8
 800795a:	d939      	bls.n	80079d0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	3308      	adds	r3, #8
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b29a      	uxth	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	3309      	adds	r3, #9
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	b29b      	uxth	r3, r3
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	b29b      	uxth	r3, r3
 8007970:	4313      	orrs	r3, r2
 8007972:	b29a      	uxth	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	330a      	adds	r3, #10
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b29a      	uxth	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	330b      	adds	r3, #11
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b29b      	uxth	r3, r3
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	b29b      	uxth	r3, r3
 800798c:	4313      	orrs	r3, r2
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	330c      	adds	r3, #12
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b29a      	uxth	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	330d      	adds	r3, #13
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4313      	orrs	r3, r2
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	7b9a      	ldrb	r2, [r3, #14]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	7bda      	ldrb	r2, [r3, #15]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	7c1a      	ldrb	r2, [r3, #16]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	7c5a      	ldrb	r2, [r3, #17]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	745a      	strb	r2, [r3, #17]
  }
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08c      	sub	sp, #48	; 0x30
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	785a      	ldrb	r2, [r3, #1]
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	3302      	adds	r3, #2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	3303      	adds	r3, #3
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	4313      	orrs	r3, r2
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a38:	bf28      	it	cs
 8007a3a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	791a      	ldrb	r2, [r3, #4]
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	795a      	ldrb	r2, [r3, #5]
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	799a      	ldrb	r2, [r3, #6]
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	79da      	ldrb	r2, [r3, #7]
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	7a1a      	ldrb	r2, [r3, #8]
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b09      	cmp	r3, #9
 8007a72:	d002      	beq.n	8007a7a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	2209      	movs	r2, #9
 8007a78:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	2b09      	cmp	r3, #9
 8007a7e:	f240 809d 	bls.w	8007bbc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a82:	2309      	movs	r3, #9
 8007a84:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a8a:	e081      	b.n	8007b90 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a8c:	f107 0316 	add.w	r3, r7, #22
 8007a90:	4619      	mov	r1, r3
 8007a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a94:	f000 f99f 	bl	8007dd6 <USBH_GetNextDesc>
 8007a98:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d176      	bne.n	8007b90 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b09      	cmp	r3, #9
 8007aa8:	d002      	beq.n	8007ab0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	2209      	movs	r2, #9
 8007aae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ab4:	221a      	movs	r2, #26
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	3308      	adds	r3, #8
 8007abc:	6a3a      	ldr	r2, [r7, #32]
 8007abe:	4413      	add	r3, r2
 8007ac0:	3302      	adds	r3, #2
 8007ac2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ac6:	69f8      	ldr	r0, [r7, #28]
 8007ac8:	f000 f87e 	bl	8007bc8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ad6:	e043      	b.n	8007b60 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ad8:	f107 0316 	add.w	r3, r7, #22
 8007adc:	4619      	mov	r1, r3
 8007ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ae0:	f000 f979 	bl	8007dd6 <USBH_GetNextDesc>
 8007ae4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d138      	bne.n	8007b60 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	795b      	ldrb	r3, [r3, #5]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d10f      	bne.n	8007b16 <USBH_ParseCfgDesc+0x13a>
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	799b      	ldrb	r3, [r3, #6]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d10b      	bne.n	8007b16 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	79db      	ldrb	r3, [r3, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10f      	bne.n	8007b26 <USBH_ParseCfgDesc+0x14a>
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b09      	cmp	r3, #9
 8007b0c:	d00b      	beq.n	8007b26 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	2209      	movs	r2, #9
 8007b12:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b14:	e007      	b.n	8007b26 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b07      	cmp	r3, #7
 8007b1c:	d004      	beq.n	8007b28 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	2207      	movs	r2, #7
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	e000      	b.n	8007b28 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b26:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b30:	3201      	adds	r2, #1
 8007b32:	00d2      	lsls	r2, r2, #3
 8007b34:	211a      	movs	r1, #26
 8007b36:	fb01 f303 	mul.w	r3, r1, r3
 8007b3a:	4413      	add	r3, r2
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	6a3a      	ldr	r2, [r7, #32]
 8007b40:	4413      	add	r3, r2
 8007b42:	3304      	adds	r3, #4
 8007b44:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b48:	69b9      	ldr	r1, [r7, #24]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f86b 	bl	8007c26 <USBH_ParseEPDesc>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007b56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	791b      	ldrb	r3, [r3, #4]
 8007b64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d204      	bcs.n	8007b76 <USBH_ParseCfgDesc+0x19a>
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	885a      	ldrh	r2, [r3, #2]
 8007b70:	8afb      	ldrh	r3, [r7, #22]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d8b0      	bhi.n	8007ad8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	791b      	ldrb	r3, [r3, #4]
 8007b7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d201      	bcs.n	8007b86 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e01c      	b.n	8007bc0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d805      	bhi.n	8007ba4 <USBH_ParseCfgDesc+0x1c8>
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	885a      	ldrh	r2, [r3, #2]
 8007b9c:	8afb      	ldrh	r3, [r7, #22]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	f63f af74 	bhi.w	8007a8c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	791b      	ldrb	r3, [r3, #4]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	bf28      	it	cs
 8007bac:	2302      	movcs	r3, #2
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d201      	bcs.n	8007bbc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e001      	b.n	8007bc0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3730      	adds	r7, #48	; 0x30
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	785a      	ldrb	r2, [r3, #1]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	789a      	ldrb	r2, [r3, #2]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	78da      	ldrb	r2, [r3, #3]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	791a      	ldrb	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	795a      	ldrb	r2, [r3, #5]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	799a      	ldrb	r2, [r3, #6]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	79da      	ldrb	r2, [r3, #7]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	7a1a      	ldrb	r2, [r3, #8]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	721a      	strb	r2, [r3, #8]
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b087      	sub	sp, #28
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	781a      	ldrb	r2, [r3, #0]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	785a      	ldrb	r2, [r3, #1]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	789a      	ldrb	r2, [r3, #2]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	78da      	ldrb	r2, [r3, #3]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3305      	adds	r3, #5
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	799a      	ldrb	r2, [r3, #6]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	889b      	ldrh	r3, [r3, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007c82:	2303      	movs	r3, #3
 8007c84:	75fb      	strb	r3, [r7, #23]
 8007c86:	e033      	b.n	8007cf0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	889b      	ldrh	r3, [r3, #4]
 8007c8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c90:	f023 0307 	bic.w	r3, r3, #7
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	889b      	ldrh	r3, [r3, #4]
 8007c9e:	b21a      	sxth	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	b299      	uxth	r1, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3305      	adds	r3, #5
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d110      	bne.n	8007ce2 <USBH_ParseEPDesc+0xbc>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	b299      	uxth	r1, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3305      	adds	r3, #5
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	b21b      	sxth	r3, r3
 8007cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cde:	b21b      	sxth	r3, r3
 8007ce0:	e001      	b.n	8007ce6 <USBH_ParseEPDesc+0xc0>
 8007ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	b21b      	sxth	r3, r3
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d116      	bne.n	8007d28 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	78db      	ldrb	r3, [r3, #3]
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d005      	beq.n	8007d12 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	78db      	ldrb	r3, [r3, #3]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d127      	bne.n	8007d62 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	799b      	ldrb	r3, [r3, #6]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <USBH_ParseEPDesc+0xfc>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	799b      	ldrb	r3, [r3, #6]
 8007d1e:	2b10      	cmp	r3, #16
 8007d20:	d91f      	bls.n	8007d62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007d22:	2303      	movs	r3, #3
 8007d24:	75fb      	strb	r3, [r7, #23]
 8007d26:	e01c      	b.n	8007d62 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	78db      	ldrb	r3, [r3, #3]
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d10a      	bne.n	8007d4a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	799b      	ldrb	r3, [r3, #6]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <USBH_ParseEPDesc+0x11e>
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	799b      	ldrb	r3, [r3, #6]
 8007d40:	2b10      	cmp	r3, #16
 8007d42:	d90e      	bls.n	8007d62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007d44:	2303      	movs	r3, #3
 8007d46:	75fb      	strb	r3, [r7, #23]
 8007d48:	e00b      	b.n	8007d62 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	78db      	ldrb	r3, [r3, #3]
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d105      	bne.n	8007d62 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	799b      	ldrb	r3, [r3, #6]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d120      	bne.n	8007dca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	1e9a      	subs	r2, r3, #2
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bf28      	it	cs
 8007d94:	4613      	movcs	r3, r2
 8007d96:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3302      	adds	r3, #2
 8007d9c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d9e:	2300      	movs	r3, #0
 8007da0:	82fb      	strh	r3, [r7, #22]
 8007da2:	e00b      	b.n	8007dbc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007da4:	8afb      	ldrh	r3, [r7, #22]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	781a      	ldrb	r2, [r3, #0]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	3301      	adds	r3, #1
 8007db4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007db6:	8afb      	ldrh	r3, [r7, #22]
 8007db8:	3302      	adds	r3, #2
 8007dba:	82fb      	strh	r3, [r7, #22]
 8007dbc:	8afa      	ldrh	r2, [r7, #22]
 8007dbe:	8abb      	ldrh	r3, [r7, #20]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d3ef      	bcc.n	8007da4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]
  }
}
 8007dca:	bf00      	nop
 8007dcc:	371c      	adds	r7, #28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	881a      	ldrh	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	4413      	add	r3, r2
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	789b      	ldrb	r3, [r3, #2]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d002      	beq.n	8007e2c <USBH_CtlReq+0x20>
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d00f      	beq.n	8007e4a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e2a:	e027      	b.n	8007e7c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	88fa      	ldrh	r2, [r7, #6]
 8007e36:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2202      	movs	r2, #2
 8007e42:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e44:	2301      	movs	r3, #1
 8007e46:	75fb      	strb	r3, [r7, #23]
      break;
 8007e48:	e018      	b.n	8007e7c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 f81c 	bl	8007e88 <USBH_HandleControl>
 8007e50:	4603      	mov	r3, r0
 8007e52:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <USBH_CtlReq+0x54>
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d106      	bne.n	8007e6e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	761a      	strb	r2, [r3, #24]
      break;
 8007e6c:	e005      	b.n	8007e7a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d102      	bne.n	8007e7a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	709a      	strb	r2, [r3, #2]
      break;
 8007e7a:	bf00      	nop
  }
  return status;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e90:	2301      	movs	r3, #1
 8007e92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	7e1b      	ldrb	r3, [r3, #24]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	2b0a      	cmp	r3, #10
 8007ea0:	f200 8156 	bhi.w	8008150 <USBH_HandleControl+0x2c8>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <USBH_HandleControl+0x24>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ed9 	.word	0x08007ed9
 8007eb0:	08007ef3 	.word	0x08007ef3
 8007eb4:	08007f5d 	.word	0x08007f5d
 8007eb8:	08007f83 	.word	0x08007f83
 8007ebc:	08007fbb 	.word	0x08007fbb
 8007ec0:	08007fe5 	.word	0x08007fe5
 8007ec4:	08008037 	.word	0x08008037
 8007ec8:	08008059 	.word	0x08008059
 8007ecc:	08008095 	.word	0x08008095
 8007ed0:	080080bb 	.word	0x080080bb
 8007ed4:	080080f9 	.word	0x080080f9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f103 0110 	add.w	r1, r3, #16
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	795b      	ldrb	r3, [r3, #5]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f943 	bl	8008170 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	761a      	strb	r2, [r3, #24]
      break;
 8007ef0:	e139      	b.n	8008166 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	795b      	ldrb	r3, [r3, #5]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fcc5 	bl	8008888 <USBH_LL_GetURBState>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d11e      	bne.n	8007f46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7c1b      	ldrb	r3, [r3, #16]
 8007f0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	8adb      	ldrh	r3, [r3, #22]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f1a:	7b7b      	ldrb	r3, [r7, #13]
 8007f1c:	2b80      	cmp	r3, #128	; 0x80
 8007f1e:	d103      	bne.n	8007f28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2203      	movs	r2, #3
 8007f24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f26:	e115      	b.n	8008154 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2205      	movs	r2, #5
 8007f2c:	761a      	strb	r2, [r3, #24]
      break;
 8007f2e:	e111      	b.n	8008154 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007f30:	7b7b      	ldrb	r3, [r7, #13]
 8007f32:	2b80      	cmp	r3, #128	; 0x80
 8007f34:	d103      	bne.n	8007f3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2209      	movs	r2, #9
 8007f3a:	761a      	strb	r2, [r3, #24]
      break;
 8007f3c:	e10a      	b.n	8008154 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2207      	movs	r2, #7
 8007f42:	761a      	strb	r2, [r3, #24]
      break;
 8007f44:	e106      	b.n	8008154 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d003      	beq.n	8007f54 <USBH_HandleControl+0xcc>
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	f040 8100 	bne.w	8008154 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	220b      	movs	r2, #11
 8007f58:	761a      	strb	r2, [r3, #24]
      break;
 8007f5a:	e0fb      	b.n	8008154 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6899      	ldr	r1, [r3, #8]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	899a      	ldrh	r2, [r3, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	791b      	ldrb	r3, [r3, #4]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f93a 	bl	80081ee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	761a      	strb	r2, [r3, #24]
      break;
 8007f80:	e0f1      	b.n	8008166 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	791b      	ldrb	r3, [r3, #4]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fc7d 	bl	8008888 <USBH_LL_GetURBState>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d102      	bne.n	8007f9e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2209      	movs	r2, #9
 8007f9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b05      	cmp	r3, #5
 8007fa2:	d102      	bne.n	8007faa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fa8:	e0d6      	b.n	8008158 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	f040 80d3 	bne.w	8008158 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	220b      	movs	r2, #11
 8007fb6:	761a      	strb	r2, [r3, #24]
      break;
 8007fb8:	e0ce      	b.n	8008158 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6899      	ldr	r1, [r3, #8]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	899a      	ldrh	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	795b      	ldrb	r3, [r3, #5]
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	9000      	str	r0, [sp, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f8ea 	bl	80081a4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2206      	movs	r2, #6
 8007fe0:	761a      	strb	r2, [r3, #24]
      break;
 8007fe2:	e0c0      	b.n	8008166 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	795b      	ldrb	r3, [r3, #5]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc4c 	bl	8008888 <USBH_LL_GetURBState>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d103      	bne.n	8008002 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2207      	movs	r2, #7
 8007ffe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008000:	e0ac      	b.n	800815c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b05      	cmp	r3, #5
 8008006:	d105      	bne.n	8008014 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	220c      	movs	r2, #12
 800800c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800800e:	2303      	movs	r3, #3
 8008010:	73fb      	strb	r3, [r7, #15]
      break;
 8008012:	e0a3      	b.n	800815c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d103      	bne.n	8008022 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2205      	movs	r2, #5
 800801e:	761a      	strb	r2, [r3, #24]
      break;
 8008020:	e09c      	b.n	800815c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	2b04      	cmp	r3, #4
 8008026:	f040 8099 	bne.w	800815c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	220b      	movs	r2, #11
 800802e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008030:	2302      	movs	r3, #2
 8008032:	73fb      	strb	r3, [r7, #15]
      break;
 8008034:	e092      	b.n	800815c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	791b      	ldrb	r3, [r3, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	2100      	movs	r1, #0
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8d5 	bl	80081ee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800804a:	b29a      	uxth	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2208      	movs	r2, #8
 8008054:	761a      	strb	r2, [r3, #24]

      break;
 8008056:	e086      	b.n	8008166 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	791b      	ldrb	r3, [r3, #4]
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fc12 	bl	8008888 <USBH_LL_GetURBState>
 8008064:	4603      	mov	r3, r0
 8008066:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d105      	bne.n	800807a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	220d      	movs	r2, #13
 8008072:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008078:	e072      	b.n	8008160 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b04      	cmp	r3, #4
 800807e:	d103      	bne.n	8008088 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	220b      	movs	r2, #11
 8008084:	761a      	strb	r2, [r3, #24]
      break;
 8008086:	e06b      	b.n	8008160 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	2b05      	cmp	r3, #5
 800808c:	d168      	bne.n	8008160 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800808e:	2303      	movs	r3, #3
 8008090:	73fb      	strb	r3, [r7, #15]
      break;
 8008092:	e065      	b.n	8008160 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	795b      	ldrb	r3, [r3, #5]
 8008098:	2201      	movs	r2, #1
 800809a:	9200      	str	r2, [sp, #0]
 800809c:	2200      	movs	r2, #0
 800809e:	2100      	movs	r1, #0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f87f 	bl	80081a4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	220a      	movs	r2, #10
 80080b6:	761a      	strb	r2, [r3, #24]
      break;
 80080b8:	e055      	b.n	8008166 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	795b      	ldrb	r3, [r3, #5]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fbe1 	bl	8008888 <USBH_LL_GetURBState>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d105      	bne.n	80080dc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	220d      	movs	r2, #13
 80080d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080da:	e043      	b.n	8008164 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d103      	bne.n	80080ea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2209      	movs	r2, #9
 80080e6:	761a      	strb	r2, [r3, #24]
      break;
 80080e8:	e03c      	b.n	8008164 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d139      	bne.n	8008164 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	220b      	movs	r2, #11
 80080f4:	761a      	strb	r2, [r3, #24]
      break;
 80080f6:	e035      	b.n	8008164 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	7e5b      	ldrb	r3, [r3, #25]
 80080fc:	3301      	adds	r3, #1
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	765a      	strb	r2, [r3, #25]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	7e5b      	ldrb	r3, [r3, #25]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d806      	bhi.n	800811a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008118:	e025      	b.n	8008166 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008120:	2106      	movs	r1, #6
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	795b      	ldrb	r3, [r3, #5]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f90c 	bl	8008350 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	791b      	ldrb	r3, [r3, #4]
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f906 	bl	8008350 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800814a:	2302      	movs	r3, #2
 800814c:	73fb      	strb	r3, [r7, #15]
      break;
 800814e:	e00a      	b.n	8008166 <USBH_HandleControl+0x2de>

    default:
      break;
 8008150:	bf00      	nop
 8008152:	e008      	b.n	8008166 <USBH_HandleControl+0x2de>
      break;
 8008154:	bf00      	nop
 8008156:	e006      	b.n	8008166 <USBH_HandleControl+0x2de>
      break;
 8008158:	bf00      	nop
 800815a:	e004      	b.n	8008166 <USBH_HandleControl+0x2de>
      break;
 800815c:	bf00      	nop
 800815e:	e002      	b.n	8008166 <USBH_HandleControl+0x2de>
      break;
 8008160:	bf00      	nop
 8008162:	e000      	b.n	8008166 <USBH_HandleControl+0x2de>
      break;
 8008164:	bf00      	nop
  }

  return status;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af04      	add	r7, sp, #16
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800817e:	79f9      	ldrb	r1, [r7, #7]
 8008180:	2300      	movs	r3, #0
 8008182:	9303      	str	r3, [sp, #12]
 8008184:	2308      	movs	r3, #8
 8008186:	9302      	str	r3, [sp, #8]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	2300      	movs	r3, #0
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	2300      	movs	r3, #0
 8008192:	2200      	movs	r2, #0
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 fb46 	bl	8008826 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b088      	sub	sp, #32
 80081a8:	af04      	add	r7, sp, #16
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	4611      	mov	r1, r2
 80081b0:	461a      	mov	r2, r3
 80081b2:	460b      	mov	r3, r1
 80081b4:	80fb      	strh	r3, [r7, #6]
 80081b6:	4613      	mov	r3, r2
 80081b8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081c8:	7979      	ldrb	r1, [r7, #5]
 80081ca:	7e3b      	ldrb	r3, [r7, #24]
 80081cc:	9303      	str	r3, [sp, #12]
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	9302      	str	r3, [sp, #8]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	2301      	movs	r3, #1
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	2300      	movs	r3, #0
 80081dc:	2200      	movs	r2, #0
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fb21 	bl	8008826 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b088      	sub	sp, #32
 80081f2:	af04      	add	r7, sp, #16
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	4611      	mov	r1, r2
 80081fa:	461a      	mov	r2, r3
 80081fc:	460b      	mov	r3, r1
 80081fe:	80fb      	strh	r3, [r7, #6]
 8008200:	4613      	mov	r3, r2
 8008202:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008204:	7979      	ldrb	r1, [r7, #5]
 8008206:	2300      	movs	r3, #0
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	2301      	movs	r3, #1
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	2300      	movs	r3, #0
 8008218:	2201      	movs	r2, #1
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 fb03 	bl	8008826 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008220:	2300      	movs	r3, #0

}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b088      	sub	sp, #32
 800822e:	af04      	add	r7, sp, #16
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	4611      	mov	r1, r2
 8008236:	461a      	mov	r2, r3
 8008238:	460b      	mov	r3, r1
 800823a:	80fb      	strh	r3, [r7, #6]
 800823c:	4613      	mov	r3, r2
 800823e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800824e:	7979      	ldrb	r1, [r7, #5]
 8008250:	7e3b      	ldrb	r3, [r7, #24]
 8008252:	9303      	str	r3, [sp, #12]
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	9302      	str	r3, [sp, #8]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	2301      	movs	r3, #1
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	2302      	movs	r3, #2
 8008262:	2200      	movs	r2, #0
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 fade 	bl	8008826 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af04      	add	r7, sp, #16
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4611      	mov	r1, r2
 8008280:	461a      	mov	r2, r3
 8008282:	460b      	mov	r3, r1
 8008284:	80fb      	strh	r3, [r7, #6]
 8008286:	4613      	mov	r3, r2
 8008288:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800828a:	7979      	ldrb	r1, [r7, #5]
 800828c:	2300      	movs	r3, #0
 800828e:	9303      	str	r3, [sp, #12]
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	9302      	str	r3, [sp, #8]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	2301      	movs	r3, #1
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2302      	movs	r3, #2
 800829e:	2201      	movs	r2, #1
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fac0 	bl	8008826 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af04      	add	r7, sp, #16
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	4608      	mov	r0, r1
 80082ba:	4611      	mov	r1, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	4603      	mov	r3, r0
 80082c0:	70fb      	strb	r3, [r7, #3]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70bb      	strb	r3, [r7, #2]
 80082c6:	4613      	mov	r3, r2
 80082c8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80082ca:	7878      	ldrb	r0, [r7, #1]
 80082cc:	78ba      	ldrb	r2, [r7, #2]
 80082ce:	78f9      	ldrb	r1, [r7, #3]
 80082d0:	8b3b      	ldrh	r3, [r7, #24]
 80082d2:	9302      	str	r3, [sp, #8]
 80082d4:	7d3b      	ldrb	r3, [r7, #20]
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	7c3b      	ldrb	r3, [r7, #16]
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	4603      	mov	r3, r0
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa53 	bl	800878a <USBH_LL_OpenPipe>

  return USBH_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa72 	bl	80087e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f836 	bl	800838c <USBH_GetFreePipe>
 8008320:	4603      	mov	r3, r0
 8008322:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008324:	89fb      	ldrh	r3, [r7, #14]
 8008326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800832a:	4293      	cmp	r3, r2
 800832c:	d00a      	beq.n	8008344 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800832e:	78fa      	ldrb	r2, [r7, #3]
 8008330:	89fb      	ldrh	r3, [r7, #14]
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	33e0      	adds	r3, #224	; 0xe0
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008344:	89fb      	ldrh	r3, [r7, #14]
 8008346:	b2db      	uxtb	r3, r3
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	2b0f      	cmp	r3, #15
 8008360:	d80d      	bhi.n	800837e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	33e0      	adds	r3, #224	; 0xe0
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008374:	6879      	ldr	r1, [r7, #4]
 8008376:	33e0      	adds	r3, #224	; 0xe0
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
 800839c:	e00f      	b.n	80083be <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	33e0      	adds	r3, #224	; 0xe0
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	e007      	b.n	80083c8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	3301      	adds	r3, #1
 80083bc:	73fb      	strb	r3, [r7, #15]
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2b0f      	cmp	r3, #15
 80083c2:	d9ec      	bls.n	800839e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80083c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80083d8:	2201      	movs	r2, #1
 80083da:	490e      	ldr	r1, [pc, #56]	; (8008414 <MX_USB_HOST_Init+0x40>)
 80083dc:	480e      	ldr	r0, [pc, #56]	; (8008418 <MX_USB_HOST_Init+0x44>)
 80083de:	f7fe fba7 	bl	8006b30 <USBH_Init>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80083e8:	f7f8 fba4 	bl	8000b34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80083ec:	490b      	ldr	r1, [pc, #44]	; (800841c <MX_USB_HOST_Init+0x48>)
 80083ee:	480a      	ldr	r0, [pc, #40]	; (8008418 <MX_USB_HOST_Init+0x44>)
 80083f0:	f7fe fc2c 	bl	8006c4c <USBH_RegisterClass>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80083fa:	f7f8 fb9b 	bl	8000b34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80083fe:	4806      	ldr	r0, [pc, #24]	; (8008418 <MX_USB_HOST_Init+0x44>)
 8008400:	f7fe fcb0 	bl	8006d64 <USBH_Start>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800840a:	f7f8 fb93 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800840e:	bf00      	nop
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	08008435 	.word	0x08008435
 8008418:	2000021c 	.word	0x2000021c
 800841c:	2000000c 	.word	0x2000000c

08008420 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008424:	4802      	ldr	r0, [pc, #8]	; (8008430 <MX_USB_HOST_Process+0x10>)
 8008426:	f7fe fcad 	bl	8006d84 <USBH_Process>
}
 800842a:	bf00      	nop
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	2000021c 	.word	0x2000021c

08008434 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	3b01      	subs	r3, #1
 8008444:	2b04      	cmp	r3, #4
 8008446:	d819      	bhi.n	800847c <USBH_UserProcess+0x48>
 8008448:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <USBH_UserProcess+0x1c>)
 800844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844e:	bf00      	nop
 8008450:	0800847d 	.word	0x0800847d
 8008454:	0800846d 	.word	0x0800846d
 8008458:	0800847d 	.word	0x0800847d
 800845c:	08008475 	.word	0x08008475
 8008460:	08008465 	.word	0x08008465
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008464:	4b09      	ldr	r3, [pc, #36]	; (800848c <USBH_UserProcess+0x58>)
 8008466:	2203      	movs	r2, #3
 8008468:	701a      	strb	r2, [r3, #0]
  break;
 800846a:	e008      	b.n	800847e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800846c:	4b07      	ldr	r3, [pc, #28]	; (800848c <USBH_UserProcess+0x58>)
 800846e:	2202      	movs	r2, #2
 8008470:	701a      	strb	r2, [r3, #0]
  break;
 8008472:	e004      	b.n	800847e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <USBH_UserProcess+0x58>)
 8008476:	2201      	movs	r2, #1
 8008478:	701a      	strb	r2, [r3, #0]
  break;
 800847a:	e000      	b.n	800847e <USBH_UserProcess+0x4a>

  default:
  break;
 800847c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	200005f4 	.word	0x200005f4

08008490 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08a      	sub	sp, #40	; 0x28
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008498:	f107 0314 	add.w	r3, r7, #20
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	605a      	str	r2, [r3, #4]
 80084a2:	609a      	str	r2, [r3, #8]
 80084a4:	60da      	str	r2, [r3, #12]
 80084a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084b0:	d147      	bne.n	8008542 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084b2:	2300      	movs	r3, #0
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	4b25      	ldr	r3, [pc, #148]	; (800854c <HAL_HCD_MspInit+0xbc>)
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	4a24      	ldr	r2, [pc, #144]	; (800854c <HAL_HCD_MspInit+0xbc>)
 80084bc:	f043 0301 	orr.w	r3, r3, #1
 80084c0:	6313      	str	r3, [r2, #48]	; 0x30
 80084c2:	4b22      	ldr	r3, [pc, #136]	; (800854c <HAL_HCD_MspInit+0xbc>)
 80084c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	613b      	str	r3, [r7, #16]
 80084cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80084ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084d4:	2300      	movs	r3, #0
 80084d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80084dc:	f107 0314 	add.w	r3, r7, #20
 80084e0:	4619      	mov	r1, r3
 80084e2:	481b      	ldr	r0, [pc, #108]	; (8008550 <HAL_HCD_MspInit+0xc0>)
 80084e4:	f7f9 fd74 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ee:	2302      	movs	r3, #2
 80084f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084f6:	2300      	movs	r3, #0
 80084f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084fa:	230a      	movs	r3, #10
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084fe:	f107 0314 	add.w	r3, r7, #20
 8008502:	4619      	mov	r1, r3
 8008504:	4812      	ldr	r0, [pc, #72]	; (8008550 <HAL_HCD_MspInit+0xc0>)
 8008506:	f7f9 fd63 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800850a:	4b10      	ldr	r3, [pc, #64]	; (800854c <HAL_HCD_MspInit+0xbc>)
 800850c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850e:	4a0f      	ldr	r2, [pc, #60]	; (800854c <HAL_HCD_MspInit+0xbc>)
 8008510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008514:	6353      	str	r3, [r2, #52]	; 0x34
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	4b0c      	ldr	r3, [pc, #48]	; (800854c <HAL_HCD_MspInit+0xbc>)
 800851c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851e:	4a0b      	ldr	r2, [pc, #44]	; (800854c <HAL_HCD_MspInit+0xbc>)
 8008520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008524:	6453      	str	r3, [r2, #68]	; 0x44
 8008526:	4b09      	ldr	r3, [pc, #36]	; (800854c <HAL_HCD_MspInit+0xbc>)
 8008528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800852a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008532:	2200      	movs	r2, #0
 8008534:	2100      	movs	r1, #0
 8008536:	2043      	movs	r0, #67	; 0x43
 8008538:	f7f9 fd13 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800853c:	2043      	movs	r0, #67	; 0x43
 800853e:	f7f9 fd2c 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008542:	bf00      	nop
 8008544:	3728      	adds	r7, #40	; 0x28
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40023800 	.word	0x40023800
 8008550:	40020000 	.word	0x40020000

08008554 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe ffed 	bl	8007542 <USBH_LL_IncTimer>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800857e:	4618      	mov	r0, r3
 8008580:	f7ff f825 	bl	80075ce <USBH_LL_Connect>
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff f82e 	bl	80075fc <USBH_LL_Disconnect>
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
 80085b4:	4613      	mov	r3, r2
 80085b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe ffdf 	bl	8007596 <USBH_LL_PortEnabled>
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe ffdf 	bl	80075b2 <USBH_LL_PortDisabled>
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800860a:	2b01      	cmp	r3, #1
 800860c:	d12a      	bne.n	8008664 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800860e:	4a18      	ldr	r2, [pc, #96]	; (8008670 <USBH_LL_Init+0x74>)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a15      	ldr	r2, [pc, #84]	; (8008670 <USBH_LL_Init+0x74>)
 800861a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800861e:	4b14      	ldr	r3, [pc, #80]	; (8008670 <USBH_LL_Init+0x74>)
 8008620:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008624:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008626:	4b12      	ldr	r3, [pc, #72]	; (8008670 <USBH_LL_Init+0x74>)
 8008628:	2208      	movs	r2, #8
 800862a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800862c:	4b10      	ldr	r3, [pc, #64]	; (8008670 <USBH_LL_Init+0x74>)
 800862e:	2201      	movs	r2, #1
 8008630:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008632:	4b0f      	ldr	r3, [pc, #60]	; (8008670 <USBH_LL_Init+0x74>)
 8008634:	2200      	movs	r2, #0
 8008636:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008638:	4b0d      	ldr	r3, [pc, #52]	; (8008670 <USBH_LL_Init+0x74>)
 800863a:	2202      	movs	r2, #2
 800863c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800863e:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <USBH_LL_Init+0x74>)
 8008640:	2200      	movs	r2, #0
 8008642:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008644:	480a      	ldr	r0, [pc, #40]	; (8008670 <USBH_LL_Init+0x74>)
 8008646:	f7f9 feb6 	bl	80023b6 <HAL_HCD_Init>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008650:	f7f8 fa70 	bl	8000b34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008654:	4806      	ldr	r0, [pc, #24]	; (8008670 <USBH_LL_Init+0x74>)
 8008656:	f7fa fa9a 	bl	8002b8e <HAL_HCD_GetCurrentFrame>
 800865a:	4603      	mov	r3, r0
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7fe ff60 	bl	8007524 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	200005f8 	.word	0x200005f8

08008674 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800868a:	4618      	mov	r0, r3
 800868c:	f7fa fa09 	bl	8002aa2 <HAL_HCD_Start>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f95c 	bl	8008954 <USBH_Get_USB_Status>
 800869c:	4603      	mov	r3, r0
 800869e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fa fa11 	bl	8002ae8 <HAL_HCD_Stop>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 f941 	bl	8008954 <USBH_Get_USB_Status>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80086e8:	2301      	movs	r3, #1
 80086ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fa fa59 	bl	8002baa <HAL_HCD_GetCurrentSpeed>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d00c      	beq.n	8008718 <USBH_LL_GetSpeed+0x38>
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d80d      	bhi.n	800871e <USBH_LL_GetSpeed+0x3e>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <USBH_LL_GetSpeed+0x2c>
 8008706:	2b01      	cmp	r3, #1
 8008708:	d003      	beq.n	8008712 <USBH_LL_GetSpeed+0x32>
 800870a:	e008      	b.n	800871e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
    break;
 8008710:	e008      	b.n	8008724 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008712:	2301      	movs	r3, #1
 8008714:	73fb      	strb	r3, [r7, #15]
    break;
 8008716:	e005      	b.n	8008724 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008718:	2302      	movs	r3, #2
 800871a:	73fb      	strb	r3, [r7, #15]
    break;
 800871c:	e002      	b.n	8008724 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800871e:	2301      	movs	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
    break;
 8008722:	bf00      	nop
  }
  return  speed;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008744:	4618      	mov	r0, r3
 8008746:	f7fa f9ec 	bl	8002b22 <HAL_HCD_ResetPort>
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	4618      	mov	r0, r3
 8008752:	f000 f8ff 	bl	8008954 <USBH_Get_USB_Status>
 8008756:	4603      	mov	r3, r0
 8008758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875a:	7bbb      	ldrb	r3, [r7, #14]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	4611      	mov	r1, r2
 800877a:	4618      	mov	r0, r3
 800877c:	f7fa f9f3 	bl	8002b66 <HAL_HCD_HC_GetXferCount>
 8008780:	4603      	mov	r3, r0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800878a:	b590      	push	{r4, r7, lr}
 800878c:	b089      	sub	sp, #36	; 0x24
 800878e:	af04      	add	r7, sp, #16
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	4608      	mov	r0, r1
 8008794:	4611      	mov	r1, r2
 8008796:	461a      	mov	r2, r3
 8008798:	4603      	mov	r3, r0
 800879a:	70fb      	strb	r3, [r7, #3]
 800879c:	460b      	mov	r3, r1
 800879e:	70bb      	strb	r3, [r7, #2]
 80087a0:	4613      	mov	r3, r2
 80087a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087b2:	787c      	ldrb	r4, [r7, #1]
 80087b4:	78ba      	ldrb	r2, [r7, #2]
 80087b6:	78f9      	ldrb	r1, [r7, #3]
 80087b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087ba:	9302      	str	r3, [sp, #8]
 80087bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	4623      	mov	r3, r4
 80087ca:	f7f9 fe56 	bl	800247a <HAL_HCD_HC_Init>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f8bd 	bl	8008954 <USBH_Get_USB_Status>
 80087da:	4603      	mov	r3, r0
 80087dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087de:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd90      	pop	{r4, r7, pc}

080087e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	4611      	mov	r1, r2
 8008806:	4618      	mov	r0, r3
 8008808:	f7f9 fec6 	bl	8002598 <HAL_HCD_HC_Halt>
 800880c:	4603      	mov	r3, r0
 800880e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f89e 	bl	8008954 <USBH_Get_USB_Status>
 8008818:	4603      	mov	r3, r0
 800881a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800881c:	7bbb      	ldrb	r3, [r7, #14]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008826:	b590      	push	{r4, r7, lr}
 8008828:	b089      	sub	sp, #36	; 0x24
 800882a:	af04      	add	r7, sp, #16
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	4608      	mov	r0, r1
 8008830:	4611      	mov	r1, r2
 8008832:	461a      	mov	r2, r3
 8008834:	4603      	mov	r3, r0
 8008836:	70fb      	strb	r3, [r7, #3]
 8008838:	460b      	mov	r3, r1
 800883a:	70bb      	strb	r3, [r7, #2]
 800883c:	4613      	mov	r3, r2
 800883e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800884e:	787c      	ldrb	r4, [r7, #1]
 8008850:	78ba      	ldrb	r2, [r7, #2]
 8008852:	78f9      	ldrb	r1, [r7, #3]
 8008854:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008858:	9303      	str	r3, [sp, #12]
 800885a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800885c:	9302      	str	r3, [sp, #8]
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	4623      	mov	r3, r4
 800886a:	f7f9 feb9 	bl	80025e0 <HAL_HCD_HC_SubmitRequest>
 800886e:	4603      	mov	r3, r0
 8008870:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 f86d 	bl	8008954 <USBH_Get_USB_Status>
 800887a:	4603      	mov	r3, r0
 800887c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800887e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	bd90      	pop	{r4, r7, pc}

08008888 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800889a:	78fa      	ldrb	r2, [r7, #3]
 800889c:	4611      	mov	r1, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fa f94d 	bl	8002b3e <HAL_HCD_HC_GetURBState>
 80088a4:	4603      	mov	r3, r0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	460b      	mov	r3, r1
 80088b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d103      	bne.n	80088cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f870 	bl	80089ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80088cc:	20c8      	movs	r0, #200	; 0xc8
 80088ce:	f7f8 fbf1 	bl	80010b4 <HAL_Delay>
  return USBH_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
 80088e8:	4613      	mov	r3, r2
 80088ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	212c      	movs	r1, #44	; 0x2c
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	4413      	add	r3, r2
 8008900:	333b      	adds	r3, #59	; 0x3b
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	212c      	movs	r1, #44	; 0x2c
 800890e:	fb01 f303 	mul.w	r3, r1, r3
 8008912:	4413      	add	r3, r2
 8008914:	3354      	adds	r3, #84	; 0x54
 8008916:	78ba      	ldrb	r2, [r7, #2]
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	e008      	b.n	800892e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	212c      	movs	r1, #44	; 0x2c
 8008922:	fb01 f303 	mul.w	r3, r1, r3
 8008926:	4413      	add	r3, r2
 8008928:	3355      	adds	r3, #85	; 0x55
 800892a:	78ba      	ldrb	r2, [r7, #2]
 800892c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7f8 fbb5 	bl	80010b4 <HAL_Delay>
}
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	2b03      	cmp	r3, #3
 8008966:	d817      	bhi.n	8008998 <USBH_Get_USB_Status+0x44>
 8008968:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <USBH_Get_USB_Status+0x1c>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	08008981 	.word	0x08008981
 8008974:	08008987 	.word	0x08008987
 8008978:	0800898d 	.word	0x0800898d
 800897c:	08008993 	.word	0x08008993
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
    break;
 8008984:	e00b      	b.n	800899e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008986:	2302      	movs	r3, #2
 8008988:	73fb      	strb	r3, [r7, #15]
    break;
 800898a:	e008      	b.n	800899e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800898c:	2301      	movs	r3, #1
 800898e:	73fb      	strb	r3, [r7, #15]
    break;
 8008990:	e005      	b.n	800899e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008992:	2302      	movs	r3, #2
 8008994:	73fb      	strb	r3, [r7, #15]
    break;
 8008996:	e002      	b.n	800899e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008998:	2302      	movs	r3, #2
 800899a:	73fb      	strb	r3, [r7, #15]
    break;
 800899c:	bf00      	nop
  }
  return usb_status;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d102      	bne.n	80089c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]
 80089c4:	e001      	b.n	80089ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80089c6:	2301      	movs	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	461a      	mov	r2, r3
 80089ce:	2101      	movs	r1, #1
 80089d0:	4803      	ldr	r0, [pc, #12]	; (80089e0 <MX_DriverVbusFS+0x34>)
 80089d2:	f7f9 fc99 	bl	8002308 <HAL_GPIO_WritePin>
}
 80089d6:	bf00      	nop
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40020800 	.word	0x40020800

080089e4 <__errno>:
 80089e4:	4b01      	ldr	r3, [pc, #4]	; (80089ec <__errno+0x8>)
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	2000002c 	.word	0x2000002c

080089f0 <__libc_init_array>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	4d0d      	ldr	r5, [pc, #52]	; (8008a28 <__libc_init_array+0x38>)
 80089f4:	4c0d      	ldr	r4, [pc, #52]	; (8008a2c <__libc_init_array+0x3c>)
 80089f6:	1b64      	subs	r4, r4, r5
 80089f8:	10a4      	asrs	r4, r4, #2
 80089fa:	2600      	movs	r6, #0
 80089fc:	42a6      	cmp	r6, r4
 80089fe:	d109      	bne.n	8008a14 <__libc_init_array+0x24>
 8008a00:	4d0b      	ldr	r5, [pc, #44]	; (8008a30 <__libc_init_array+0x40>)
 8008a02:	4c0c      	ldr	r4, [pc, #48]	; (8008a34 <__libc_init_array+0x44>)
 8008a04:	f000 f92e 	bl	8008c64 <_init>
 8008a08:	1b64      	subs	r4, r4, r5
 8008a0a:	10a4      	asrs	r4, r4, #2
 8008a0c:	2600      	movs	r6, #0
 8008a0e:	42a6      	cmp	r6, r4
 8008a10:	d105      	bne.n	8008a1e <__libc_init_array+0x2e>
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a18:	4798      	blx	r3
 8008a1a:	3601      	adds	r6, #1
 8008a1c:	e7ee      	b.n	80089fc <__libc_init_array+0xc>
 8008a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a22:	4798      	blx	r3
 8008a24:	3601      	adds	r6, #1
 8008a26:	e7f2      	b.n	8008a0e <__libc_init_array+0x1e>
 8008a28:	08008ca0 	.word	0x08008ca0
 8008a2c:	08008ca0 	.word	0x08008ca0
 8008a30:	08008ca0 	.word	0x08008ca0
 8008a34:	08008ca4 	.word	0x08008ca4

08008a38 <malloc>:
 8008a38:	4b02      	ldr	r3, [pc, #8]	; (8008a44 <malloc+0xc>)
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	f000 b87f 	b.w	8008b40 <_malloc_r>
 8008a42:	bf00      	nop
 8008a44:	2000002c 	.word	0x2000002c

08008a48 <free>:
 8008a48:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <free+0xc>)
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	f000 b80b 	b.w	8008a68 <_free_r>
 8008a52:	bf00      	nop
 8008a54:	2000002c 	.word	0x2000002c

08008a58 <memset>:
 8008a58:	4402      	add	r2, r0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d100      	bne.n	8008a62 <memset+0xa>
 8008a60:	4770      	bx	lr
 8008a62:	f803 1b01 	strb.w	r1, [r3], #1
 8008a66:	e7f9      	b.n	8008a5c <memset+0x4>

08008a68 <_free_r>:
 8008a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a6a:	2900      	cmp	r1, #0
 8008a6c:	d044      	beq.n	8008af8 <_free_r+0x90>
 8008a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a72:	9001      	str	r0, [sp, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f1a1 0404 	sub.w	r4, r1, #4
 8008a7a:	bfb8      	it	lt
 8008a7c:	18e4      	addlt	r4, r4, r3
 8008a7e:	f000 f8e3 	bl	8008c48 <__malloc_lock>
 8008a82:	4a1e      	ldr	r2, [pc, #120]	; (8008afc <_free_r+0x94>)
 8008a84:	9801      	ldr	r0, [sp, #4]
 8008a86:	6813      	ldr	r3, [r2, #0]
 8008a88:	b933      	cbnz	r3, 8008a98 <_free_r+0x30>
 8008a8a:	6063      	str	r3, [r4, #4]
 8008a8c:	6014      	str	r4, [r2, #0]
 8008a8e:	b003      	add	sp, #12
 8008a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a94:	f000 b8de 	b.w	8008c54 <__malloc_unlock>
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d908      	bls.n	8008aae <_free_r+0x46>
 8008a9c:	6825      	ldr	r5, [r4, #0]
 8008a9e:	1961      	adds	r1, r4, r5
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf01      	itttt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	1949      	addeq	r1, r1, r5
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	e7ed      	b.n	8008a8a <_free_r+0x22>
 8008aae:	461a      	mov	r2, r3
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	b10b      	cbz	r3, 8008ab8 <_free_r+0x50>
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	d9fa      	bls.n	8008aae <_free_r+0x46>
 8008ab8:	6811      	ldr	r1, [r2, #0]
 8008aba:	1855      	adds	r5, r2, r1
 8008abc:	42a5      	cmp	r5, r4
 8008abe:	d10b      	bne.n	8008ad8 <_free_r+0x70>
 8008ac0:	6824      	ldr	r4, [r4, #0]
 8008ac2:	4421      	add	r1, r4
 8008ac4:	1854      	adds	r4, r2, r1
 8008ac6:	42a3      	cmp	r3, r4
 8008ac8:	6011      	str	r1, [r2, #0]
 8008aca:	d1e0      	bne.n	8008a8e <_free_r+0x26>
 8008acc:	681c      	ldr	r4, [r3, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	6053      	str	r3, [r2, #4]
 8008ad2:	4421      	add	r1, r4
 8008ad4:	6011      	str	r1, [r2, #0]
 8008ad6:	e7da      	b.n	8008a8e <_free_r+0x26>
 8008ad8:	d902      	bls.n	8008ae0 <_free_r+0x78>
 8008ada:	230c      	movs	r3, #12
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	e7d6      	b.n	8008a8e <_free_r+0x26>
 8008ae0:	6825      	ldr	r5, [r4, #0]
 8008ae2:	1961      	adds	r1, r4, r5
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	bf04      	itt	eq
 8008ae8:	6819      	ldreq	r1, [r3, #0]
 8008aea:	685b      	ldreq	r3, [r3, #4]
 8008aec:	6063      	str	r3, [r4, #4]
 8008aee:	bf04      	itt	eq
 8008af0:	1949      	addeq	r1, r1, r5
 8008af2:	6021      	streq	r1, [r4, #0]
 8008af4:	6054      	str	r4, [r2, #4]
 8008af6:	e7ca      	b.n	8008a8e <_free_r+0x26>
 8008af8:	b003      	add	sp, #12
 8008afa:	bd30      	pop	{r4, r5, pc}
 8008afc:	200008fc 	.word	0x200008fc

08008b00 <sbrk_aligned>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	4e0e      	ldr	r6, [pc, #56]	; (8008b3c <sbrk_aligned+0x3c>)
 8008b04:	460c      	mov	r4, r1
 8008b06:	6831      	ldr	r1, [r6, #0]
 8008b08:	4605      	mov	r5, r0
 8008b0a:	b911      	cbnz	r1, 8008b12 <sbrk_aligned+0x12>
 8008b0c:	f000 f88c 	bl	8008c28 <_sbrk_r>
 8008b10:	6030      	str	r0, [r6, #0]
 8008b12:	4621      	mov	r1, r4
 8008b14:	4628      	mov	r0, r5
 8008b16:	f000 f887 	bl	8008c28 <_sbrk_r>
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	d00a      	beq.n	8008b34 <sbrk_aligned+0x34>
 8008b1e:	1cc4      	adds	r4, r0, #3
 8008b20:	f024 0403 	bic.w	r4, r4, #3
 8008b24:	42a0      	cmp	r0, r4
 8008b26:	d007      	beq.n	8008b38 <sbrk_aligned+0x38>
 8008b28:	1a21      	subs	r1, r4, r0
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f87c 	bl	8008c28 <_sbrk_r>
 8008b30:	3001      	adds	r0, #1
 8008b32:	d101      	bne.n	8008b38 <sbrk_aligned+0x38>
 8008b34:	f04f 34ff 	mov.w	r4, #4294967295
 8008b38:	4620      	mov	r0, r4
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	20000900 	.word	0x20000900

08008b40 <_malloc_r>:
 8008b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	1ccd      	adds	r5, r1, #3
 8008b46:	f025 0503 	bic.w	r5, r5, #3
 8008b4a:	3508      	adds	r5, #8
 8008b4c:	2d0c      	cmp	r5, #12
 8008b4e:	bf38      	it	cc
 8008b50:	250c      	movcc	r5, #12
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	4607      	mov	r7, r0
 8008b56:	db01      	blt.n	8008b5c <_malloc_r+0x1c>
 8008b58:	42a9      	cmp	r1, r5
 8008b5a:	d905      	bls.n	8008b68 <_malloc_r+0x28>
 8008b5c:	230c      	movs	r3, #12
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	2600      	movs	r6, #0
 8008b62:	4630      	mov	r0, r6
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	4e2e      	ldr	r6, [pc, #184]	; (8008c24 <_malloc_r+0xe4>)
 8008b6a:	f000 f86d 	bl	8008c48 <__malloc_lock>
 8008b6e:	6833      	ldr	r3, [r6, #0]
 8008b70:	461c      	mov	r4, r3
 8008b72:	bb34      	cbnz	r4, 8008bc2 <_malloc_r+0x82>
 8008b74:	4629      	mov	r1, r5
 8008b76:	4638      	mov	r0, r7
 8008b78:	f7ff ffc2 	bl	8008b00 <sbrk_aligned>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	4604      	mov	r4, r0
 8008b80:	d14d      	bne.n	8008c1e <_malloc_r+0xde>
 8008b82:	6834      	ldr	r4, [r6, #0]
 8008b84:	4626      	mov	r6, r4
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	d140      	bne.n	8008c0c <_malloc_r+0xcc>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4638      	mov	r0, r7
 8008b90:	eb04 0803 	add.w	r8, r4, r3
 8008b94:	f000 f848 	bl	8008c28 <_sbrk_r>
 8008b98:	4580      	cmp	r8, r0
 8008b9a:	d13a      	bne.n	8008c12 <_malloc_r+0xd2>
 8008b9c:	6821      	ldr	r1, [r4, #0]
 8008b9e:	3503      	adds	r5, #3
 8008ba0:	1a6d      	subs	r5, r5, r1
 8008ba2:	f025 0503 	bic.w	r5, r5, #3
 8008ba6:	3508      	adds	r5, #8
 8008ba8:	2d0c      	cmp	r5, #12
 8008baa:	bf38      	it	cc
 8008bac:	250c      	movcc	r5, #12
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff ffa5 	bl	8008b00 <sbrk_aligned>
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d02b      	beq.n	8008c12 <_malloc_r+0xd2>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	442b      	add	r3, r5
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	e00e      	b.n	8008be0 <_malloc_r+0xa0>
 8008bc2:	6822      	ldr	r2, [r4, #0]
 8008bc4:	1b52      	subs	r2, r2, r5
 8008bc6:	d41e      	bmi.n	8008c06 <_malloc_r+0xc6>
 8008bc8:	2a0b      	cmp	r2, #11
 8008bca:	d916      	bls.n	8008bfa <_malloc_r+0xba>
 8008bcc:	1961      	adds	r1, r4, r5
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	6025      	str	r5, [r4, #0]
 8008bd2:	bf18      	it	ne
 8008bd4:	6059      	strne	r1, [r3, #4]
 8008bd6:	6863      	ldr	r3, [r4, #4]
 8008bd8:	bf08      	it	eq
 8008bda:	6031      	streq	r1, [r6, #0]
 8008bdc:	5162      	str	r2, [r4, r5]
 8008bde:	604b      	str	r3, [r1, #4]
 8008be0:	4638      	mov	r0, r7
 8008be2:	f104 060b 	add.w	r6, r4, #11
 8008be6:	f000 f835 	bl	8008c54 <__malloc_unlock>
 8008bea:	f026 0607 	bic.w	r6, r6, #7
 8008bee:	1d23      	adds	r3, r4, #4
 8008bf0:	1af2      	subs	r2, r6, r3
 8008bf2:	d0b6      	beq.n	8008b62 <_malloc_r+0x22>
 8008bf4:	1b9b      	subs	r3, r3, r6
 8008bf6:	50a3      	str	r3, [r4, r2]
 8008bf8:	e7b3      	b.n	8008b62 <_malloc_r+0x22>
 8008bfa:	6862      	ldr	r2, [r4, #4]
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	bf0c      	ite	eq
 8008c00:	6032      	streq	r2, [r6, #0]
 8008c02:	605a      	strne	r2, [r3, #4]
 8008c04:	e7ec      	b.n	8008be0 <_malloc_r+0xa0>
 8008c06:	4623      	mov	r3, r4
 8008c08:	6864      	ldr	r4, [r4, #4]
 8008c0a:	e7b2      	b.n	8008b72 <_malloc_r+0x32>
 8008c0c:	4634      	mov	r4, r6
 8008c0e:	6876      	ldr	r6, [r6, #4]
 8008c10:	e7b9      	b.n	8008b86 <_malloc_r+0x46>
 8008c12:	230c      	movs	r3, #12
 8008c14:	603b      	str	r3, [r7, #0]
 8008c16:	4638      	mov	r0, r7
 8008c18:	f000 f81c 	bl	8008c54 <__malloc_unlock>
 8008c1c:	e7a1      	b.n	8008b62 <_malloc_r+0x22>
 8008c1e:	6025      	str	r5, [r4, #0]
 8008c20:	e7de      	b.n	8008be0 <_malloc_r+0xa0>
 8008c22:	bf00      	nop
 8008c24:	200008fc 	.word	0x200008fc

08008c28 <_sbrk_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	; (8008c44 <_sbrk_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7f8 f95a 	bl	8000eec <_sbrk>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_sbrk_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_sbrk_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	20000904 	.word	0x20000904

08008c48 <__malloc_lock>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__malloc_lock+0x8>)
 8008c4a:	f000 b809 	b.w	8008c60 <__retarget_lock_acquire_recursive>
 8008c4e:	bf00      	nop
 8008c50:	20000908 	.word	0x20000908

08008c54 <__malloc_unlock>:
 8008c54:	4801      	ldr	r0, [pc, #4]	; (8008c5c <__malloc_unlock+0x8>)
 8008c56:	f000 b804 	b.w	8008c62 <__retarget_lock_release_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	20000908 	.word	0x20000908

08008c60 <__retarget_lock_acquire_recursive>:
 8008c60:	4770      	bx	lr

08008c62 <__retarget_lock_release_recursive>:
 8008c62:	4770      	bx	lr

08008c64 <_init>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr

08008c70 <_fini>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr
